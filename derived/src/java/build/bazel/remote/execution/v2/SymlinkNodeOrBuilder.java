// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: build/bazel/remote/execution/v2/remote_execution.proto

package build.bazel.remote.execution.v2;

public interface SymlinkNodeOrBuilder extends
    // @@protoc_insertion_point(interface_extends:build.bazel.remote.execution.v2.SymlinkNode)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The name of the symlink.
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  java.lang.String getName();
  /**
   * <pre>
   * The name of the symlink.
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * The target path of the symlink. The path separator is a forward slash `/`.
   * The target path can be relative to the parent directory of the symlink or
   * it can be an absolute path starting with `/`. Support for absolute paths
   * can be checked using the [Capabilities][build.bazel.remote.execution.v2.Capabilities]
   * API. The canonical form forbids the substrings `/./` and `//` in the target
   * path. `..` components are allowed anywhere in the target path.
   * </pre>
   *
   * <code>string target = 2;</code>
   */
  java.lang.String getTarget();
  /**
   * <pre>
   * The target path of the symlink. The path separator is a forward slash `/`.
   * The target path can be relative to the parent directory of the symlink or
   * it can be an absolute path starting with `/`. Support for absolute paths
   * can be checked using the [Capabilities][build.bazel.remote.execution.v2.Capabilities]
   * API. The canonical form forbids the substrings `/./` and `//` in the target
   * path. `..` components are allowed anywhere in the target path.
   * </pre>
   *
   * <code>string target = 2;</code>
   */
  com.google.protobuf.ByteString
      getTargetBytes();
}
