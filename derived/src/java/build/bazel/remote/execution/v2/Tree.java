// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: build/bazel/remote/execution/v2/remote_execution.proto

package build.bazel.remote.execution.v2;

/**
 * <pre>
 * A `Tree` contains all the
 * [Directory][build.bazel.remote.execution.v2.Directory] protos in a
 * single directory Merkle tree, compressed into one message.
 * </pre>
 *
 * Protobuf type {@code build.bazel.remote.execution.v2.Tree}
 */
public  final class Tree extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:build.bazel.remote.execution.v2.Tree)
    TreeOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Tree.newBuilder() to construct.
  private Tree(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Tree() {
    children_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Tree(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            build.bazel.remote.execution.v2.Directory.Builder subBuilder = null;
            if (root_ != null) {
              subBuilder = root_.toBuilder();
            }
            root_ = input.readMessage(build.bazel.remote.execution.v2.Directory.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(root_);
              root_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              children_ = new java.util.ArrayList<build.bazel.remote.execution.v2.Directory>();
              mutable_bitField0_ |= 0x00000002;
            }
            children_.add(
                input.readMessage(build.bazel.remote.execution.v2.Directory.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
        children_ = java.util.Collections.unmodifiableList(children_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return build.bazel.remote.execution.v2.RemoteExecutionProto.internal_static_build_bazel_remote_execution_v2_Tree_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return build.bazel.remote.execution.v2.RemoteExecutionProto.internal_static_build_bazel_remote_execution_v2_Tree_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            build.bazel.remote.execution.v2.Tree.class, build.bazel.remote.execution.v2.Tree.Builder.class);
  }

  private int bitField0_;
  public static final int ROOT_FIELD_NUMBER = 1;
  private build.bazel.remote.execution.v2.Directory root_;
  /**
   * <pre>
   * The root directory in the tree.
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.Directory root = 1;</code>
   */
  public boolean hasRoot() {
    return root_ != null;
  }
  /**
   * <pre>
   * The root directory in the tree.
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.Directory root = 1;</code>
   */
  public build.bazel.remote.execution.v2.Directory getRoot() {
    return root_ == null ? build.bazel.remote.execution.v2.Directory.getDefaultInstance() : root_;
  }
  /**
   * <pre>
   * The root directory in the tree.
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.Directory root = 1;</code>
   */
  public build.bazel.remote.execution.v2.DirectoryOrBuilder getRootOrBuilder() {
    return getRoot();
  }

  public static final int CHILDREN_FIELD_NUMBER = 2;
  private java.util.List<build.bazel.remote.execution.v2.Directory> children_;
  /**
   * <pre>
   * All the child directories: the directories referred to by the root and,
   * recursively, all its children. In order to reconstruct the directory tree,
   * the client must take the digests of each of the child directories and then
   * build up a tree starting from the `root`.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.Directory children = 2;</code>
   */
  public java.util.List<build.bazel.remote.execution.v2.Directory> getChildrenList() {
    return children_;
  }
  /**
   * <pre>
   * All the child directories: the directories referred to by the root and,
   * recursively, all its children. In order to reconstruct the directory tree,
   * the client must take the digests of each of the child directories and then
   * build up a tree starting from the `root`.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.Directory children = 2;</code>
   */
  public java.util.List<? extends build.bazel.remote.execution.v2.DirectoryOrBuilder> 
      getChildrenOrBuilderList() {
    return children_;
  }
  /**
   * <pre>
   * All the child directories: the directories referred to by the root and,
   * recursively, all its children. In order to reconstruct the directory tree,
   * the client must take the digests of each of the child directories and then
   * build up a tree starting from the `root`.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.Directory children = 2;</code>
   */
  public int getChildrenCount() {
    return children_.size();
  }
  /**
   * <pre>
   * All the child directories: the directories referred to by the root and,
   * recursively, all its children. In order to reconstruct the directory tree,
   * the client must take the digests of each of the child directories and then
   * build up a tree starting from the `root`.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.Directory children = 2;</code>
   */
  public build.bazel.remote.execution.v2.Directory getChildren(int index) {
    return children_.get(index);
  }
  /**
   * <pre>
   * All the child directories: the directories referred to by the root and,
   * recursively, all its children. In order to reconstruct the directory tree,
   * the client must take the digests of each of the child directories and then
   * build up a tree starting from the `root`.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.Directory children = 2;</code>
   */
  public build.bazel.remote.execution.v2.DirectoryOrBuilder getChildrenOrBuilder(
      int index) {
    return children_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (root_ != null) {
      output.writeMessage(1, getRoot());
    }
    for (int i = 0; i < children_.size(); i++) {
      output.writeMessage(2, children_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (root_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getRoot());
    }
    for (int i = 0; i < children_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, children_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof build.bazel.remote.execution.v2.Tree)) {
      return super.equals(obj);
    }
    build.bazel.remote.execution.v2.Tree other = (build.bazel.remote.execution.v2.Tree) obj;

    boolean result = true;
    result = result && (hasRoot() == other.hasRoot());
    if (hasRoot()) {
      result = result && getRoot()
          .equals(other.getRoot());
    }
    result = result && getChildrenList()
        .equals(other.getChildrenList());
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasRoot()) {
      hash = (37 * hash) + ROOT_FIELD_NUMBER;
      hash = (53 * hash) + getRoot().hashCode();
    }
    if (getChildrenCount() > 0) {
      hash = (37 * hash) + CHILDREN_FIELD_NUMBER;
      hash = (53 * hash) + getChildrenList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static build.bazel.remote.execution.v2.Tree parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static build.bazel.remote.execution.v2.Tree parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static build.bazel.remote.execution.v2.Tree parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static build.bazel.remote.execution.v2.Tree parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static build.bazel.remote.execution.v2.Tree parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static build.bazel.remote.execution.v2.Tree parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static build.bazel.remote.execution.v2.Tree parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static build.bazel.remote.execution.v2.Tree parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static build.bazel.remote.execution.v2.Tree parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static build.bazel.remote.execution.v2.Tree parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static build.bazel.remote.execution.v2.Tree parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static build.bazel.remote.execution.v2.Tree parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(build.bazel.remote.execution.v2.Tree prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A `Tree` contains all the
   * [Directory][build.bazel.remote.execution.v2.Directory] protos in a
   * single directory Merkle tree, compressed into one message.
   * </pre>
   *
   * Protobuf type {@code build.bazel.remote.execution.v2.Tree}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:build.bazel.remote.execution.v2.Tree)
      build.bazel.remote.execution.v2.TreeOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return build.bazel.remote.execution.v2.RemoteExecutionProto.internal_static_build_bazel_remote_execution_v2_Tree_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return build.bazel.remote.execution.v2.RemoteExecutionProto.internal_static_build_bazel_remote_execution_v2_Tree_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              build.bazel.remote.execution.v2.Tree.class, build.bazel.remote.execution.v2.Tree.Builder.class);
    }

    // Construct using build.bazel.remote.execution.v2.Tree.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getChildrenFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (rootBuilder_ == null) {
        root_ = null;
      } else {
        root_ = null;
        rootBuilder_ = null;
      }
      if (childrenBuilder_ == null) {
        children_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        childrenBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return build.bazel.remote.execution.v2.RemoteExecutionProto.internal_static_build_bazel_remote_execution_v2_Tree_descriptor;
    }

    @java.lang.Override
    public build.bazel.remote.execution.v2.Tree getDefaultInstanceForType() {
      return build.bazel.remote.execution.v2.Tree.getDefaultInstance();
    }

    @java.lang.Override
    public build.bazel.remote.execution.v2.Tree build() {
      build.bazel.remote.execution.v2.Tree result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public build.bazel.remote.execution.v2.Tree buildPartial() {
      build.bazel.remote.execution.v2.Tree result = new build.bazel.remote.execution.v2.Tree(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (rootBuilder_ == null) {
        result.root_ = root_;
      } else {
        result.root_ = rootBuilder_.build();
      }
      if (childrenBuilder_ == null) {
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          children_ = java.util.Collections.unmodifiableList(children_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.children_ = children_;
      } else {
        result.children_ = childrenBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return (Builder) super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof build.bazel.remote.execution.v2.Tree) {
        return mergeFrom((build.bazel.remote.execution.v2.Tree)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(build.bazel.remote.execution.v2.Tree other) {
      if (other == build.bazel.remote.execution.v2.Tree.getDefaultInstance()) return this;
      if (other.hasRoot()) {
        mergeRoot(other.getRoot());
      }
      if (childrenBuilder_ == null) {
        if (!other.children_.isEmpty()) {
          if (children_.isEmpty()) {
            children_ = other.children_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureChildrenIsMutable();
            children_.addAll(other.children_);
          }
          onChanged();
        }
      } else {
        if (!other.children_.isEmpty()) {
          if (childrenBuilder_.isEmpty()) {
            childrenBuilder_.dispose();
            childrenBuilder_ = null;
            children_ = other.children_;
            bitField0_ = (bitField0_ & ~0x00000002);
            childrenBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getChildrenFieldBuilder() : null;
          } else {
            childrenBuilder_.addAllMessages(other.children_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      build.bazel.remote.execution.v2.Tree parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (build.bazel.remote.execution.v2.Tree) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private build.bazel.remote.execution.v2.Directory root_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        build.bazel.remote.execution.v2.Directory, build.bazel.remote.execution.v2.Directory.Builder, build.bazel.remote.execution.v2.DirectoryOrBuilder> rootBuilder_;
    /**
     * <pre>
     * The root directory in the tree.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Directory root = 1;</code>
     */
    public boolean hasRoot() {
      return rootBuilder_ != null || root_ != null;
    }
    /**
     * <pre>
     * The root directory in the tree.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Directory root = 1;</code>
     */
    public build.bazel.remote.execution.v2.Directory getRoot() {
      if (rootBuilder_ == null) {
        return root_ == null ? build.bazel.remote.execution.v2.Directory.getDefaultInstance() : root_;
      } else {
        return rootBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The root directory in the tree.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Directory root = 1;</code>
     */
    public Builder setRoot(build.bazel.remote.execution.v2.Directory value) {
      if (rootBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        root_ = value;
        onChanged();
      } else {
        rootBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The root directory in the tree.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Directory root = 1;</code>
     */
    public Builder setRoot(
        build.bazel.remote.execution.v2.Directory.Builder builderForValue) {
      if (rootBuilder_ == null) {
        root_ = builderForValue.build();
        onChanged();
      } else {
        rootBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The root directory in the tree.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Directory root = 1;</code>
     */
    public Builder mergeRoot(build.bazel.remote.execution.v2.Directory value) {
      if (rootBuilder_ == null) {
        if (root_ != null) {
          root_ =
            build.bazel.remote.execution.v2.Directory.newBuilder(root_).mergeFrom(value).buildPartial();
        } else {
          root_ = value;
        }
        onChanged();
      } else {
        rootBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The root directory in the tree.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Directory root = 1;</code>
     */
    public Builder clearRoot() {
      if (rootBuilder_ == null) {
        root_ = null;
        onChanged();
      } else {
        root_ = null;
        rootBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The root directory in the tree.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Directory root = 1;</code>
     */
    public build.bazel.remote.execution.v2.Directory.Builder getRootBuilder() {
      
      onChanged();
      return getRootFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The root directory in the tree.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Directory root = 1;</code>
     */
    public build.bazel.remote.execution.v2.DirectoryOrBuilder getRootOrBuilder() {
      if (rootBuilder_ != null) {
        return rootBuilder_.getMessageOrBuilder();
      } else {
        return root_ == null ?
            build.bazel.remote.execution.v2.Directory.getDefaultInstance() : root_;
      }
    }
    /**
     * <pre>
     * The root directory in the tree.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Directory root = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        build.bazel.remote.execution.v2.Directory, build.bazel.remote.execution.v2.Directory.Builder, build.bazel.remote.execution.v2.DirectoryOrBuilder> 
        getRootFieldBuilder() {
      if (rootBuilder_ == null) {
        rootBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            build.bazel.remote.execution.v2.Directory, build.bazel.remote.execution.v2.Directory.Builder, build.bazel.remote.execution.v2.DirectoryOrBuilder>(
                getRoot(),
                getParentForChildren(),
                isClean());
        root_ = null;
      }
      return rootBuilder_;
    }

    private java.util.List<build.bazel.remote.execution.v2.Directory> children_ =
      java.util.Collections.emptyList();
    private void ensureChildrenIsMutable() {
      if (!((bitField0_ & 0x00000002) == 0x00000002)) {
        children_ = new java.util.ArrayList<build.bazel.remote.execution.v2.Directory>(children_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        build.bazel.remote.execution.v2.Directory, build.bazel.remote.execution.v2.Directory.Builder, build.bazel.remote.execution.v2.DirectoryOrBuilder> childrenBuilder_;

    /**
     * <pre>
     * All the child directories: the directories referred to by the root and,
     * recursively, all its children. In order to reconstruct the directory tree,
     * the client must take the digests of each of the child directories and then
     * build up a tree starting from the `root`.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Directory children = 2;</code>
     */
    public java.util.List<build.bazel.remote.execution.v2.Directory> getChildrenList() {
      if (childrenBuilder_ == null) {
        return java.util.Collections.unmodifiableList(children_);
      } else {
        return childrenBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * All the child directories: the directories referred to by the root and,
     * recursively, all its children. In order to reconstruct the directory tree,
     * the client must take the digests of each of the child directories and then
     * build up a tree starting from the `root`.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Directory children = 2;</code>
     */
    public int getChildrenCount() {
      if (childrenBuilder_ == null) {
        return children_.size();
      } else {
        return childrenBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * All the child directories: the directories referred to by the root and,
     * recursively, all its children. In order to reconstruct the directory tree,
     * the client must take the digests of each of the child directories and then
     * build up a tree starting from the `root`.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Directory children = 2;</code>
     */
    public build.bazel.remote.execution.v2.Directory getChildren(int index) {
      if (childrenBuilder_ == null) {
        return children_.get(index);
      } else {
        return childrenBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * All the child directories: the directories referred to by the root and,
     * recursively, all its children. In order to reconstruct the directory tree,
     * the client must take the digests of each of the child directories and then
     * build up a tree starting from the `root`.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Directory children = 2;</code>
     */
    public Builder setChildren(
        int index, build.bazel.remote.execution.v2.Directory value) {
      if (childrenBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureChildrenIsMutable();
        children_.set(index, value);
        onChanged();
      } else {
        childrenBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * All the child directories: the directories referred to by the root and,
     * recursively, all its children. In order to reconstruct the directory tree,
     * the client must take the digests of each of the child directories and then
     * build up a tree starting from the `root`.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Directory children = 2;</code>
     */
    public Builder setChildren(
        int index, build.bazel.remote.execution.v2.Directory.Builder builderForValue) {
      if (childrenBuilder_ == null) {
        ensureChildrenIsMutable();
        children_.set(index, builderForValue.build());
        onChanged();
      } else {
        childrenBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * All the child directories: the directories referred to by the root and,
     * recursively, all its children. In order to reconstruct the directory tree,
     * the client must take the digests of each of the child directories and then
     * build up a tree starting from the `root`.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Directory children = 2;</code>
     */
    public Builder addChildren(build.bazel.remote.execution.v2.Directory value) {
      if (childrenBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureChildrenIsMutable();
        children_.add(value);
        onChanged();
      } else {
        childrenBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * All the child directories: the directories referred to by the root and,
     * recursively, all its children. In order to reconstruct the directory tree,
     * the client must take the digests of each of the child directories and then
     * build up a tree starting from the `root`.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Directory children = 2;</code>
     */
    public Builder addChildren(
        int index, build.bazel.remote.execution.v2.Directory value) {
      if (childrenBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureChildrenIsMutable();
        children_.add(index, value);
        onChanged();
      } else {
        childrenBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * All the child directories: the directories referred to by the root and,
     * recursively, all its children. In order to reconstruct the directory tree,
     * the client must take the digests of each of the child directories and then
     * build up a tree starting from the `root`.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Directory children = 2;</code>
     */
    public Builder addChildren(
        build.bazel.remote.execution.v2.Directory.Builder builderForValue) {
      if (childrenBuilder_ == null) {
        ensureChildrenIsMutable();
        children_.add(builderForValue.build());
        onChanged();
      } else {
        childrenBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * All the child directories: the directories referred to by the root and,
     * recursively, all its children. In order to reconstruct the directory tree,
     * the client must take the digests of each of the child directories and then
     * build up a tree starting from the `root`.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Directory children = 2;</code>
     */
    public Builder addChildren(
        int index, build.bazel.remote.execution.v2.Directory.Builder builderForValue) {
      if (childrenBuilder_ == null) {
        ensureChildrenIsMutable();
        children_.add(index, builderForValue.build());
        onChanged();
      } else {
        childrenBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * All the child directories: the directories referred to by the root and,
     * recursively, all its children. In order to reconstruct the directory tree,
     * the client must take the digests of each of the child directories and then
     * build up a tree starting from the `root`.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Directory children = 2;</code>
     */
    public Builder addAllChildren(
        java.lang.Iterable<? extends build.bazel.remote.execution.v2.Directory> values) {
      if (childrenBuilder_ == null) {
        ensureChildrenIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, children_);
        onChanged();
      } else {
        childrenBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * All the child directories: the directories referred to by the root and,
     * recursively, all its children. In order to reconstruct the directory tree,
     * the client must take the digests of each of the child directories and then
     * build up a tree starting from the `root`.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Directory children = 2;</code>
     */
    public Builder clearChildren() {
      if (childrenBuilder_ == null) {
        children_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        childrenBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * All the child directories: the directories referred to by the root and,
     * recursively, all its children. In order to reconstruct the directory tree,
     * the client must take the digests of each of the child directories and then
     * build up a tree starting from the `root`.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Directory children = 2;</code>
     */
    public Builder removeChildren(int index) {
      if (childrenBuilder_ == null) {
        ensureChildrenIsMutable();
        children_.remove(index);
        onChanged();
      } else {
        childrenBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * All the child directories: the directories referred to by the root and,
     * recursively, all its children. In order to reconstruct the directory tree,
     * the client must take the digests of each of the child directories and then
     * build up a tree starting from the `root`.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Directory children = 2;</code>
     */
    public build.bazel.remote.execution.v2.Directory.Builder getChildrenBuilder(
        int index) {
      return getChildrenFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * All the child directories: the directories referred to by the root and,
     * recursively, all its children. In order to reconstruct the directory tree,
     * the client must take the digests of each of the child directories and then
     * build up a tree starting from the `root`.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Directory children = 2;</code>
     */
    public build.bazel.remote.execution.v2.DirectoryOrBuilder getChildrenOrBuilder(
        int index) {
      if (childrenBuilder_ == null) {
        return children_.get(index);  } else {
        return childrenBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * All the child directories: the directories referred to by the root and,
     * recursively, all its children. In order to reconstruct the directory tree,
     * the client must take the digests of each of the child directories and then
     * build up a tree starting from the `root`.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Directory children = 2;</code>
     */
    public java.util.List<? extends build.bazel.remote.execution.v2.DirectoryOrBuilder> 
         getChildrenOrBuilderList() {
      if (childrenBuilder_ != null) {
        return childrenBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(children_);
      }
    }
    /**
     * <pre>
     * All the child directories: the directories referred to by the root and,
     * recursively, all its children. In order to reconstruct the directory tree,
     * the client must take the digests of each of the child directories and then
     * build up a tree starting from the `root`.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Directory children = 2;</code>
     */
    public build.bazel.remote.execution.v2.Directory.Builder addChildrenBuilder() {
      return getChildrenFieldBuilder().addBuilder(
          build.bazel.remote.execution.v2.Directory.getDefaultInstance());
    }
    /**
     * <pre>
     * All the child directories: the directories referred to by the root and,
     * recursively, all its children. In order to reconstruct the directory tree,
     * the client must take the digests of each of the child directories and then
     * build up a tree starting from the `root`.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Directory children = 2;</code>
     */
    public build.bazel.remote.execution.v2.Directory.Builder addChildrenBuilder(
        int index) {
      return getChildrenFieldBuilder().addBuilder(
          index, build.bazel.remote.execution.v2.Directory.getDefaultInstance());
    }
    /**
     * <pre>
     * All the child directories: the directories referred to by the root and,
     * recursively, all its children. In order to reconstruct the directory tree,
     * the client must take the digests of each of the child directories and then
     * build up a tree starting from the `root`.
     * </pre>
     *
     * <code>repeated .build.bazel.remote.execution.v2.Directory children = 2;</code>
     */
    public java.util.List<build.bazel.remote.execution.v2.Directory.Builder> 
         getChildrenBuilderList() {
      return getChildrenFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        build.bazel.remote.execution.v2.Directory, build.bazel.remote.execution.v2.Directory.Builder, build.bazel.remote.execution.v2.DirectoryOrBuilder> 
        getChildrenFieldBuilder() {
      if (childrenBuilder_ == null) {
        childrenBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            build.bazel.remote.execution.v2.Directory, build.bazel.remote.execution.v2.Directory.Builder, build.bazel.remote.execution.v2.DirectoryOrBuilder>(
                children_,
                ((bitField0_ & 0x00000002) == 0x00000002),
                getParentForChildren(),
                isClean());
        children_ = null;
      }
      return childrenBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:build.bazel.remote.execution.v2.Tree)
  }

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.Tree)
  private static final build.bazel.remote.execution.v2.Tree DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new build.bazel.remote.execution.v2.Tree();
  }

  public static build.bazel.remote.execution.v2.Tree getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Tree>
      PARSER = new com.google.protobuf.AbstractParser<Tree>() {
    @java.lang.Override
    public Tree parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Tree(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Tree> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Tree> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public build.bazel.remote.execution.v2.Tree getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

