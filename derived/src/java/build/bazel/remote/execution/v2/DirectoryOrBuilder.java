// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: build/bazel/remote/execution/v2/remote_execution.proto

package build.bazel.remote.execution.v2;

public interface DirectoryOrBuilder extends
    // @@protoc_insertion_point(interface_extends:build.bazel.remote.execution.v2.Directory)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The files in the directory.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.FileNode files = 1;</code>
   */
  java.util.List<build.bazel.remote.execution.v2.FileNode> 
      getFilesList();
  /**
   * <pre>
   * The files in the directory.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.FileNode files = 1;</code>
   */
  build.bazel.remote.execution.v2.FileNode getFiles(int index);
  /**
   * <pre>
   * The files in the directory.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.FileNode files = 1;</code>
   */
  int getFilesCount();
  /**
   * <pre>
   * The files in the directory.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.FileNode files = 1;</code>
   */
  java.util.List<? extends build.bazel.remote.execution.v2.FileNodeOrBuilder> 
      getFilesOrBuilderList();
  /**
   * <pre>
   * The files in the directory.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.FileNode files = 1;</code>
   */
  build.bazel.remote.execution.v2.FileNodeOrBuilder getFilesOrBuilder(
      int index);

  /**
   * <pre>
   * The subdirectories in the directory.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.DirectoryNode directories = 2;</code>
   */
  java.util.List<build.bazel.remote.execution.v2.DirectoryNode> 
      getDirectoriesList();
  /**
   * <pre>
   * The subdirectories in the directory.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.DirectoryNode directories = 2;</code>
   */
  build.bazel.remote.execution.v2.DirectoryNode getDirectories(int index);
  /**
   * <pre>
   * The subdirectories in the directory.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.DirectoryNode directories = 2;</code>
   */
  int getDirectoriesCount();
  /**
   * <pre>
   * The subdirectories in the directory.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.DirectoryNode directories = 2;</code>
   */
  java.util.List<? extends build.bazel.remote.execution.v2.DirectoryNodeOrBuilder> 
      getDirectoriesOrBuilderList();
  /**
   * <pre>
   * The subdirectories in the directory.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.DirectoryNode directories = 2;</code>
   */
  build.bazel.remote.execution.v2.DirectoryNodeOrBuilder getDirectoriesOrBuilder(
      int index);

  /**
   * <pre>
   * The symlinks in the directory.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.SymlinkNode symlinks = 3;</code>
   */
  java.util.List<build.bazel.remote.execution.v2.SymlinkNode> 
      getSymlinksList();
  /**
   * <pre>
   * The symlinks in the directory.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.SymlinkNode symlinks = 3;</code>
   */
  build.bazel.remote.execution.v2.SymlinkNode getSymlinks(int index);
  /**
   * <pre>
   * The symlinks in the directory.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.SymlinkNode symlinks = 3;</code>
   */
  int getSymlinksCount();
  /**
   * <pre>
   * The symlinks in the directory.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.SymlinkNode symlinks = 3;</code>
   */
  java.util.List<? extends build.bazel.remote.execution.v2.SymlinkNodeOrBuilder> 
      getSymlinksOrBuilderList();
  /**
   * <pre>
   * The symlinks in the directory.
   * </pre>
   *
   * <code>repeated .build.bazel.remote.execution.v2.SymlinkNode symlinks = 3;</code>
   */
  build.bazel.remote.execution.v2.SymlinkNodeOrBuilder getSymlinksOrBuilder(
      int index);
}
