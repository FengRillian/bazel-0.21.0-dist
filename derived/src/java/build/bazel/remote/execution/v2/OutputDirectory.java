// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: build/bazel/remote/execution/v2/remote_execution.proto

package build.bazel.remote.execution.v2;

/**
 * <pre>
 * An `OutputDirectory` is the output in an `ActionResult` corresponding to a
 * directory's full contents rather than a single file.
 * </pre>
 *
 * Protobuf type {@code build.bazel.remote.execution.v2.OutputDirectory}
 */
public  final class OutputDirectory extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:build.bazel.remote.execution.v2.OutputDirectory)
    OutputDirectoryOrBuilder {
private static final long serialVersionUID = 0L;
  // Use OutputDirectory.newBuilder() to construct.
  private OutputDirectory(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private OutputDirectory() {
    path_ = "";
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private OutputDirectory(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            path_ = s;
            break;
          }
          case 26: {
            build.bazel.remote.execution.v2.Digest.Builder subBuilder = null;
            if (treeDigest_ != null) {
              subBuilder = treeDigest_.toBuilder();
            }
            treeDigest_ = input.readMessage(build.bazel.remote.execution.v2.Digest.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(treeDigest_);
              treeDigest_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return build.bazel.remote.execution.v2.RemoteExecutionProto.internal_static_build_bazel_remote_execution_v2_OutputDirectory_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return build.bazel.remote.execution.v2.RemoteExecutionProto.internal_static_build_bazel_remote_execution_v2_OutputDirectory_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            build.bazel.remote.execution.v2.OutputDirectory.class, build.bazel.remote.execution.v2.OutputDirectory.Builder.class);
  }

  public static final int PATH_FIELD_NUMBER = 1;
  private volatile java.lang.Object path_;
  /**
   * <pre>
   * The full path of the directory relative to the working directory. The path
   * separator is a forward slash `/`. Since this is a relative path, it MUST
   * NOT begin with a leading forward slash. The empty string value is allowed,
   * and it denotes the entire working directory.
   * </pre>
   *
   * <code>string path = 1;</code>
   */
  public java.lang.String getPath() {
    java.lang.Object ref = path_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      path_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The full path of the directory relative to the working directory. The path
   * separator is a forward slash `/`. Since this is a relative path, it MUST
   * NOT begin with a leading forward slash. The empty string value is allowed,
   * and it denotes the entire working directory.
   * </pre>
   *
   * <code>string path = 1;</code>
   */
  public com.google.protobuf.ByteString
      getPathBytes() {
    java.lang.Object ref = path_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      path_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TREE_DIGEST_FIELD_NUMBER = 3;
  private build.bazel.remote.execution.v2.Digest treeDigest_;
  /**
   * <pre>
   * The digest of the encoded
   * [Tree][build.bazel.remote.execution.v2.Tree] proto containing the
   * directory's contents.
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.Digest tree_digest = 3;</code>
   */
  public boolean hasTreeDigest() {
    return treeDigest_ != null;
  }
  /**
   * <pre>
   * The digest of the encoded
   * [Tree][build.bazel.remote.execution.v2.Tree] proto containing the
   * directory's contents.
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.Digest tree_digest = 3;</code>
   */
  public build.bazel.remote.execution.v2.Digest getTreeDigest() {
    return treeDigest_ == null ? build.bazel.remote.execution.v2.Digest.getDefaultInstance() : treeDigest_;
  }
  /**
   * <pre>
   * The digest of the encoded
   * [Tree][build.bazel.remote.execution.v2.Tree] proto containing the
   * directory's contents.
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.Digest tree_digest = 3;</code>
   */
  public build.bazel.remote.execution.v2.DigestOrBuilder getTreeDigestOrBuilder() {
    return getTreeDigest();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getPathBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, path_);
    }
    if (treeDigest_ != null) {
      output.writeMessage(3, getTreeDigest());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getPathBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, path_);
    }
    if (treeDigest_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getTreeDigest());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof build.bazel.remote.execution.v2.OutputDirectory)) {
      return super.equals(obj);
    }
    build.bazel.remote.execution.v2.OutputDirectory other = (build.bazel.remote.execution.v2.OutputDirectory) obj;

    boolean result = true;
    result = result && getPath()
        .equals(other.getPath());
    result = result && (hasTreeDigest() == other.hasTreeDigest());
    if (hasTreeDigest()) {
      result = result && getTreeDigest()
          .equals(other.getTreeDigest());
    }
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + PATH_FIELD_NUMBER;
    hash = (53 * hash) + getPath().hashCode();
    if (hasTreeDigest()) {
      hash = (37 * hash) + TREE_DIGEST_FIELD_NUMBER;
      hash = (53 * hash) + getTreeDigest().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static build.bazel.remote.execution.v2.OutputDirectory parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static build.bazel.remote.execution.v2.OutputDirectory parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static build.bazel.remote.execution.v2.OutputDirectory parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static build.bazel.remote.execution.v2.OutputDirectory parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static build.bazel.remote.execution.v2.OutputDirectory parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static build.bazel.remote.execution.v2.OutputDirectory parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static build.bazel.remote.execution.v2.OutputDirectory parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static build.bazel.remote.execution.v2.OutputDirectory parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static build.bazel.remote.execution.v2.OutputDirectory parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static build.bazel.remote.execution.v2.OutputDirectory parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static build.bazel.remote.execution.v2.OutputDirectory parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static build.bazel.remote.execution.v2.OutputDirectory parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(build.bazel.remote.execution.v2.OutputDirectory prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * An `OutputDirectory` is the output in an `ActionResult` corresponding to a
   * directory's full contents rather than a single file.
   * </pre>
   *
   * Protobuf type {@code build.bazel.remote.execution.v2.OutputDirectory}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:build.bazel.remote.execution.v2.OutputDirectory)
      build.bazel.remote.execution.v2.OutputDirectoryOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return build.bazel.remote.execution.v2.RemoteExecutionProto.internal_static_build_bazel_remote_execution_v2_OutputDirectory_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return build.bazel.remote.execution.v2.RemoteExecutionProto.internal_static_build_bazel_remote_execution_v2_OutputDirectory_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              build.bazel.remote.execution.v2.OutputDirectory.class, build.bazel.remote.execution.v2.OutputDirectory.Builder.class);
    }

    // Construct using build.bazel.remote.execution.v2.OutputDirectory.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      path_ = "";

      if (treeDigestBuilder_ == null) {
        treeDigest_ = null;
      } else {
        treeDigest_ = null;
        treeDigestBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return build.bazel.remote.execution.v2.RemoteExecutionProto.internal_static_build_bazel_remote_execution_v2_OutputDirectory_descriptor;
    }

    @java.lang.Override
    public build.bazel.remote.execution.v2.OutputDirectory getDefaultInstanceForType() {
      return build.bazel.remote.execution.v2.OutputDirectory.getDefaultInstance();
    }

    @java.lang.Override
    public build.bazel.remote.execution.v2.OutputDirectory build() {
      build.bazel.remote.execution.v2.OutputDirectory result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public build.bazel.remote.execution.v2.OutputDirectory buildPartial() {
      build.bazel.remote.execution.v2.OutputDirectory result = new build.bazel.remote.execution.v2.OutputDirectory(this);
      result.path_ = path_;
      if (treeDigestBuilder_ == null) {
        result.treeDigest_ = treeDigest_;
      } else {
        result.treeDigest_ = treeDigestBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return (Builder) super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof build.bazel.remote.execution.v2.OutputDirectory) {
        return mergeFrom((build.bazel.remote.execution.v2.OutputDirectory)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(build.bazel.remote.execution.v2.OutputDirectory other) {
      if (other == build.bazel.remote.execution.v2.OutputDirectory.getDefaultInstance()) return this;
      if (!other.getPath().isEmpty()) {
        path_ = other.path_;
        onChanged();
      }
      if (other.hasTreeDigest()) {
        mergeTreeDigest(other.getTreeDigest());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      build.bazel.remote.execution.v2.OutputDirectory parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (build.bazel.remote.execution.v2.OutputDirectory) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private java.lang.Object path_ = "";
    /**
     * <pre>
     * The full path of the directory relative to the working directory. The path
     * separator is a forward slash `/`. Since this is a relative path, it MUST
     * NOT begin with a leading forward slash. The empty string value is allowed,
     * and it denotes the entire working directory.
     * </pre>
     *
     * <code>string path = 1;</code>
     */
    public java.lang.String getPath() {
      java.lang.Object ref = path_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        path_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The full path of the directory relative to the working directory. The path
     * separator is a forward slash `/`. Since this is a relative path, it MUST
     * NOT begin with a leading forward slash. The empty string value is allowed,
     * and it denotes the entire working directory.
     * </pre>
     *
     * <code>string path = 1;</code>
     */
    public com.google.protobuf.ByteString
        getPathBytes() {
      java.lang.Object ref = path_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        path_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The full path of the directory relative to the working directory. The path
     * separator is a forward slash `/`. Since this is a relative path, it MUST
     * NOT begin with a leading forward slash. The empty string value is allowed,
     * and it denotes the entire working directory.
     * </pre>
     *
     * <code>string path = 1;</code>
     */
    public Builder setPath(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      path_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The full path of the directory relative to the working directory. The path
     * separator is a forward slash `/`. Since this is a relative path, it MUST
     * NOT begin with a leading forward slash. The empty string value is allowed,
     * and it denotes the entire working directory.
     * </pre>
     *
     * <code>string path = 1;</code>
     */
    public Builder clearPath() {
      
      path_ = getDefaultInstance().getPath();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The full path of the directory relative to the working directory. The path
     * separator is a forward slash `/`. Since this is a relative path, it MUST
     * NOT begin with a leading forward slash. The empty string value is allowed,
     * and it denotes the entire working directory.
     * </pre>
     *
     * <code>string path = 1;</code>
     */
    public Builder setPathBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      path_ = value;
      onChanged();
      return this;
    }

    private build.bazel.remote.execution.v2.Digest treeDigest_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        build.bazel.remote.execution.v2.Digest, build.bazel.remote.execution.v2.Digest.Builder, build.bazel.remote.execution.v2.DigestOrBuilder> treeDigestBuilder_;
    /**
     * <pre>
     * The digest of the encoded
     * [Tree][build.bazel.remote.execution.v2.Tree] proto containing the
     * directory's contents.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Digest tree_digest = 3;</code>
     */
    public boolean hasTreeDigest() {
      return treeDigestBuilder_ != null || treeDigest_ != null;
    }
    /**
     * <pre>
     * The digest of the encoded
     * [Tree][build.bazel.remote.execution.v2.Tree] proto containing the
     * directory's contents.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Digest tree_digest = 3;</code>
     */
    public build.bazel.remote.execution.v2.Digest getTreeDigest() {
      if (treeDigestBuilder_ == null) {
        return treeDigest_ == null ? build.bazel.remote.execution.v2.Digest.getDefaultInstance() : treeDigest_;
      } else {
        return treeDigestBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The digest of the encoded
     * [Tree][build.bazel.remote.execution.v2.Tree] proto containing the
     * directory's contents.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Digest tree_digest = 3;</code>
     */
    public Builder setTreeDigest(build.bazel.remote.execution.v2.Digest value) {
      if (treeDigestBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        treeDigest_ = value;
        onChanged();
      } else {
        treeDigestBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The digest of the encoded
     * [Tree][build.bazel.remote.execution.v2.Tree] proto containing the
     * directory's contents.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Digest tree_digest = 3;</code>
     */
    public Builder setTreeDigest(
        build.bazel.remote.execution.v2.Digest.Builder builderForValue) {
      if (treeDigestBuilder_ == null) {
        treeDigest_ = builderForValue.build();
        onChanged();
      } else {
        treeDigestBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The digest of the encoded
     * [Tree][build.bazel.remote.execution.v2.Tree] proto containing the
     * directory's contents.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Digest tree_digest = 3;</code>
     */
    public Builder mergeTreeDigest(build.bazel.remote.execution.v2.Digest value) {
      if (treeDigestBuilder_ == null) {
        if (treeDigest_ != null) {
          treeDigest_ =
            build.bazel.remote.execution.v2.Digest.newBuilder(treeDigest_).mergeFrom(value).buildPartial();
        } else {
          treeDigest_ = value;
        }
        onChanged();
      } else {
        treeDigestBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The digest of the encoded
     * [Tree][build.bazel.remote.execution.v2.Tree] proto containing the
     * directory's contents.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Digest tree_digest = 3;</code>
     */
    public Builder clearTreeDigest() {
      if (treeDigestBuilder_ == null) {
        treeDigest_ = null;
        onChanged();
      } else {
        treeDigest_ = null;
        treeDigestBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The digest of the encoded
     * [Tree][build.bazel.remote.execution.v2.Tree] proto containing the
     * directory's contents.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Digest tree_digest = 3;</code>
     */
    public build.bazel.remote.execution.v2.Digest.Builder getTreeDigestBuilder() {
      
      onChanged();
      return getTreeDigestFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The digest of the encoded
     * [Tree][build.bazel.remote.execution.v2.Tree] proto containing the
     * directory's contents.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Digest tree_digest = 3;</code>
     */
    public build.bazel.remote.execution.v2.DigestOrBuilder getTreeDigestOrBuilder() {
      if (treeDigestBuilder_ != null) {
        return treeDigestBuilder_.getMessageOrBuilder();
      } else {
        return treeDigest_ == null ?
            build.bazel.remote.execution.v2.Digest.getDefaultInstance() : treeDigest_;
      }
    }
    /**
     * <pre>
     * The digest of the encoded
     * [Tree][build.bazel.remote.execution.v2.Tree] proto containing the
     * directory's contents.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.Digest tree_digest = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        build.bazel.remote.execution.v2.Digest, build.bazel.remote.execution.v2.Digest.Builder, build.bazel.remote.execution.v2.DigestOrBuilder> 
        getTreeDigestFieldBuilder() {
      if (treeDigestBuilder_ == null) {
        treeDigestBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            build.bazel.remote.execution.v2.Digest, build.bazel.remote.execution.v2.Digest.Builder, build.bazel.remote.execution.v2.DigestOrBuilder>(
                getTreeDigest(),
                getParentForChildren(),
                isClean());
        treeDigest_ = null;
      }
      return treeDigestBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:build.bazel.remote.execution.v2.OutputDirectory)
  }

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.OutputDirectory)
  private static final build.bazel.remote.execution.v2.OutputDirectory DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new build.bazel.remote.execution.v2.OutputDirectory();
  }

  public static build.bazel.remote.execution.v2.OutputDirectory getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<OutputDirectory>
      PARSER = new com.google.protobuf.AbstractParser<OutputDirectory>() {
    @java.lang.Override
    public OutputDirectory parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new OutputDirectory(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<OutputDirectory> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<OutputDirectory> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public build.bazel.remote.execution.v2.OutputDirectory getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

