// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: build/bazel/remote/execution/v2/remote_execution.proto

package build.bazel.remote.execution.v2;

/**
 * <pre>
 * The response message for
 * [Execution.Execute][build.bazel.remote.execution.v2.Execution.Execute],
 * which will be contained in the [response
 * field][google.longrunning.Operation.response] of the
 * [Operation][google.longrunning.Operation].
 * </pre>
 *
 * Protobuf type {@code build.bazel.remote.execution.v2.ExecuteResponse}
 */
public  final class ExecuteResponse extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:build.bazel.remote.execution.v2.ExecuteResponse)
    ExecuteResponseOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ExecuteResponse.newBuilder() to construct.
  private ExecuteResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ExecuteResponse() {
    cachedResult_ = false;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ExecuteResponse(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            build.bazel.remote.execution.v2.ActionResult.Builder subBuilder = null;
            if (result_ != null) {
              subBuilder = result_.toBuilder();
            }
            result_ = input.readMessage(build.bazel.remote.execution.v2.ActionResult.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(result_);
              result_ = subBuilder.buildPartial();
            }

            break;
          }
          case 16: {

            cachedResult_ = input.readBool();
            break;
          }
          case 26: {
            com.google.rpc.Status.Builder subBuilder = null;
            if (status_ != null) {
              subBuilder = status_.toBuilder();
            }
            status_ = input.readMessage(com.google.rpc.Status.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(status_);
              status_ = subBuilder.buildPartial();
            }

            break;
          }
          case 34: {
            if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
              serverLogs_ = com.google.protobuf.MapField.newMapField(
                  ServerLogsDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000008;
            }
            com.google.protobuf.MapEntry<java.lang.String, build.bazel.remote.execution.v2.LogFile>
            serverLogs__ = input.readMessage(
                ServerLogsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            serverLogs_.getMutableMap().put(
                serverLogs__.getKey(), serverLogs__.getValue());
            break;
          }
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return build.bazel.remote.execution.v2.RemoteExecutionProto.internal_static_build_bazel_remote_execution_v2_ExecuteResponse_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 4:
        return internalGetServerLogs();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return build.bazel.remote.execution.v2.RemoteExecutionProto.internal_static_build_bazel_remote_execution_v2_ExecuteResponse_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            build.bazel.remote.execution.v2.ExecuteResponse.class, build.bazel.remote.execution.v2.ExecuteResponse.Builder.class);
  }

  private int bitField0_;
  public static final int RESULT_FIELD_NUMBER = 1;
  private build.bazel.remote.execution.v2.ActionResult result_;
  /**
   * <pre>
   * The result of the action.
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.ActionResult result = 1;</code>
   */
  public boolean hasResult() {
    return result_ != null;
  }
  /**
   * <pre>
   * The result of the action.
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.ActionResult result = 1;</code>
   */
  public build.bazel.remote.execution.v2.ActionResult getResult() {
    return result_ == null ? build.bazel.remote.execution.v2.ActionResult.getDefaultInstance() : result_;
  }
  /**
   * <pre>
   * The result of the action.
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.ActionResult result = 1;</code>
   */
  public build.bazel.remote.execution.v2.ActionResultOrBuilder getResultOrBuilder() {
    return getResult();
  }

  public static final int CACHED_RESULT_FIELD_NUMBER = 2;
  private boolean cachedResult_;
  /**
   * <pre>
   * True if the result was served from cache, false if it was executed.
   * </pre>
   *
   * <code>bool cached_result = 2;</code>
   */
  public boolean getCachedResult() {
    return cachedResult_;
  }

  public static final int STATUS_FIELD_NUMBER = 3;
  private com.google.rpc.Status status_;
  /**
   * <pre>
   * If the status has a code other than `OK`, it indicates that the action did
   * not finish execution. For example, if the operation times out during
   * execution, the status will have a `DEADLINE_EXCEEDED` code. Servers MUST
   * use this field for errors in execution, rather than the error field on the
   * `Operation` object.
   * If the status code is other than `OK`, then the result MUST NOT be cached.
   * For an error status, the `result` field is optional; the server may
   * populate the output-, stdout-, and stderr-related fields if it has any
   * information available, such as the stdout and stderr of a timed-out action.
   * </pre>
   *
   * <code>.google.rpc.Status status = 3;</code>
   */
  public boolean hasStatus() {
    return status_ != null;
  }
  /**
   * <pre>
   * If the status has a code other than `OK`, it indicates that the action did
   * not finish execution. For example, if the operation times out during
   * execution, the status will have a `DEADLINE_EXCEEDED` code. Servers MUST
   * use this field for errors in execution, rather than the error field on the
   * `Operation` object.
   * If the status code is other than `OK`, then the result MUST NOT be cached.
   * For an error status, the `result` field is optional; the server may
   * populate the output-, stdout-, and stderr-related fields if it has any
   * information available, such as the stdout and stderr of a timed-out action.
   * </pre>
   *
   * <code>.google.rpc.Status status = 3;</code>
   */
  public com.google.rpc.Status getStatus() {
    return status_ == null ? com.google.rpc.Status.getDefaultInstance() : status_;
  }
  /**
   * <pre>
   * If the status has a code other than `OK`, it indicates that the action did
   * not finish execution. For example, if the operation times out during
   * execution, the status will have a `DEADLINE_EXCEEDED` code. Servers MUST
   * use this field for errors in execution, rather than the error field on the
   * `Operation` object.
   * If the status code is other than `OK`, then the result MUST NOT be cached.
   * For an error status, the `result` field is optional; the server may
   * populate the output-, stdout-, and stderr-related fields if it has any
   * information available, such as the stdout and stderr of a timed-out action.
   * </pre>
   *
   * <code>.google.rpc.Status status = 3;</code>
   */
  public com.google.rpc.StatusOrBuilder getStatusOrBuilder() {
    return getStatus();
  }

  public static final int SERVER_LOGS_FIELD_NUMBER = 4;
  private static final class ServerLogsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, build.bazel.remote.execution.v2.LogFile> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, build.bazel.remote.execution.v2.LogFile>newDefaultInstance(
                build.bazel.remote.execution.v2.RemoteExecutionProto.internal_static_build_bazel_remote_execution_v2_ExecuteResponse_ServerLogsEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                build.bazel.remote.execution.v2.LogFile.getDefaultInstance());
  }
  private com.google.protobuf.MapField<
      java.lang.String, build.bazel.remote.execution.v2.LogFile> serverLogs_;
  private com.google.protobuf.MapField<java.lang.String, build.bazel.remote.execution.v2.LogFile>
  internalGetServerLogs() {
    if (serverLogs_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          ServerLogsDefaultEntryHolder.defaultEntry);
    }
    return serverLogs_;
  }

  public int getServerLogsCount() {
    return internalGetServerLogs().getMap().size();
  }
  /**
   * <pre>
   * An optional list of additional log outputs the server wishes to provide. A
   * server can use this to return execution-specific logs however it wishes.
   * This is intended primarily to make it easier for users to debug issues that
   * may be outside of the actual job execution, such as by identifying the
   * worker executing the action or by providing logs from the worker's setup
   * phase. The keys SHOULD be human readable so that a client can display them
   * to a user.
   * </pre>
   *
   * <code>map&lt;string, .build.bazel.remote.execution.v2.LogFile&gt; server_logs = 4;</code>
   */

  public boolean containsServerLogs(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    return internalGetServerLogs().getMap().containsKey(key);
  }
  /**
   * Use {@link #getServerLogsMap()} instead.
   */
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, build.bazel.remote.execution.v2.LogFile> getServerLogs() {
    return getServerLogsMap();
  }
  /**
   * <pre>
   * An optional list of additional log outputs the server wishes to provide. A
   * server can use this to return execution-specific logs however it wishes.
   * This is intended primarily to make it easier for users to debug issues that
   * may be outside of the actual job execution, such as by identifying the
   * worker executing the action or by providing logs from the worker's setup
   * phase. The keys SHOULD be human readable so that a client can display them
   * to a user.
   * </pre>
   *
   * <code>map&lt;string, .build.bazel.remote.execution.v2.LogFile&gt; server_logs = 4;</code>
   */

  public java.util.Map<java.lang.String, build.bazel.remote.execution.v2.LogFile> getServerLogsMap() {
    return internalGetServerLogs().getMap();
  }
  /**
   * <pre>
   * An optional list of additional log outputs the server wishes to provide. A
   * server can use this to return execution-specific logs however it wishes.
   * This is intended primarily to make it easier for users to debug issues that
   * may be outside of the actual job execution, such as by identifying the
   * worker executing the action or by providing logs from the worker's setup
   * phase. The keys SHOULD be human readable so that a client can display them
   * to a user.
   * </pre>
   *
   * <code>map&lt;string, .build.bazel.remote.execution.v2.LogFile&gt; server_logs = 4;</code>
   */

  public build.bazel.remote.execution.v2.LogFile getServerLogsOrDefault(
      java.lang.String key,
      build.bazel.remote.execution.v2.LogFile defaultValue) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, build.bazel.remote.execution.v2.LogFile> map =
        internalGetServerLogs().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * An optional list of additional log outputs the server wishes to provide. A
   * server can use this to return execution-specific logs however it wishes.
   * This is intended primarily to make it easier for users to debug issues that
   * may be outside of the actual job execution, such as by identifying the
   * worker executing the action or by providing logs from the worker's setup
   * phase. The keys SHOULD be human readable so that a client can display them
   * to a user.
   * </pre>
   *
   * <code>map&lt;string, .build.bazel.remote.execution.v2.LogFile&gt; server_logs = 4;</code>
   */

  public build.bazel.remote.execution.v2.LogFile getServerLogsOrThrow(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, build.bazel.remote.execution.v2.LogFile> map =
        internalGetServerLogs().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (result_ != null) {
      output.writeMessage(1, getResult());
    }
    if (cachedResult_ != false) {
      output.writeBool(2, cachedResult_);
    }
    if (status_ != null) {
      output.writeMessage(3, getStatus());
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetServerLogs(),
        ServerLogsDefaultEntryHolder.defaultEntry,
        4);
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (result_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getResult());
    }
    if (cachedResult_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(2, cachedResult_);
    }
    if (status_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getStatus());
    }
    for (java.util.Map.Entry<java.lang.String, build.bazel.remote.execution.v2.LogFile> entry
         : internalGetServerLogs().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, build.bazel.remote.execution.v2.LogFile>
      serverLogs__ = ServerLogsDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, serverLogs__);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof build.bazel.remote.execution.v2.ExecuteResponse)) {
      return super.equals(obj);
    }
    build.bazel.remote.execution.v2.ExecuteResponse other = (build.bazel.remote.execution.v2.ExecuteResponse) obj;

    boolean result = true;
    result = result && (hasResult() == other.hasResult());
    if (hasResult()) {
      result = result && getResult()
          .equals(other.getResult());
    }
    result = result && (getCachedResult()
        == other.getCachedResult());
    result = result && (hasStatus() == other.hasStatus());
    if (hasStatus()) {
      result = result && getStatus()
          .equals(other.getStatus());
    }
    result = result && internalGetServerLogs().equals(
        other.internalGetServerLogs());
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasResult()) {
      hash = (37 * hash) + RESULT_FIELD_NUMBER;
      hash = (53 * hash) + getResult().hashCode();
    }
    hash = (37 * hash) + CACHED_RESULT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getCachedResult());
    if (hasStatus()) {
      hash = (37 * hash) + STATUS_FIELD_NUMBER;
      hash = (53 * hash) + getStatus().hashCode();
    }
    if (!internalGetServerLogs().getMap().isEmpty()) {
      hash = (37 * hash) + SERVER_LOGS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetServerLogs().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static build.bazel.remote.execution.v2.ExecuteResponse parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static build.bazel.remote.execution.v2.ExecuteResponse parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static build.bazel.remote.execution.v2.ExecuteResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static build.bazel.remote.execution.v2.ExecuteResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static build.bazel.remote.execution.v2.ExecuteResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static build.bazel.remote.execution.v2.ExecuteResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static build.bazel.remote.execution.v2.ExecuteResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static build.bazel.remote.execution.v2.ExecuteResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static build.bazel.remote.execution.v2.ExecuteResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static build.bazel.remote.execution.v2.ExecuteResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static build.bazel.remote.execution.v2.ExecuteResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static build.bazel.remote.execution.v2.ExecuteResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(build.bazel.remote.execution.v2.ExecuteResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * The response message for
   * [Execution.Execute][build.bazel.remote.execution.v2.Execution.Execute],
   * which will be contained in the [response
   * field][google.longrunning.Operation.response] of the
   * [Operation][google.longrunning.Operation].
   * </pre>
   *
   * Protobuf type {@code build.bazel.remote.execution.v2.ExecuteResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:build.bazel.remote.execution.v2.ExecuteResponse)
      build.bazel.remote.execution.v2.ExecuteResponseOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return build.bazel.remote.execution.v2.RemoteExecutionProto.internal_static_build_bazel_remote_execution_v2_ExecuteResponse_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 4:
          return internalGetServerLogs();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 4:
          return internalGetMutableServerLogs();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return build.bazel.remote.execution.v2.RemoteExecutionProto.internal_static_build_bazel_remote_execution_v2_ExecuteResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              build.bazel.remote.execution.v2.ExecuteResponse.class, build.bazel.remote.execution.v2.ExecuteResponse.Builder.class);
    }

    // Construct using build.bazel.remote.execution.v2.ExecuteResponse.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (resultBuilder_ == null) {
        result_ = null;
      } else {
        result_ = null;
        resultBuilder_ = null;
      }
      cachedResult_ = false;

      if (statusBuilder_ == null) {
        status_ = null;
      } else {
        status_ = null;
        statusBuilder_ = null;
      }
      internalGetMutableServerLogs().clear();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return build.bazel.remote.execution.v2.RemoteExecutionProto.internal_static_build_bazel_remote_execution_v2_ExecuteResponse_descriptor;
    }

    @java.lang.Override
    public build.bazel.remote.execution.v2.ExecuteResponse getDefaultInstanceForType() {
      return build.bazel.remote.execution.v2.ExecuteResponse.getDefaultInstance();
    }

    @java.lang.Override
    public build.bazel.remote.execution.v2.ExecuteResponse build() {
      build.bazel.remote.execution.v2.ExecuteResponse result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public build.bazel.remote.execution.v2.ExecuteResponse buildPartial() {
      build.bazel.remote.execution.v2.ExecuteResponse result = new build.bazel.remote.execution.v2.ExecuteResponse(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (resultBuilder_ == null) {
        result.result_ = result_;
      } else {
        result.result_ = resultBuilder_.build();
      }
      result.cachedResult_ = cachedResult_;
      if (statusBuilder_ == null) {
        result.status_ = status_;
      } else {
        result.status_ = statusBuilder_.build();
      }
      result.serverLogs_ = internalGetServerLogs();
      result.serverLogs_.makeImmutable();
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return (Builder) super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof build.bazel.remote.execution.v2.ExecuteResponse) {
        return mergeFrom((build.bazel.remote.execution.v2.ExecuteResponse)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(build.bazel.remote.execution.v2.ExecuteResponse other) {
      if (other == build.bazel.remote.execution.v2.ExecuteResponse.getDefaultInstance()) return this;
      if (other.hasResult()) {
        mergeResult(other.getResult());
      }
      if (other.getCachedResult() != false) {
        setCachedResult(other.getCachedResult());
      }
      if (other.hasStatus()) {
        mergeStatus(other.getStatus());
      }
      internalGetMutableServerLogs().mergeFrom(
          other.internalGetServerLogs());
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      build.bazel.remote.execution.v2.ExecuteResponse parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (build.bazel.remote.execution.v2.ExecuteResponse) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private build.bazel.remote.execution.v2.ActionResult result_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        build.bazel.remote.execution.v2.ActionResult, build.bazel.remote.execution.v2.ActionResult.Builder, build.bazel.remote.execution.v2.ActionResultOrBuilder> resultBuilder_;
    /**
     * <pre>
     * The result of the action.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.ActionResult result = 1;</code>
     */
    public boolean hasResult() {
      return resultBuilder_ != null || result_ != null;
    }
    /**
     * <pre>
     * The result of the action.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.ActionResult result = 1;</code>
     */
    public build.bazel.remote.execution.v2.ActionResult getResult() {
      if (resultBuilder_ == null) {
        return result_ == null ? build.bazel.remote.execution.v2.ActionResult.getDefaultInstance() : result_;
      } else {
        return resultBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The result of the action.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.ActionResult result = 1;</code>
     */
    public Builder setResult(build.bazel.remote.execution.v2.ActionResult value) {
      if (resultBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        result_ = value;
        onChanged();
      } else {
        resultBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The result of the action.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.ActionResult result = 1;</code>
     */
    public Builder setResult(
        build.bazel.remote.execution.v2.ActionResult.Builder builderForValue) {
      if (resultBuilder_ == null) {
        result_ = builderForValue.build();
        onChanged();
      } else {
        resultBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The result of the action.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.ActionResult result = 1;</code>
     */
    public Builder mergeResult(build.bazel.remote.execution.v2.ActionResult value) {
      if (resultBuilder_ == null) {
        if (result_ != null) {
          result_ =
            build.bazel.remote.execution.v2.ActionResult.newBuilder(result_).mergeFrom(value).buildPartial();
        } else {
          result_ = value;
        }
        onChanged();
      } else {
        resultBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The result of the action.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.ActionResult result = 1;</code>
     */
    public Builder clearResult() {
      if (resultBuilder_ == null) {
        result_ = null;
        onChanged();
      } else {
        result_ = null;
        resultBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The result of the action.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.ActionResult result = 1;</code>
     */
    public build.bazel.remote.execution.v2.ActionResult.Builder getResultBuilder() {
      
      onChanged();
      return getResultFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The result of the action.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.ActionResult result = 1;</code>
     */
    public build.bazel.remote.execution.v2.ActionResultOrBuilder getResultOrBuilder() {
      if (resultBuilder_ != null) {
        return resultBuilder_.getMessageOrBuilder();
      } else {
        return result_ == null ?
            build.bazel.remote.execution.v2.ActionResult.getDefaultInstance() : result_;
      }
    }
    /**
     * <pre>
     * The result of the action.
     * </pre>
     *
     * <code>.build.bazel.remote.execution.v2.ActionResult result = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        build.bazel.remote.execution.v2.ActionResult, build.bazel.remote.execution.v2.ActionResult.Builder, build.bazel.remote.execution.v2.ActionResultOrBuilder> 
        getResultFieldBuilder() {
      if (resultBuilder_ == null) {
        resultBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            build.bazel.remote.execution.v2.ActionResult, build.bazel.remote.execution.v2.ActionResult.Builder, build.bazel.remote.execution.v2.ActionResultOrBuilder>(
                getResult(),
                getParentForChildren(),
                isClean());
        result_ = null;
      }
      return resultBuilder_;
    }

    private boolean cachedResult_ ;
    /**
     * <pre>
     * True if the result was served from cache, false if it was executed.
     * </pre>
     *
     * <code>bool cached_result = 2;</code>
     */
    public boolean getCachedResult() {
      return cachedResult_;
    }
    /**
     * <pre>
     * True if the result was served from cache, false if it was executed.
     * </pre>
     *
     * <code>bool cached_result = 2;</code>
     */
    public Builder setCachedResult(boolean value) {
      
      cachedResult_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * True if the result was served from cache, false if it was executed.
     * </pre>
     *
     * <code>bool cached_result = 2;</code>
     */
    public Builder clearCachedResult() {
      
      cachedResult_ = false;
      onChanged();
      return this;
    }

    private com.google.rpc.Status status_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.rpc.Status, com.google.rpc.Status.Builder, com.google.rpc.StatusOrBuilder> statusBuilder_;
    /**
     * <pre>
     * If the status has a code other than `OK`, it indicates that the action did
     * not finish execution. For example, if the operation times out during
     * execution, the status will have a `DEADLINE_EXCEEDED` code. Servers MUST
     * use this field for errors in execution, rather than the error field on the
     * `Operation` object.
     * If the status code is other than `OK`, then the result MUST NOT be cached.
     * For an error status, the `result` field is optional; the server may
     * populate the output-, stdout-, and stderr-related fields if it has any
     * information available, such as the stdout and stderr of a timed-out action.
     * </pre>
     *
     * <code>.google.rpc.Status status = 3;</code>
     */
    public boolean hasStatus() {
      return statusBuilder_ != null || status_ != null;
    }
    /**
     * <pre>
     * If the status has a code other than `OK`, it indicates that the action did
     * not finish execution. For example, if the operation times out during
     * execution, the status will have a `DEADLINE_EXCEEDED` code. Servers MUST
     * use this field for errors in execution, rather than the error field on the
     * `Operation` object.
     * If the status code is other than `OK`, then the result MUST NOT be cached.
     * For an error status, the `result` field is optional; the server may
     * populate the output-, stdout-, and stderr-related fields if it has any
     * information available, such as the stdout and stderr of a timed-out action.
     * </pre>
     *
     * <code>.google.rpc.Status status = 3;</code>
     */
    public com.google.rpc.Status getStatus() {
      if (statusBuilder_ == null) {
        return status_ == null ? com.google.rpc.Status.getDefaultInstance() : status_;
      } else {
        return statusBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * If the status has a code other than `OK`, it indicates that the action did
     * not finish execution. For example, if the operation times out during
     * execution, the status will have a `DEADLINE_EXCEEDED` code. Servers MUST
     * use this field for errors in execution, rather than the error field on the
     * `Operation` object.
     * If the status code is other than `OK`, then the result MUST NOT be cached.
     * For an error status, the `result` field is optional; the server may
     * populate the output-, stdout-, and stderr-related fields if it has any
     * information available, such as the stdout and stderr of a timed-out action.
     * </pre>
     *
     * <code>.google.rpc.Status status = 3;</code>
     */
    public Builder setStatus(com.google.rpc.Status value) {
      if (statusBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        status_ = value;
        onChanged();
      } else {
        statusBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * If the status has a code other than `OK`, it indicates that the action did
     * not finish execution. For example, if the operation times out during
     * execution, the status will have a `DEADLINE_EXCEEDED` code. Servers MUST
     * use this field for errors in execution, rather than the error field on the
     * `Operation` object.
     * If the status code is other than `OK`, then the result MUST NOT be cached.
     * For an error status, the `result` field is optional; the server may
     * populate the output-, stdout-, and stderr-related fields if it has any
     * information available, such as the stdout and stderr of a timed-out action.
     * </pre>
     *
     * <code>.google.rpc.Status status = 3;</code>
     */
    public Builder setStatus(
        com.google.rpc.Status.Builder builderForValue) {
      if (statusBuilder_ == null) {
        status_ = builderForValue.build();
        onChanged();
      } else {
        statusBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * If the status has a code other than `OK`, it indicates that the action did
     * not finish execution. For example, if the operation times out during
     * execution, the status will have a `DEADLINE_EXCEEDED` code. Servers MUST
     * use this field for errors in execution, rather than the error field on the
     * `Operation` object.
     * If the status code is other than `OK`, then the result MUST NOT be cached.
     * For an error status, the `result` field is optional; the server may
     * populate the output-, stdout-, and stderr-related fields if it has any
     * information available, such as the stdout and stderr of a timed-out action.
     * </pre>
     *
     * <code>.google.rpc.Status status = 3;</code>
     */
    public Builder mergeStatus(com.google.rpc.Status value) {
      if (statusBuilder_ == null) {
        if (status_ != null) {
          status_ =
            com.google.rpc.Status.newBuilder(status_).mergeFrom(value).buildPartial();
        } else {
          status_ = value;
        }
        onChanged();
      } else {
        statusBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * If the status has a code other than `OK`, it indicates that the action did
     * not finish execution. For example, if the operation times out during
     * execution, the status will have a `DEADLINE_EXCEEDED` code. Servers MUST
     * use this field for errors in execution, rather than the error field on the
     * `Operation` object.
     * If the status code is other than `OK`, then the result MUST NOT be cached.
     * For an error status, the `result` field is optional; the server may
     * populate the output-, stdout-, and stderr-related fields if it has any
     * information available, such as the stdout and stderr of a timed-out action.
     * </pre>
     *
     * <code>.google.rpc.Status status = 3;</code>
     */
    public Builder clearStatus() {
      if (statusBuilder_ == null) {
        status_ = null;
        onChanged();
      } else {
        status_ = null;
        statusBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * If the status has a code other than `OK`, it indicates that the action did
     * not finish execution. For example, if the operation times out during
     * execution, the status will have a `DEADLINE_EXCEEDED` code. Servers MUST
     * use this field for errors in execution, rather than the error field on the
     * `Operation` object.
     * If the status code is other than `OK`, then the result MUST NOT be cached.
     * For an error status, the `result` field is optional; the server may
     * populate the output-, stdout-, and stderr-related fields if it has any
     * information available, such as the stdout and stderr of a timed-out action.
     * </pre>
     *
     * <code>.google.rpc.Status status = 3;</code>
     */
    public com.google.rpc.Status.Builder getStatusBuilder() {
      
      onChanged();
      return getStatusFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * If the status has a code other than `OK`, it indicates that the action did
     * not finish execution. For example, if the operation times out during
     * execution, the status will have a `DEADLINE_EXCEEDED` code. Servers MUST
     * use this field for errors in execution, rather than the error field on the
     * `Operation` object.
     * If the status code is other than `OK`, then the result MUST NOT be cached.
     * For an error status, the `result` field is optional; the server may
     * populate the output-, stdout-, and stderr-related fields if it has any
     * information available, such as the stdout and stderr of a timed-out action.
     * </pre>
     *
     * <code>.google.rpc.Status status = 3;</code>
     */
    public com.google.rpc.StatusOrBuilder getStatusOrBuilder() {
      if (statusBuilder_ != null) {
        return statusBuilder_.getMessageOrBuilder();
      } else {
        return status_ == null ?
            com.google.rpc.Status.getDefaultInstance() : status_;
      }
    }
    /**
     * <pre>
     * If the status has a code other than `OK`, it indicates that the action did
     * not finish execution. For example, if the operation times out during
     * execution, the status will have a `DEADLINE_EXCEEDED` code. Servers MUST
     * use this field for errors in execution, rather than the error field on the
     * `Operation` object.
     * If the status code is other than `OK`, then the result MUST NOT be cached.
     * For an error status, the `result` field is optional; the server may
     * populate the output-, stdout-, and stderr-related fields if it has any
     * information available, such as the stdout and stderr of a timed-out action.
     * </pre>
     *
     * <code>.google.rpc.Status status = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.rpc.Status, com.google.rpc.Status.Builder, com.google.rpc.StatusOrBuilder> 
        getStatusFieldBuilder() {
      if (statusBuilder_ == null) {
        statusBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.rpc.Status, com.google.rpc.Status.Builder, com.google.rpc.StatusOrBuilder>(
                getStatus(),
                getParentForChildren(),
                isClean());
        status_ = null;
      }
      return statusBuilder_;
    }

    private com.google.protobuf.MapField<
        java.lang.String, build.bazel.remote.execution.v2.LogFile> serverLogs_;
    private com.google.protobuf.MapField<java.lang.String, build.bazel.remote.execution.v2.LogFile>
    internalGetServerLogs() {
      if (serverLogs_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            ServerLogsDefaultEntryHolder.defaultEntry);
      }
      return serverLogs_;
    }
    private com.google.protobuf.MapField<java.lang.String, build.bazel.remote.execution.v2.LogFile>
    internalGetMutableServerLogs() {
      onChanged();;
      if (serverLogs_ == null) {
        serverLogs_ = com.google.protobuf.MapField.newMapField(
            ServerLogsDefaultEntryHolder.defaultEntry);
      }
      if (!serverLogs_.isMutable()) {
        serverLogs_ = serverLogs_.copy();
      }
      return serverLogs_;
    }

    public int getServerLogsCount() {
      return internalGetServerLogs().getMap().size();
    }
    /**
     * <pre>
     * An optional list of additional log outputs the server wishes to provide. A
     * server can use this to return execution-specific logs however it wishes.
     * This is intended primarily to make it easier for users to debug issues that
     * may be outside of the actual job execution, such as by identifying the
     * worker executing the action or by providing logs from the worker's setup
     * phase. The keys SHOULD be human readable so that a client can display them
     * to a user.
     * </pre>
     *
     * <code>map&lt;string, .build.bazel.remote.execution.v2.LogFile&gt; server_logs = 4;</code>
     */

    public boolean containsServerLogs(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetServerLogs().getMap().containsKey(key);
    }
    /**
     * Use {@link #getServerLogsMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, build.bazel.remote.execution.v2.LogFile> getServerLogs() {
      return getServerLogsMap();
    }
    /**
     * <pre>
     * An optional list of additional log outputs the server wishes to provide. A
     * server can use this to return execution-specific logs however it wishes.
     * This is intended primarily to make it easier for users to debug issues that
     * may be outside of the actual job execution, such as by identifying the
     * worker executing the action or by providing logs from the worker's setup
     * phase. The keys SHOULD be human readable so that a client can display them
     * to a user.
     * </pre>
     *
     * <code>map&lt;string, .build.bazel.remote.execution.v2.LogFile&gt; server_logs = 4;</code>
     */

    public java.util.Map<java.lang.String, build.bazel.remote.execution.v2.LogFile> getServerLogsMap() {
      return internalGetServerLogs().getMap();
    }
    /**
     * <pre>
     * An optional list of additional log outputs the server wishes to provide. A
     * server can use this to return execution-specific logs however it wishes.
     * This is intended primarily to make it easier for users to debug issues that
     * may be outside of the actual job execution, such as by identifying the
     * worker executing the action or by providing logs from the worker's setup
     * phase. The keys SHOULD be human readable so that a client can display them
     * to a user.
     * </pre>
     *
     * <code>map&lt;string, .build.bazel.remote.execution.v2.LogFile&gt; server_logs = 4;</code>
     */

    public build.bazel.remote.execution.v2.LogFile getServerLogsOrDefault(
        java.lang.String key,
        build.bazel.remote.execution.v2.LogFile defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, build.bazel.remote.execution.v2.LogFile> map =
          internalGetServerLogs().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * An optional list of additional log outputs the server wishes to provide. A
     * server can use this to return execution-specific logs however it wishes.
     * This is intended primarily to make it easier for users to debug issues that
     * may be outside of the actual job execution, such as by identifying the
     * worker executing the action or by providing logs from the worker's setup
     * phase. The keys SHOULD be human readable so that a client can display them
     * to a user.
     * </pre>
     *
     * <code>map&lt;string, .build.bazel.remote.execution.v2.LogFile&gt; server_logs = 4;</code>
     */

    public build.bazel.remote.execution.v2.LogFile getServerLogsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, build.bazel.remote.execution.v2.LogFile> map =
          internalGetServerLogs().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearServerLogs() {
      internalGetMutableServerLogs().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * An optional list of additional log outputs the server wishes to provide. A
     * server can use this to return execution-specific logs however it wishes.
     * This is intended primarily to make it easier for users to debug issues that
     * may be outside of the actual job execution, such as by identifying the
     * worker executing the action or by providing logs from the worker's setup
     * phase. The keys SHOULD be human readable so that a client can display them
     * to a user.
     * </pre>
     *
     * <code>map&lt;string, .build.bazel.remote.execution.v2.LogFile&gt; server_logs = 4;</code>
     */

    public Builder removeServerLogs(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableServerLogs().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, build.bazel.remote.execution.v2.LogFile>
    getMutableServerLogs() {
      return internalGetMutableServerLogs().getMutableMap();
    }
    /**
     * <pre>
     * An optional list of additional log outputs the server wishes to provide. A
     * server can use this to return execution-specific logs however it wishes.
     * This is intended primarily to make it easier for users to debug issues that
     * may be outside of the actual job execution, such as by identifying the
     * worker executing the action or by providing logs from the worker's setup
     * phase. The keys SHOULD be human readable so that a client can display them
     * to a user.
     * </pre>
     *
     * <code>map&lt;string, .build.bazel.remote.execution.v2.LogFile&gt; server_logs = 4;</code>
     */
    public Builder putServerLogs(
        java.lang.String key,
        build.bazel.remote.execution.v2.LogFile value) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      if (value == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableServerLogs().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <pre>
     * An optional list of additional log outputs the server wishes to provide. A
     * server can use this to return execution-specific logs however it wishes.
     * This is intended primarily to make it easier for users to debug issues that
     * may be outside of the actual job execution, such as by identifying the
     * worker executing the action or by providing logs from the worker's setup
     * phase. The keys SHOULD be human readable so that a client can display them
     * to a user.
     * </pre>
     *
     * <code>map&lt;string, .build.bazel.remote.execution.v2.LogFile&gt; server_logs = 4;</code>
     */

    public Builder putAllServerLogs(
        java.util.Map<java.lang.String, build.bazel.remote.execution.v2.LogFile> values) {
      internalGetMutableServerLogs().getMutableMap()
          .putAll(values);
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:build.bazel.remote.execution.v2.ExecuteResponse)
  }

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.ExecuteResponse)
  private static final build.bazel.remote.execution.v2.ExecuteResponse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new build.bazel.remote.execution.v2.ExecuteResponse();
  }

  public static build.bazel.remote.execution.v2.ExecuteResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ExecuteResponse>
      PARSER = new com.google.protobuf.AbstractParser<ExecuteResponse>() {
    @java.lang.Override
    public ExecuteResponse parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ExecuteResponse(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ExecuteResponse> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ExecuteResponse> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public build.bazel.remote.execution.v2.ExecuteResponse getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

