// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: build/bazel/remote/execution/v2/remote_execution.proto

package build.bazel.remote.execution.v2;

public interface GetTreeRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:build.bazel.remote.execution.v2.GetTreeRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The instance of the execution system to operate against. A server may
   * support multiple instances of the execution system (with their own workers,
   * storage, caches, etc.). The server MAY require use of this field to select
   * between them in an implementation-defined fashion, otherwise it can be
   * omitted.
   * </pre>
   *
   * <code>string instance_name = 1;</code>
   */
  java.lang.String getInstanceName();
  /**
   * <pre>
   * The instance of the execution system to operate against. A server may
   * support multiple instances of the execution system (with their own workers,
   * storage, caches, etc.). The server MAY require use of this field to select
   * between them in an implementation-defined fashion, otherwise it can be
   * omitted.
   * </pre>
   *
   * <code>string instance_name = 1;</code>
   */
  com.google.protobuf.ByteString
      getInstanceNameBytes();

  /**
   * <pre>
   * The digest of the root, which must be an encoded
   * [Directory][build.bazel.remote.execution.v2.Directory] message
   * stored in the
   * [ContentAddressableStorage][build.bazel.remote.execution.v2.ContentAddressableStorage].
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.Digest root_digest = 2;</code>
   */
  boolean hasRootDigest();
  /**
   * <pre>
   * The digest of the root, which must be an encoded
   * [Directory][build.bazel.remote.execution.v2.Directory] message
   * stored in the
   * [ContentAddressableStorage][build.bazel.remote.execution.v2.ContentAddressableStorage].
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.Digest root_digest = 2;</code>
   */
  build.bazel.remote.execution.v2.Digest getRootDigest();
  /**
   * <pre>
   * The digest of the root, which must be an encoded
   * [Directory][build.bazel.remote.execution.v2.Directory] message
   * stored in the
   * [ContentAddressableStorage][build.bazel.remote.execution.v2.ContentAddressableStorage].
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.Digest root_digest = 2;</code>
   */
  build.bazel.remote.execution.v2.DigestOrBuilder getRootDigestOrBuilder();

  /**
   * <pre>
   * A maximum page size to request. If present, the server will request no more
   * than this many items. Regardless of whether a page size is specified, the
   * server may place its own limit on the number of items to be returned and
   * require the client to retrieve more items using a subsequent request.
   * </pre>
   *
   * <code>int32 page_size = 3;</code>
   */
  int getPageSize();

  /**
   * <pre>
   * A page token, which must be a value received in a previous
   * [GetTreeResponse][build.bazel.remote.execution.v2.GetTreeResponse].
   * If present, the server will use it to return the following page of results.
   * </pre>
   *
   * <code>string page_token = 4;</code>
   */
  java.lang.String getPageToken();
  /**
   * <pre>
   * A page token, which must be a value received in a previous
   * [GetTreeResponse][build.bazel.remote.execution.v2.GetTreeResponse].
   * If present, the server will use it to return the following page of results.
   * </pre>
   *
   * <code>string page_token = 4;</code>
   */
  com.google.protobuf.ByteString
      getPageTokenBytes();
}
