// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/main/protobuf/invocation_policy.proto

package com.google.devtools.build.lib.runtime.proto;

public final class InvocationPolicyOuterClass {
  private InvocationPolicyOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface InvocationPolicyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:blaze.invocation_policy.InvocationPolicy)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Order matters.
     * After expanding policies on expansion flags or flags with implicit
     * requirements, only the final policy on a specific flag will be enforced
     * onto the user's command line.
     * </pre>
     *
     * <code>repeated .blaze.invocation_policy.FlagPolicy flag_policies = 1;</code>
     */
    java.util.List<com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy> 
        getFlagPoliciesList();
    /**
     * <pre>
     * Order matters.
     * After expanding policies on expansion flags or flags with implicit
     * requirements, only the final policy on a specific flag will be enforced
     * onto the user's command line.
     * </pre>
     *
     * <code>repeated .blaze.invocation_policy.FlagPolicy flag_policies = 1;</code>
     */
    com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy getFlagPolicies(int index);
    /**
     * <pre>
     * Order matters.
     * After expanding policies on expansion flags or flags with implicit
     * requirements, only the final policy on a specific flag will be enforced
     * onto the user's command line.
     * </pre>
     *
     * <code>repeated .blaze.invocation_policy.FlagPolicy flag_policies = 1;</code>
     */
    int getFlagPoliciesCount();
    /**
     * <pre>
     * Order matters.
     * After expanding policies on expansion flags or flags with implicit
     * requirements, only the final policy on a specific flag will be enforced
     * onto the user's command line.
     * </pre>
     *
     * <code>repeated .blaze.invocation_policy.FlagPolicy flag_policies = 1;</code>
     */
    java.util.List<? extends com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicyOrBuilder> 
        getFlagPoliciesOrBuilderList();
    /**
     * <pre>
     * Order matters.
     * After expanding policies on expansion flags or flags with implicit
     * requirements, only the final policy on a specific flag will be enforced
     * onto the user's command line.
     * </pre>
     *
     * <code>repeated .blaze.invocation_policy.FlagPolicy flag_policies = 1;</code>
     */
    com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicyOrBuilder getFlagPoliciesOrBuilder(
        int index);
  }
  /**
   * <pre>
   * The --invocation_policy flag takes a base64-encoded binary-serialized or text
   * formatted InvocationPolicy message.
   * </pre>
   *
   * Protobuf type {@code blaze.invocation_policy.InvocationPolicy}
   */
  public  static final class InvocationPolicy extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:blaze.invocation_policy.InvocationPolicy)
      InvocationPolicyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use InvocationPolicy.newBuilder() to construct.
    private InvocationPolicy(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private InvocationPolicy() {
      flagPolicies_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private InvocationPolicy(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                flagPolicies_ = new java.util.ArrayList<com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy>();
                mutable_bitField0_ |= 0x00000001;
              }
              flagPolicies_.add(
                  input.readMessage(com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy.PARSER, extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          flagPolicies_ = java.util.Collections.unmodifiableList(flagPolicies_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.internal_static_blaze_invocation_policy_InvocationPolicy_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.internal_static_blaze_invocation_policy_InvocationPolicy_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy.class, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy.Builder.class);
    }

    public static final int FLAG_POLICIES_FIELD_NUMBER = 1;
    private java.util.List<com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy> flagPolicies_;
    /**
     * <pre>
     * Order matters.
     * After expanding policies on expansion flags or flags with implicit
     * requirements, only the final policy on a specific flag will be enforced
     * onto the user's command line.
     * </pre>
     *
     * <code>repeated .blaze.invocation_policy.FlagPolicy flag_policies = 1;</code>
     */
    public java.util.List<com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy> getFlagPoliciesList() {
      return flagPolicies_;
    }
    /**
     * <pre>
     * Order matters.
     * After expanding policies on expansion flags or flags with implicit
     * requirements, only the final policy on a specific flag will be enforced
     * onto the user's command line.
     * </pre>
     *
     * <code>repeated .blaze.invocation_policy.FlagPolicy flag_policies = 1;</code>
     */
    public java.util.List<? extends com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicyOrBuilder> 
        getFlagPoliciesOrBuilderList() {
      return flagPolicies_;
    }
    /**
     * <pre>
     * Order matters.
     * After expanding policies on expansion flags or flags with implicit
     * requirements, only the final policy on a specific flag will be enforced
     * onto the user's command line.
     * </pre>
     *
     * <code>repeated .blaze.invocation_policy.FlagPolicy flag_policies = 1;</code>
     */
    public int getFlagPoliciesCount() {
      return flagPolicies_.size();
    }
    /**
     * <pre>
     * Order matters.
     * After expanding policies on expansion flags or flags with implicit
     * requirements, only the final policy on a specific flag will be enforced
     * onto the user's command line.
     * </pre>
     *
     * <code>repeated .blaze.invocation_policy.FlagPolicy flag_policies = 1;</code>
     */
    public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy getFlagPolicies(int index) {
      return flagPolicies_.get(index);
    }
    /**
     * <pre>
     * Order matters.
     * After expanding policies on expansion flags or flags with implicit
     * requirements, only the final policy on a specific flag will be enforced
     * onto the user's command line.
     * </pre>
     *
     * <code>repeated .blaze.invocation_policy.FlagPolicy flag_policies = 1;</code>
     */
    public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicyOrBuilder getFlagPoliciesOrBuilder(
        int index) {
      return flagPolicies_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < flagPolicies_.size(); i++) {
        output.writeMessage(1, flagPolicies_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < flagPolicies_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, flagPolicies_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy)) {
        return super.equals(obj);
      }
      com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy other = (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy) obj;

      boolean result = true;
      result = result && getFlagPoliciesList()
          .equals(other.getFlagPoliciesList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getFlagPoliciesCount() > 0) {
        hash = (37 * hash) + FLAG_POLICIES_FIELD_NUMBER;
        hash = (53 * hash) + getFlagPoliciesList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * The --invocation_policy flag takes a base64-encoded binary-serialized or text
     * formatted InvocationPolicy message.
     * </pre>
     *
     * Protobuf type {@code blaze.invocation_policy.InvocationPolicy}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:blaze.invocation_policy.InvocationPolicy)
        com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.internal_static_blaze_invocation_policy_InvocationPolicy_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.internal_static_blaze_invocation_policy_InvocationPolicy_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy.class, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy.Builder.class);
      }

      // Construct using com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getFlagPoliciesFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (flagPoliciesBuilder_ == null) {
          flagPolicies_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          flagPoliciesBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.internal_static_blaze_invocation_policy_InvocationPolicy_descriptor;
      }

      @java.lang.Override
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy getDefaultInstanceForType() {
        return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy build() {
        com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy buildPartial() {
        com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy result = new com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy(this);
        int from_bitField0_ = bitField0_;
        if (flagPoliciesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            flagPolicies_ = java.util.Collections.unmodifiableList(flagPolicies_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.flagPolicies_ = flagPolicies_;
        } else {
          result.flagPolicies_ = flagPoliciesBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy) {
          return mergeFrom((com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy other) {
        if (other == com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy.getDefaultInstance()) return this;
        if (flagPoliciesBuilder_ == null) {
          if (!other.flagPolicies_.isEmpty()) {
            if (flagPolicies_.isEmpty()) {
              flagPolicies_ = other.flagPolicies_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureFlagPoliciesIsMutable();
              flagPolicies_.addAll(other.flagPolicies_);
            }
            onChanged();
          }
        } else {
          if (!other.flagPolicies_.isEmpty()) {
            if (flagPoliciesBuilder_.isEmpty()) {
              flagPoliciesBuilder_.dispose();
              flagPoliciesBuilder_ = null;
              flagPolicies_ = other.flagPolicies_;
              bitField0_ = (bitField0_ & ~0x00000001);
              flagPoliciesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getFlagPoliciesFieldBuilder() : null;
            } else {
              flagPoliciesBuilder_.addAllMessages(other.flagPolicies_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy> flagPolicies_ =
        java.util.Collections.emptyList();
      private void ensureFlagPoliciesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          flagPolicies_ = new java.util.ArrayList<com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy>(flagPolicies_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy.Builder, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicyOrBuilder> flagPoliciesBuilder_;

      /**
       * <pre>
       * Order matters.
       * After expanding policies on expansion flags or flags with implicit
       * requirements, only the final policy on a specific flag will be enforced
       * onto the user's command line.
       * </pre>
       *
       * <code>repeated .blaze.invocation_policy.FlagPolicy flag_policies = 1;</code>
       */
      public java.util.List<com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy> getFlagPoliciesList() {
        if (flagPoliciesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(flagPolicies_);
        } else {
          return flagPoliciesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Order matters.
       * After expanding policies on expansion flags or flags with implicit
       * requirements, only the final policy on a specific flag will be enforced
       * onto the user's command line.
       * </pre>
       *
       * <code>repeated .blaze.invocation_policy.FlagPolicy flag_policies = 1;</code>
       */
      public int getFlagPoliciesCount() {
        if (flagPoliciesBuilder_ == null) {
          return flagPolicies_.size();
        } else {
          return flagPoliciesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Order matters.
       * After expanding policies on expansion flags or flags with implicit
       * requirements, only the final policy on a specific flag will be enforced
       * onto the user's command line.
       * </pre>
       *
       * <code>repeated .blaze.invocation_policy.FlagPolicy flag_policies = 1;</code>
       */
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy getFlagPolicies(int index) {
        if (flagPoliciesBuilder_ == null) {
          return flagPolicies_.get(index);
        } else {
          return flagPoliciesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Order matters.
       * After expanding policies on expansion flags or flags with implicit
       * requirements, only the final policy on a specific flag will be enforced
       * onto the user's command line.
       * </pre>
       *
       * <code>repeated .blaze.invocation_policy.FlagPolicy flag_policies = 1;</code>
       */
      public Builder setFlagPolicies(
          int index, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy value) {
        if (flagPoliciesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFlagPoliciesIsMutable();
          flagPolicies_.set(index, value);
          onChanged();
        } else {
          flagPoliciesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Order matters.
       * After expanding policies on expansion flags or flags with implicit
       * requirements, only the final policy on a specific flag will be enforced
       * onto the user's command line.
       * </pre>
       *
       * <code>repeated .blaze.invocation_policy.FlagPolicy flag_policies = 1;</code>
       */
      public Builder setFlagPolicies(
          int index, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy.Builder builderForValue) {
        if (flagPoliciesBuilder_ == null) {
          ensureFlagPoliciesIsMutable();
          flagPolicies_.set(index, builderForValue.build());
          onChanged();
        } else {
          flagPoliciesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Order matters.
       * After expanding policies on expansion flags or flags with implicit
       * requirements, only the final policy on a specific flag will be enforced
       * onto the user's command line.
       * </pre>
       *
       * <code>repeated .blaze.invocation_policy.FlagPolicy flag_policies = 1;</code>
       */
      public Builder addFlagPolicies(com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy value) {
        if (flagPoliciesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFlagPoliciesIsMutable();
          flagPolicies_.add(value);
          onChanged();
        } else {
          flagPoliciesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Order matters.
       * After expanding policies on expansion flags or flags with implicit
       * requirements, only the final policy on a specific flag will be enforced
       * onto the user's command line.
       * </pre>
       *
       * <code>repeated .blaze.invocation_policy.FlagPolicy flag_policies = 1;</code>
       */
      public Builder addFlagPolicies(
          int index, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy value) {
        if (flagPoliciesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFlagPoliciesIsMutable();
          flagPolicies_.add(index, value);
          onChanged();
        } else {
          flagPoliciesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Order matters.
       * After expanding policies on expansion flags or flags with implicit
       * requirements, only the final policy on a specific flag will be enforced
       * onto the user's command line.
       * </pre>
       *
       * <code>repeated .blaze.invocation_policy.FlagPolicy flag_policies = 1;</code>
       */
      public Builder addFlagPolicies(
          com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy.Builder builderForValue) {
        if (flagPoliciesBuilder_ == null) {
          ensureFlagPoliciesIsMutable();
          flagPolicies_.add(builderForValue.build());
          onChanged();
        } else {
          flagPoliciesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Order matters.
       * After expanding policies on expansion flags or flags with implicit
       * requirements, only the final policy on a specific flag will be enforced
       * onto the user's command line.
       * </pre>
       *
       * <code>repeated .blaze.invocation_policy.FlagPolicy flag_policies = 1;</code>
       */
      public Builder addFlagPolicies(
          int index, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy.Builder builderForValue) {
        if (flagPoliciesBuilder_ == null) {
          ensureFlagPoliciesIsMutable();
          flagPolicies_.add(index, builderForValue.build());
          onChanged();
        } else {
          flagPoliciesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Order matters.
       * After expanding policies on expansion flags or flags with implicit
       * requirements, only the final policy on a specific flag will be enforced
       * onto the user's command line.
       * </pre>
       *
       * <code>repeated .blaze.invocation_policy.FlagPolicy flag_policies = 1;</code>
       */
      public Builder addAllFlagPolicies(
          java.lang.Iterable<? extends com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy> values) {
        if (flagPoliciesBuilder_ == null) {
          ensureFlagPoliciesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, flagPolicies_);
          onChanged();
        } else {
          flagPoliciesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Order matters.
       * After expanding policies on expansion flags or flags with implicit
       * requirements, only the final policy on a specific flag will be enforced
       * onto the user's command line.
       * </pre>
       *
       * <code>repeated .blaze.invocation_policy.FlagPolicy flag_policies = 1;</code>
       */
      public Builder clearFlagPolicies() {
        if (flagPoliciesBuilder_ == null) {
          flagPolicies_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          flagPoliciesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Order matters.
       * After expanding policies on expansion flags or flags with implicit
       * requirements, only the final policy on a specific flag will be enforced
       * onto the user's command line.
       * </pre>
       *
       * <code>repeated .blaze.invocation_policy.FlagPolicy flag_policies = 1;</code>
       */
      public Builder removeFlagPolicies(int index) {
        if (flagPoliciesBuilder_ == null) {
          ensureFlagPoliciesIsMutable();
          flagPolicies_.remove(index);
          onChanged();
        } else {
          flagPoliciesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Order matters.
       * After expanding policies on expansion flags or flags with implicit
       * requirements, only the final policy on a specific flag will be enforced
       * onto the user's command line.
       * </pre>
       *
       * <code>repeated .blaze.invocation_policy.FlagPolicy flag_policies = 1;</code>
       */
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy.Builder getFlagPoliciesBuilder(
          int index) {
        return getFlagPoliciesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Order matters.
       * After expanding policies on expansion flags or flags with implicit
       * requirements, only the final policy on a specific flag will be enforced
       * onto the user's command line.
       * </pre>
       *
       * <code>repeated .blaze.invocation_policy.FlagPolicy flag_policies = 1;</code>
       */
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicyOrBuilder getFlagPoliciesOrBuilder(
          int index) {
        if (flagPoliciesBuilder_ == null) {
          return flagPolicies_.get(index);  } else {
          return flagPoliciesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Order matters.
       * After expanding policies on expansion flags or flags with implicit
       * requirements, only the final policy on a specific flag will be enforced
       * onto the user's command line.
       * </pre>
       *
       * <code>repeated .blaze.invocation_policy.FlagPolicy flag_policies = 1;</code>
       */
      public java.util.List<? extends com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicyOrBuilder> 
           getFlagPoliciesOrBuilderList() {
        if (flagPoliciesBuilder_ != null) {
          return flagPoliciesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(flagPolicies_);
        }
      }
      /**
       * <pre>
       * Order matters.
       * After expanding policies on expansion flags or flags with implicit
       * requirements, only the final policy on a specific flag will be enforced
       * onto the user's command line.
       * </pre>
       *
       * <code>repeated .blaze.invocation_policy.FlagPolicy flag_policies = 1;</code>
       */
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy.Builder addFlagPoliciesBuilder() {
        return getFlagPoliciesFieldBuilder().addBuilder(
            com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy.getDefaultInstance());
      }
      /**
       * <pre>
       * Order matters.
       * After expanding policies on expansion flags or flags with implicit
       * requirements, only the final policy on a specific flag will be enforced
       * onto the user's command line.
       * </pre>
       *
       * <code>repeated .blaze.invocation_policy.FlagPolicy flag_policies = 1;</code>
       */
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy.Builder addFlagPoliciesBuilder(
          int index) {
        return getFlagPoliciesFieldBuilder().addBuilder(
            index, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy.getDefaultInstance());
      }
      /**
       * <pre>
       * Order matters.
       * After expanding policies on expansion flags or flags with implicit
       * requirements, only the final policy on a specific flag will be enforced
       * onto the user's command line.
       * </pre>
       *
       * <code>repeated .blaze.invocation_policy.FlagPolicy flag_policies = 1;</code>
       */
      public java.util.List<com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy.Builder> 
           getFlagPoliciesBuilderList() {
        return getFlagPoliciesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy.Builder, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicyOrBuilder> 
          getFlagPoliciesFieldBuilder() {
        if (flagPoliciesBuilder_ == null) {
          flagPoliciesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy.Builder, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicyOrBuilder>(
                  flagPolicies_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          flagPolicies_ = null;
        }
        return flagPoliciesBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:blaze.invocation_policy.InvocationPolicy)
    }

    // @@protoc_insertion_point(class_scope:blaze.invocation_policy.InvocationPolicy)
    private static final com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy();
    }

    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<InvocationPolicy>
        PARSER = new com.google.protobuf.AbstractParser<InvocationPolicy>() {
      @java.lang.Override
      public InvocationPolicy parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new InvocationPolicy(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<InvocationPolicy> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<InvocationPolicy> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FlagPolicyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:blaze.invocation_policy.FlagPolicy)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The name of the flag to enforce this policy on.
     * Note that this should be the full name of the flag, not the abbreviated
     * name of the flag. If the user specifies the abbreviated name of a flag,
     * that flag will be matched using its full name.
     * The "no" prefix will not be parsed, so for boolean flags, use
     * the flag's full name and explicitly set it to true or false.
     * </pre>
     *
     * <code>optional string flag_name = 1;</code>
     */
    boolean hasFlagName();
    /**
     * <pre>
     * The name of the flag to enforce this policy on.
     * Note that this should be the full name of the flag, not the abbreviated
     * name of the flag. If the user specifies the abbreviated name of a flag,
     * that flag will be matched using its full name.
     * The "no" prefix will not be parsed, so for boolean flags, use
     * the flag's full name and explicitly set it to true or false.
     * </pre>
     *
     * <code>optional string flag_name = 1;</code>
     */
    java.lang.String getFlagName();
    /**
     * <pre>
     * The name of the flag to enforce this policy on.
     * Note that this should be the full name of the flag, not the abbreviated
     * name of the flag. If the user specifies the abbreviated name of a flag,
     * that flag will be matched using its full name.
     * The "no" prefix will not be parsed, so for boolean flags, use
     * the flag's full name and explicitly set it to true or false.
     * </pre>
     *
     * <code>optional string flag_name = 1;</code>
     */
    com.google.protobuf.ByteString
        getFlagNameBytes();

    /**
     * <pre>
     * If set, this flag policy is applied only if one of the given commands or a
     * command that inherits from one of the given commands is being run. For
     * instance, if "build" is one of the commands here, then this policy will
     * apply to any command that inherits from build, such as info, coverage, or
     * test. If empty, this flag policy is applied for all commands. This allows
     * the policy setter to add all policies to the proto without having to
     * determine which Bazel command the user is actually running. Additionally,
     * Bazel allows multiple flags to be defined by the same name, and the
     * specific flag definition is determined by the command.
     * </pre>
     *
     * <code>repeated string commands = 2;</code>
     */
    java.util.List<java.lang.String>
        getCommandsList();
    /**
     * <pre>
     * If set, this flag policy is applied only if one of the given commands or a
     * command that inherits from one of the given commands is being run. For
     * instance, if "build" is one of the commands here, then this policy will
     * apply to any command that inherits from build, such as info, coverage, or
     * test. If empty, this flag policy is applied for all commands. This allows
     * the policy setter to add all policies to the proto without having to
     * determine which Bazel command the user is actually running. Additionally,
     * Bazel allows multiple flags to be defined by the same name, and the
     * specific flag definition is determined by the command.
     * </pre>
     *
     * <code>repeated string commands = 2;</code>
     */
    int getCommandsCount();
    /**
     * <pre>
     * If set, this flag policy is applied only if one of the given commands or a
     * command that inherits from one of the given commands is being run. For
     * instance, if "build" is one of the commands here, then this policy will
     * apply to any command that inherits from build, such as info, coverage, or
     * test. If empty, this flag policy is applied for all commands. This allows
     * the policy setter to add all policies to the proto without having to
     * determine which Bazel command the user is actually running. Additionally,
     * Bazel allows multiple flags to be defined by the same name, and the
     * specific flag definition is determined by the command.
     * </pre>
     *
     * <code>repeated string commands = 2;</code>
     */
    java.lang.String getCommands(int index);
    /**
     * <pre>
     * If set, this flag policy is applied only if one of the given commands or a
     * command that inherits from one of the given commands is being run. For
     * instance, if "build" is one of the commands here, then this policy will
     * apply to any command that inherits from build, such as info, coverage, or
     * test. If empty, this flag policy is applied for all commands. This allows
     * the policy setter to add all policies to the proto without having to
     * determine which Bazel command the user is actually running. Additionally,
     * Bazel allows multiple flags to be defined by the same name, and the
     * specific flag definition is determined by the command.
     * </pre>
     *
     * <code>repeated string commands = 2;</code>
     */
    com.google.protobuf.ByteString
        getCommandsBytes(int index);

    /**
     * <code>optional .blaze.invocation_policy.SetValue set_value = 3;</code>
     */
    boolean hasSetValue();
    /**
     * <code>optional .blaze.invocation_policy.SetValue set_value = 3;</code>
     */
    com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue getSetValue();
    /**
     * <code>optional .blaze.invocation_policy.SetValue set_value = 3;</code>
     */
    com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValueOrBuilder getSetValueOrBuilder();

    /**
     * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
     */
    boolean hasUseDefault();
    /**
     * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
     */
    com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault getUseDefault();
    /**
     * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
     */
    com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefaultOrBuilder getUseDefaultOrBuilder();

    /**
     * <code>optional .blaze.invocation_policy.DisallowValues disallow_values = 5;</code>
     */
    boolean hasDisallowValues();
    /**
     * <code>optional .blaze.invocation_policy.DisallowValues disallow_values = 5;</code>
     */
    com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues getDisallowValues();
    /**
     * <code>optional .blaze.invocation_policy.DisallowValues disallow_values = 5;</code>
     */
    com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValuesOrBuilder getDisallowValuesOrBuilder();

    /**
     * <code>optional .blaze.invocation_policy.AllowValues allow_values = 6;</code>
     */
    boolean hasAllowValues();
    /**
     * <code>optional .blaze.invocation_policy.AllowValues allow_values = 6;</code>
     */
    com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues getAllowValues();
    /**
     * <code>optional .blaze.invocation_policy.AllowValues allow_values = 6;</code>
     */
    com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValuesOrBuilder getAllowValuesOrBuilder();

    public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy.OperationCase getOperationCase();
  }
  /**
   * <pre>
   * A policy for controlling the value of a flag.
   * </pre>
   *
   * Protobuf type {@code blaze.invocation_policy.FlagPolicy}
   */
  public  static final class FlagPolicy extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:blaze.invocation_policy.FlagPolicy)
      FlagPolicyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use FlagPolicy.newBuilder() to construct.
    private FlagPolicy(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FlagPolicy() {
      flagName_ = "";
      commands_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private FlagPolicy(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              flagName_ = bs;
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                commands_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000002;
              }
              commands_.add(bs);
              break;
            }
            case 26: {
              com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue.Builder subBuilder = null;
              if (operationCase_ == 3) {
                subBuilder = ((com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue) operation_).toBuilder();
              }
              operation_ =
                  input.readMessage(com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue) operation_);
                operation_ = subBuilder.buildPartial();
              }
              operationCase_ = 3;
              break;
            }
            case 34: {
              com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.Builder subBuilder = null;
              if (operationCase_ == 4) {
                subBuilder = ((com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) operation_).toBuilder();
              }
              operation_ =
                  input.readMessage(com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) operation_);
                operation_ = subBuilder.buildPartial();
              }
              operationCase_ = 4;
              break;
            }
            case 42: {
              com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues.Builder subBuilder = null;
              if (operationCase_ == 5) {
                subBuilder = ((com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues) operation_).toBuilder();
              }
              operation_ =
                  input.readMessage(com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues) operation_);
                operation_ = subBuilder.buildPartial();
              }
              operationCase_ = 5;
              break;
            }
            case 50: {
              com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues.Builder subBuilder = null;
              if (operationCase_ == 6) {
                subBuilder = ((com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues) operation_).toBuilder();
              }
              operation_ =
                  input.readMessage(com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues) operation_);
                operation_ = subBuilder.buildPartial();
              }
              operationCase_ = 6;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          commands_ = commands_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.internal_static_blaze_invocation_policy_FlagPolicy_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.internal_static_blaze_invocation_policy_FlagPolicy_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy.class, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy.Builder.class);
    }

    private int bitField0_;
    private int operationCase_ = 0;
    private java.lang.Object operation_;
    public enum OperationCase
        implements com.google.protobuf.Internal.EnumLite {
      SET_VALUE(3),
      USE_DEFAULT(4),
      DISALLOW_VALUES(5),
      ALLOW_VALUES(6),
      OPERATION_NOT_SET(0);
      private final int value;
      private OperationCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static OperationCase valueOf(int value) {
        return forNumber(value);
      }

      public static OperationCase forNumber(int value) {
        switch (value) {
          case 3: return SET_VALUE;
          case 4: return USE_DEFAULT;
          case 5: return DISALLOW_VALUES;
          case 6: return ALLOW_VALUES;
          case 0: return OPERATION_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public OperationCase
    getOperationCase() {
      return OperationCase.forNumber(
          operationCase_);
    }

    public static final int FLAG_NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object flagName_;
    /**
     * <pre>
     * The name of the flag to enforce this policy on.
     * Note that this should be the full name of the flag, not the abbreviated
     * name of the flag. If the user specifies the abbreviated name of a flag,
     * that flag will be matched using its full name.
     * The "no" prefix will not be parsed, so for boolean flags, use
     * the flag's full name and explicitly set it to true or false.
     * </pre>
     *
     * <code>optional string flag_name = 1;</code>
     */
    public boolean hasFlagName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * The name of the flag to enforce this policy on.
     * Note that this should be the full name of the flag, not the abbreviated
     * name of the flag. If the user specifies the abbreviated name of a flag,
     * that flag will be matched using its full name.
     * The "no" prefix will not be parsed, so for boolean flags, use
     * the flag's full name and explicitly set it to true or false.
     * </pre>
     *
     * <code>optional string flag_name = 1;</code>
     */
    public java.lang.String getFlagName() {
      java.lang.Object ref = flagName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          flagName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * The name of the flag to enforce this policy on.
     * Note that this should be the full name of the flag, not the abbreviated
     * name of the flag. If the user specifies the abbreviated name of a flag,
     * that flag will be matched using its full name.
     * The "no" prefix will not be parsed, so for boolean flags, use
     * the flag's full name and explicitly set it to true or false.
     * </pre>
     *
     * <code>optional string flag_name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getFlagNameBytes() {
      java.lang.Object ref = flagName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        flagName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int COMMANDS_FIELD_NUMBER = 2;
    private com.google.protobuf.LazyStringList commands_;
    /**
     * <pre>
     * If set, this flag policy is applied only if one of the given commands or a
     * command that inherits from one of the given commands is being run. For
     * instance, if "build" is one of the commands here, then this policy will
     * apply to any command that inherits from build, such as info, coverage, or
     * test. If empty, this flag policy is applied for all commands. This allows
     * the policy setter to add all policies to the proto without having to
     * determine which Bazel command the user is actually running. Additionally,
     * Bazel allows multiple flags to be defined by the same name, and the
     * specific flag definition is determined by the command.
     * </pre>
     *
     * <code>repeated string commands = 2;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getCommandsList() {
      return commands_;
    }
    /**
     * <pre>
     * If set, this flag policy is applied only if one of the given commands or a
     * command that inherits from one of the given commands is being run. For
     * instance, if "build" is one of the commands here, then this policy will
     * apply to any command that inherits from build, such as info, coverage, or
     * test. If empty, this flag policy is applied for all commands. This allows
     * the policy setter to add all policies to the proto without having to
     * determine which Bazel command the user is actually running. Additionally,
     * Bazel allows multiple flags to be defined by the same name, and the
     * specific flag definition is determined by the command.
     * </pre>
     *
     * <code>repeated string commands = 2;</code>
     */
    public int getCommandsCount() {
      return commands_.size();
    }
    /**
     * <pre>
     * If set, this flag policy is applied only if one of the given commands or a
     * command that inherits from one of the given commands is being run. For
     * instance, if "build" is one of the commands here, then this policy will
     * apply to any command that inherits from build, such as info, coverage, or
     * test. If empty, this flag policy is applied for all commands. This allows
     * the policy setter to add all policies to the proto without having to
     * determine which Bazel command the user is actually running. Additionally,
     * Bazel allows multiple flags to be defined by the same name, and the
     * specific flag definition is determined by the command.
     * </pre>
     *
     * <code>repeated string commands = 2;</code>
     */
    public java.lang.String getCommands(int index) {
      return commands_.get(index);
    }
    /**
     * <pre>
     * If set, this flag policy is applied only if one of the given commands or a
     * command that inherits from one of the given commands is being run. For
     * instance, if "build" is one of the commands here, then this policy will
     * apply to any command that inherits from build, such as info, coverage, or
     * test. If empty, this flag policy is applied for all commands. This allows
     * the policy setter to add all policies to the proto without having to
     * determine which Bazel command the user is actually running. Additionally,
     * Bazel allows multiple flags to be defined by the same name, and the
     * specific flag definition is determined by the command.
     * </pre>
     *
     * <code>repeated string commands = 2;</code>
     */
    public com.google.protobuf.ByteString
        getCommandsBytes(int index) {
      return commands_.getByteString(index);
    }

    public static final int SET_VALUE_FIELD_NUMBER = 3;
    /**
     * <code>optional .blaze.invocation_policy.SetValue set_value = 3;</code>
     */
    public boolean hasSetValue() {
      return operationCase_ == 3;
    }
    /**
     * <code>optional .blaze.invocation_policy.SetValue set_value = 3;</code>
     */
    public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue getSetValue() {
      if (operationCase_ == 3) {
         return (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue) operation_;
      }
      return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue.getDefaultInstance();
    }
    /**
     * <code>optional .blaze.invocation_policy.SetValue set_value = 3;</code>
     */
    public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValueOrBuilder getSetValueOrBuilder() {
      if (operationCase_ == 3) {
         return (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue) operation_;
      }
      return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue.getDefaultInstance();
    }

    public static final int USE_DEFAULT_FIELD_NUMBER = 4;
    /**
     * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
     */
    public boolean hasUseDefault() {
      return operationCase_ == 4;
    }
    /**
     * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
     */
    public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault getUseDefault() {
      if (operationCase_ == 4) {
         return (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) operation_;
      }
      return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.getDefaultInstance();
    }
    /**
     * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
     */
    public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefaultOrBuilder getUseDefaultOrBuilder() {
      if (operationCase_ == 4) {
         return (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) operation_;
      }
      return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.getDefaultInstance();
    }

    public static final int DISALLOW_VALUES_FIELD_NUMBER = 5;
    /**
     * <code>optional .blaze.invocation_policy.DisallowValues disallow_values = 5;</code>
     */
    public boolean hasDisallowValues() {
      return operationCase_ == 5;
    }
    /**
     * <code>optional .blaze.invocation_policy.DisallowValues disallow_values = 5;</code>
     */
    public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues getDisallowValues() {
      if (operationCase_ == 5) {
         return (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues) operation_;
      }
      return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues.getDefaultInstance();
    }
    /**
     * <code>optional .blaze.invocation_policy.DisallowValues disallow_values = 5;</code>
     */
    public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValuesOrBuilder getDisallowValuesOrBuilder() {
      if (operationCase_ == 5) {
         return (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues) operation_;
      }
      return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues.getDefaultInstance();
    }

    public static final int ALLOW_VALUES_FIELD_NUMBER = 6;
    /**
     * <code>optional .blaze.invocation_policy.AllowValues allow_values = 6;</code>
     */
    public boolean hasAllowValues() {
      return operationCase_ == 6;
    }
    /**
     * <code>optional .blaze.invocation_policy.AllowValues allow_values = 6;</code>
     */
    public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues getAllowValues() {
      if (operationCase_ == 6) {
         return (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues) operation_;
      }
      return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues.getDefaultInstance();
    }
    /**
     * <code>optional .blaze.invocation_policy.AllowValues allow_values = 6;</code>
     */
    public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValuesOrBuilder getAllowValuesOrBuilder() {
      if (operationCase_ == 6) {
         return (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues) operation_;
      }
      return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, flagName_);
      }
      for (int i = 0; i < commands_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, commands_.getRaw(i));
      }
      if (operationCase_ == 3) {
        output.writeMessage(3, (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue) operation_);
      }
      if (operationCase_ == 4) {
        output.writeMessage(4, (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) operation_);
      }
      if (operationCase_ == 5) {
        output.writeMessage(5, (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues) operation_);
      }
      if (operationCase_ == 6) {
        output.writeMessage(6, (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues) operation_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, flagName_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < commands_.size(); i++) {
          dataSize += computeStringSizeNoTag(commands_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getCommandsList().size();
      }
      if (operationCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue) operation_);
      }
      if (operationCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) operation_);
      }
      if (operationCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues) operation_);
      }
      if (operationCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues) operation_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy)) {
        return super.equals(obj);
      }
      com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy other = (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy) obj;

      boolean result = true;
      result = result && (hasFlagName() == other.hasFlagName());
      if (hasFlagName()) {
        result = result && getFlagName()
            .equals(other.getFlagName());
      }
      result = result && getCommandsList()
          .equals(other.getCommandsList());
      result = result && getOperationCase().equals(
          other.getOperationCase());
      if (!result) return false;
      switch (operationCase_) {
        case 3:
          result = result && getSetValue()
              .equals(other.getSetValue());
          break;
        case 4:
          result = result && getUseDefault()
              .equals(other.getUseDefault());
          break;
        case 5:
          result = result && getDisallowValues()
              .equals(other.getDisallowValues());
          break;
        case 6:
          result = result && getAllowValues()
              .equals(other.getAllowValues());
          break;
        case 0:
        default:
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasFlagName()) {
        hash = (37 * hash) + FLAG_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getFlagName().hashCode();
      }
      if (getCommandsCount() > 0) {
        hash = (37 * hash) + COMMANDS_FIELD_NUMBER;
        hash = (53 * hash) + getCommandsList().hashCode();
      }
      switch (operationCase_) {
        case 3:
          hash = (37 * hash) + SET_VALUE_FIELD_NUMBER;
          hash = (53 * hash) + getSetValue().hashCode();
          break;
        case 4:
          hash = (37 * hash) + USE_DEFAULT_FIELD_NUMBER;
          hash = (53 * hash) + getUseDefault().hashCode();
          break;
        case 5:
          hash = (37 * hash) + DISALLOW_VALUES_FIELD_NUMBER;
          hash = (53 * hash) + getDisallowValues().hashCode();
          break;
        case 6:
          hash = (37 * hash) + ALLOW_VALUES_FIELD_NUMBER;
          hash = (53 * hash) + getAllowValues().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A policy for controlling the value of a flag.
     * </pre>
     *
     * Protobuf type {@code blaze.invocation_policy.FlagPolicy}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:blaze.invocation_policy.FlagPolicy)
        com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.internal_static_blaze_invocation_policy_FlagPolicy_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.internal_static_blaze_invocation_policy_FlagPolicy_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy.class, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy.Builder.class);
      }

      // Construct using com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        flagName_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        commands_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        operationCase_ = 0;
        operation_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.internal_static_blaze_invocation_policy_FlagPolicy_descriptor;
      }

      @java.lang.Override
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy getDefaultInstanceForType() {
        return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy build() {
        com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy buildPartial() {
        com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy result = new com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.flagName_ = flagName_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          commands_ = commands_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.commands_ = commands_;
        if (operationCase_ == 3) {
          if (setValueBuilder_ == null) {
            result.operation_ = operation_;
          } else {
            result.operation_ = setValueBuilder_.build();
          }
        }
        if (operationCase_ == 4) {
          if (useDefaultBuilder_ == null) {
            result.operation_ = operation_;
          } else {
            result.operation_ = useDefaultBuilder_.build();
          }
        }
        if (operationCase_ == 5) {
          if (disallowValuesBuilder_ == null) {
            result.operation_ = operation_;
          } else {
            result.operation_ = disallowValuesBuilder_.build();
          }
        }
        if (operationCase_ == 6) {
          if (allowValuesBuilder_ == null) {
            result.operation_ = operation_;
          } else {
            result.operation_ = allowValuesBuilder_.build();
          }
        }
        result.bitField0_ = to_bitField0_;
        result.operationCase_ = operationCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy) {
          return mergeFrom((com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy other) {
        if (other == com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy.getDefaultInstance()) return this;
        if (other.hasFlagName()) {
          bitField0_ |= 0x00000001;
          flagName_ = other.flagName_;
          onChanged();
        }
        if (!other.commands_.isEmpty()) {
          if (commands_.isEmpty()) {
            commands_ = other.commands_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCommandsIsMutable();
            commands_.addAll(other.commands_);
          }
          onChanged();
        }
        switch (other.getOperationCase()) {
          case SET_VALUE: {
            mergeSetValue(other.getSetValue());
            break;
          }
          case USE_DEFAULT: {
            mergeUseDefault(other.getUseDefault());
            break;
          }
          case DISALLOW_VALUES: {
            mergeDisallowValues(other.getDisallowValues());
            break;
          }
          case ALLOW_VALUES: {
            mergeAllowValues(other.getAllowValues());
            break;
          }
          case OPERATION_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int operationCase_ = 0;
      private java.lang.Object operation_;
      public OperationCase
          getOperationCase() {
        return OperationCase.forNumber(
            operationCase_);
      }

      public Builder clearOperation() {
        operationCase_ = 0;
        operation_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private java.lang.Object flagName_ = "";
      /**
       * <pre>
       * The name of the flag to enforce this policy on.
       * Note that this should be the full name of the flag, not the abbreviated
       * name of the flag. If the user specifies the abbreviated name of a flag,
       * that flag will be matched using its full name.
       * The "no" prefix will not be parsed, so for boolean flags, use
       * the flag's full name and explicitly set it to true or false.
       * </pre>
       *
       * <code>optional string flag_name = 1;</code>
       */
      public boolean hasFlagName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * The name of the flag to enforce this policy on.
       * Note that this should be the full name of the flag, not the abbreviated
       * name of the flag. If the user specifies the abbreviated name of a flag,
       * that flag will be matched using its full name.
       * The "no" prefix will not be parsed, so for boolean flags, use
       * the flag's full name and explicitly set it to true or false.
       * </pre>
       *
       * <code>optional string flag_name = 1;</code>
       */
      public java.lang.String getFlagName() {
        java.lang.Object ref = flagName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            flagName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The name of the flag to enforce this policy on.
       * Note that this should be the full name of the flag, not the abbreviated
       * name of the flag. If the user specifies the abbreviated name of a flag,
       * that flag will be matched using its full name.
       * The "no" prefix will not be parsed, so for boolean flags, use
       * the flag's full name and explicitly set it to true or false.
       * </pre>
       *
       * <code>optional string flag_name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getFlagNameBytes() {
        java.lang.Object ref = flagName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          flagName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The name of the flag to enforce this policy on.
       * Note that this should be the full name of the flag, not the abbreviated
       * name of the flag. If the user specifies the abbreviated name of a flag,
       * that flag will be matched using its full name.
       * The "no" prefix will not be parsed, so for boolean flags, use
       * the flag's full name and explicitly set it to true or false.
       * </pre>
       *
       * <code>optional string flag_name = 1;</code>
       */
      public Builder setFlagName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        flagName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the flag to enforce this policy on.
       * Note that this should be the full name of the flag, not the abbreviated
       * name of the flag. If the user specifies the abbreviated name of a flag,
       * that flag will be matched using its full name.
       * The "no" prefix will not be parsed, so for boolean flags, use
       * the flag's full name and explicitly set it to true or false.
       * </pre>
       *
       * <code>optional string flag_name = 1;</code>
       */
      public Builder clearFlagName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        flagName_ = getDefaultInstance().getFlagName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the flag to enforce this policy on.
       * Note that this should be the full name of the flag, not the abbreviated
       * name of the flag. If the user specifies the abbreviated name of a flag,
       * that flag will be matched using its full name.
       * The "no" prefix will not be parsed, so for boolean flags, use
       * the flag's full name and explicitly set it to true or false.
       * </pre>
       *
       * <code>optional string flag_name = 1;</code>
       */
      public Builder setFlagNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        flagName_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList commands_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureCommandsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          commands_ = new com.google.protobuf.LazyStringArrayList(commands_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       * If set, this flag policy is applied only if one of the given commands or a
       * command that inherits from one of the given commands is being run. For
       * instance, if "build" is one of the commands here, then this policy will
       * apply to any command that inherits from build, such as info, coverage, or
       * test. If empty, this flag policy is applied for all commands. This allows
       * the policy setter to add all policies to the proto without having to
       * determine which Bazel command the user is actually running. Additionally,
       * Bazel allows multiple flags to be defined by the same name, and the
       * specific flag definition is determined by the command.
       * </pre>
       *
       * <code>repeated string commands = 2;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getCommandsList() {
        return commands_.getUnmodifiableView();
      }
      /**
       * <pre>
       * If set, this flag policy is applied only if one of the given commands or a
       * command that inherits from one of the given commands is being run. For
       * instance, if "build" is one of the commands here, then this policy will
       * apply to any command that inherits from build, such as info, coverage, or
       * test. If empty, this flag policy is applied for all commands. This allows
       * the policy setter to add all policies to the proto without having to
       * determine which Bazel command the user is actually running. Additionally,
       * Bazel allows multiple flags to be defined by the same name, and the
       * specific flag definition is determined by the command.
       * </pre>
       *
       * <code>repeated string commands = 2;</code>
       */
      public int getCommandsCount() {
        return commands_.size();
      }
      /**
       * <pre>
       * If set, this flag policy is applied only if one of the given commands or a
       * command that inherits from one of the given commands is being run. For
       * instance, if "build" is one of the commands here, then this policy will
       * apply to any command that inherits from build, such as info, coverage, or
       * test. If empty, this flag policy is applied for all commands. This allows
       * the policy setter to add all policies to the proto without having to
       * determine which Bazel command the user is actually running. Additionally,
       * Bazel allows multiple flags to be defined by the same name, and the
       * specific flag definition is determined by the command.
       * </pre>
       *
       * <code>repeated string commands = 2;</code>
       */
      public java.lang.String getCommands(int index) {
        return commands_.get(index);
      }
      /**
       * <pre>
       * If set, this flag policy is applied only if one of the given commands or a
       * command that inherits from one of the given commands is being run. For
       * instance, if "build" is one of the commands here, then this policy will
       * apply to any command that inherits from build, such as info, coverage, or
       * test. If empty, this flag policy is applied for all commands. This allows
       * the policy setter to add all policies to the proto without having to
       * determine which Bazel command the user is actually running. Additionally,
       * Bazel allows multiple flags to be defined by the same name, and the
       * specific flag definition is determined by the command.
       * </pre>
       *
       * <code>repeated string commands = 2;</code>
       */
      public com.google.protobuf.ByteString
          getCommandsBytes(int index) {
        return commands_.getByteString(index);
      }
      /**
       * <pre>
       * If set, this flag policy is applied only if one of the given commands or a
       * command that inherits from one of the given commands is being run. For
       * instance, if "build" is one of the commands here, then this policy will
       * apply to any command that inherits from build, such as info, coverage, or
       * test. If empty, this flag policy is applied for all commands. This allows
       * the policy setter to add all policies to the proto without having to
       * determine which Bazel command the user is actually running. Additionally,
       * Bazel allows multiple flags to be defined by the same name, and the
       * specific flag definition is determined by the command.
       * </pre>
       *
       * <code>repeated string commands = 2;</code>
       */
      public Builder setCommands(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureCommandsIsMutable();
        commands_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If set, this flag policy is applied only if one of the given commands or a
       * command that inherits from one of the given commands is being run. For
       * instance, if "build" is one of the commands here, then this policy will
       * apply to any command that inherits from build, such as info, coverage, or
       * test. If empty, this flag policy is applied for all commands. This allows
       * the policy setter to add all policies to the proto without having to
       * determine which Bazel command the user is actually running. Additionally,
       * Bazel allows multiple flags to be defined by the same name, and the
       * specific flag definition is determined by the command.
       * </pre>
       *
       * <code>repeated string commands = 2;</code>
       */
      public Builder addCommands(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureCommandsIsMutable();
        commands_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If set, this flag policy is applied only if one of the given commands or a
       * command that inherits from one of the given commands is being run. For
       * instance, if "build" is one of the commands here, then this policy will
       * apply to any command that inherits from build, such as info, coverage, or
       * test. If empty, this flag policy is applied for all commands. This allows
       * the policy setter to add all policies to the proto without having to
       * determine which Bazel command the user is actually running. Additionally,
       * Bazel allows multiple flags to be defined by the same name, and the
       * specific flag definition is determined by the command.
       * </pre>
       *
       * <code>repeated string commands = 2;</code>
       */
      public Builder addAllCommands(
          java.lang.Iterable<java.lang.String> values) {
        ensureCommandsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, commands_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If set, this flag policy is applied only if one of the given commands or a
       * command that inherits from one of the given commands is being run. For
       * instance, if "build" is one of the commands here, then this policy will
       * apply to any command that inherits from build, such as info, coverage, or
       * test. If empty, this flag policy is applied for all commands. This allows
       * the policy setter to add all policies to the proto without having to
       * determine which Bazel command the user is actually running. Additionally,
       * Bazel allows multiple flags to be defined by the same name, and the
       * specific flag definition is determined by the command.
       * </pre>
       *
       * <code>repeated string commands = 2;</code>
       */
      public Builder clearCommands() {
        commands_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If set, this flag policy is applied only if one of the given commands or a
       * command that inherits from one of the given commands is being run. For
       * instance, if "build" is one of the commands here, then this policy will
       * apply to any command that inherits from build, such as info, coverage, or
       * test. If empty, this flag policy is applied for all commands. This allows
       * the policy setter to add all policies to the proto without having to
       * determine which Bazel command the user is actually running. Additionally,
       * Bazel allows multiple flags to be defined by the same name, and the
       * specific flag definition is determined by the command.
       * </pre>
       *
       * <code>repeated string commands = 2;</code>
       */
      public Builder addCommandsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureCommandsIsMutable();
        commands_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue.Builder, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValueOrBuilder> setValueBuilder_;
      /**
       * <code>optional .blaze.invocation_policy.SetValue set_value = 3;</code>
       */
      public boolean hasSetValue() {
        return operationCase_ == 3;
      }
      /**
       * <code>optional .blaze.invocation_policy.SetValue set_value = 3;</code>
       */
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue getSetValue() {
        if (setValueBuilder_ == null) {
          if (operationCase_ == 3) {
            return (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue) operation_;
          }
          return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue.getDefaultInstance();
        } else {
          if (operationCase_ == 3) {
            return setValueBuilder_.getMessage();
          }
          return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue.getDefaultInstance();
        }
      }
      /**
       * <code>optional .blaze.invocation_policy.SetValue set_value = 3;</code>
       */
      public Builder setSetValue(com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue value) {
        if (setValueBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          setValueBuilder_.setMessage(value);
        }
        operationCase_ = 3;
        return this;
      }
      /**
       * <code>optional .blaze.invocation_policy.SetValue set_value = 3;</code>
       */
      public Builder setSetValue(
          com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue.Builder builderForValue) {
        if (setValueBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          setValueBuilder_.setMessage(builderForValue.build());
        }
        operationCase_ = 3;
        return this;
      }
      /**
       * <code>optional .blaze.invocation_policy.SetValue set_value = 3;</code>
       */
      public Builder mergeSetValue(com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue value) {
        if (setValueBuilder_ == null) {
          if (operationCase_ == 3 &&
              operation_ != com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue.getDefaultInstance()) {
            operation_ = com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue.newBuilder((com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue) operation_)
                .mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          if (operationCase_ == 3) {
            setValueBuilder_.mergeFrom(value);
          }
          setValueBuilder_.setMessage(value);
        }
        operationCase_ = 3;
        return this;
      }
      /**
       * <code>optional .blaze.invocation_policy.SetValue set_value = 3;</code>
       */
      public Builder clearSetValue() {
        if (setValueBuilder_ == null) {
          if (operationCase_ == 3) {
            operationCase_ = 0;
            operation_ = null;
            onChanged();
          }
        } else {
          if (operationCase_ == 3) {
            operationCase_ = 0;
            operation_ = null;
          }
          setValueBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .blaze.invocation_policy.SetValue set_value = 3;</code>
       */
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue.Builder getSetValueBuilder() {
        return getSetValueFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .blaze.invocation_policy.SetValue set_value = 3;</code>
       */
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValueOrBuilder getSetValueOrBuilder() {
        if ((operationCase_ == 3) && (setValueBuilder_ != null)) {
          return setValueBuilder_.getMessageOrBuilder();
        } else {
          if (operationCase_ == 3) {
            return (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue) operation_;
          }
          return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue.getDefaultInstance();
        }
      }
      /**
       * <code>optional .blaze.invocation_policy.SetValue set_value = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue.Builder, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValueOrBuilder> 
          getSetValueFieldBuilder() {
        if (setValueBuilder_ == null) {
          if (!(operationCase_ == 3)) {
            operation_ = com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue.getDefaultInstance();
          }
          setValueBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue.Builder, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValueOrBuilder>(
                  (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue) operation_,
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        operationCase_ = 3;
        onChanged();;
        return setValueBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.Builder, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefaultOrBuilder> useDefaultBuilder_;
      /**
       * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
       */
      public boolean hasUseDefault() {
        return operationCase_ == 4;
      }
      /**
       * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
       */
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault getUseDefault() {
        if (useDefaultBuilder_ == null) {
          if (operationCase_ == 4) {
            return (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) operation_;
          }
          return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.getDefaultInstance();
        } else {
          if (operationCase_ == 4) {
            return useDefaultBuilder_.getMessage();
          }
          return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.getDefaultInstance();
        }
      }
      /**
       * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
       */
      public Builder setUseDefault(com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault value) {
        if (useDefaultBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          useDefaultBuilder_.setMessage(value);
        }
        operationCase_ = 4;
        return this;
      }
      /**
       * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
       */
      public Builder setUseDefault(
          com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.Builder builderForValue) {
        if (useDefaultBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          useDefaultBuilder_.setMessage(builderForValue.build());
        }
        operationCase_ = 4;
        return this;
      }
      /**
       * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
       */
      public Builder mergeUseDefault(com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault value) {
        if (useDefaultBuilder_ == null) {
          if (operationCase_ == 4 &&
              operation_ != com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.getDefaultInstance()) {
            operation_ = com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.newBuilder((com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) operation_)
                .mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          if (operationCase_ == 4) {
            useDefaultBuilder_.mergeFrom(value);
          }
          useDefaultBuilder_.setMessage(value);
        }
        operationCase_ = 4;
        return this;
      }
      /**
       * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
       */
      public Builder clearUseDefault() {
        if (useDefaultBuilder_ == null) {
          if (operationCase_ == 4) {
            operationCase_ = 0;
            operation_ = null;
            onChanged();
          }
        } else {
          if (operationCase_ == 4) {
            operationCase_ = 0;
            operation_ = null;
          }
          useDefaultBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
       */
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.Builder getUseDefaultBuilder() {
        return getUseDefaultFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
       */
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefaultOrBuilder getUseDefaultOrBuilder() {
        if ((operationCase_ == 4) && (useDefaultBuilder_ != null)) {
          return useDefaultBuilder_.getMessageOrBuilder();
        } else {
          if (operationCase_ == 4) {
            return (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) operation_;
          }
          return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.getDefaultInstance();
        }
      }
      /**
       * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.Builder, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefaultOrBuilder> 
          getUseDefaultFieldBuilder() {
        if (useDefaultBuilder_ == null) {
          if (!(operationCase_ == 4)) {
            operation_ = com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.getDefaultInstance();
          }
          useDefaultBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.Builder, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefaultOrBuilder>(
                  (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) operation_,
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        operationCase_ = 4;
        onChanged();;
        return useDefaultBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues.Builder, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValuesOrBuilder> disallowValuesBuilder_;
      /**
       * <code>optional .blaze.invocation_policy.DisallowValues disallow_values = 5;</code>
       */
      public boolean hasDisallowValues() {
        return operationCase_ == 5;
      }
      /**
       * <code>optional .blaze.invocation_policy.DisallowValues disallow_values = 5;</code>
       */
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues getDisallowValues() {
        if (disallowValuesBuilder_ == null) {
          if (operationCase_ == 5) {
            return (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues) operation_;
          }
          return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues.getDefaultInstance();
        } else {
          if (operationCase_ == 5) {
            return disallowValuesBuilder_.getMessage();
          }
          return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues.getDefaultInstance();
        }
      }
      /**
       * <code>optional .blaze.invocation_policy.DisallowValues disallow_values = 5;</code>
       */
      public Builder setDisallowValues(com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues value) {
        if (disallowValuesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          disallowValuesBuilder_.setMessage(value);
        }
        operationCase_ = 5;
        return this;
      }
      /**
       * <code>optional .blaze.invocation_policy.DisallowValues disallow_values = 5;</code>
       */
      public Builder setDisallowValues(
          com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues.Builder builderForValue) {
        if (disallowValuesBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          disallowValuesBuilder_.setMessage(builderForValue.build());
        }
        operationCase_ = 5;
        return this;
      }
      /**
       * <code>optional .blaze.invocation_policy.DisallowValues disallow_values = 5;</code>
       */
      public Builder mergeDisallowValues(com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues value) {
        if (disallowValuesBuilder_ == null) {
          if (operationCase_ == 5 &&
              operation_ != com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues.getDefaultInstance()) {
            operation_ = com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues.newBuilder((com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues) operation_)
                .mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          if (operationCase_ == 5) {
            disallowValuesBuilder_.mergeFrom(value);
          }
          disallowValuesBuilder_.setMessage(value);
        }
        operationCase_ = 5;
        return this;
      }
      /**
       * <code>optional .blaze.invocation_policy.DisallowValues disallow_values = 5;</code>
       */
      public Builder clearDisallowValues() {
        if (disallowValuesBuilder_ == null) {
          if (operationCase_ == 5) {
            operationCase_ = 0;
            operation_ = null;
            onChanged();
          }
        } else {
          if (operationCase_ == 5) {
            operationCase_ = 0;
            operation_ = null;
          }
          disallowValuesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .blaze.invocation_policy.DisallowValues disallow_values = 5;</code>
       */
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues.Builder getDisallowValuesBuilder() {
        return getDisallowValuesFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .blaze.invocation_policy.DisallowValues disallow_values = 5;</code>
       */
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValuesOrBuilder getDisallowValuesOrBuilder() {
        if ((operationCase_ == 5) && (disallowValuesBuilder_ != null)) {
          return disallowValuesBuilder_.getMessageOrBuilder();
        } else {
          if (operationCase_ == 5) {
            return (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues) operation_;
          }
          return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues.getDefaultInstance();
        }
      }
      /**
       * <code>optional .blaze.invocation_policy.DisallowValues disallow_values = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues.Builder, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValuesOrBuilder> 
          getDisallowValuesFieldBuilder() {
        if (disallowValuesBuilder_ == null) {
          if (!(operationCase_ == 5)) {
            operation_ = com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues.getDefaultInstance();
          }
          disallowValuesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues.Builder, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValuesOrBuilder>(
                  (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues) operation_,
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        operationCase_ = 5;
        onChanged();;
        return disallowValuesBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues.Builder, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValuesOrBuilder> allowValuesBuilder_;
      /**
       * <code>optional .blaze.invocation_policy.AllowValues allow_values = 6;</code>
       */
      public boolean hasAllowValues() {
        return operationCase_ == 6;
      }
      /**
       * <code>optional .blaze.invocation_policy.AllowValues allow_values = 6;</code>
       */
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues getAllowValues() {
        if (allowValuesBuilder_ == null) {
          if (operationCase_ == 6) {
            return (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues) operation_;
          }
          return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues.getDefaultInstance();
        } else {
          if (operationCase_ == 6) {
            return allowValuesBuilder_.getMessage();
          }
          return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues.getDefaultInstance();
        }
      }
      /**
       * <code>optional .blaze.invocation_policy.AllowValues allow_values = 6;</code>
       */
      public Builder setAllowValues(com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues value) {
        if (allowValuesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operation_ = value;
          onChanged();
        } else {
          allowValuesBuilder_.setMessage(value);
        }
        operationCase_ = 6;
        return this;
      }
      /**
       * <code>optional .blaze.invocation_policy.AllowValues allow_values = 6;</code>
       */
      public Builder setAllowValues(
          com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues.Builder builderForValue) {
        if (allowValuesBuilder_ == null) {
          operation_ = builderForValue.build();
          onChanged();
        } else {
          allowValuesBuilder_.setMessage(builderForValue.build());
        }
        operationCase_ = 6;
        return this;
      }
      /**
       * <code>optional .blaze.invocation_policy.AllowValues allow_values = 6;</code>
       */
      public Builder mergeAllowValues(com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues value) {
        if (allowValuesBuilder_ == null) {
          if (operationCase_ == 6 &&
              operation_ != com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues.getDefaultInstance()) {
            operation_ = com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues.newBuilder((com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues) operation_)
                .mergeFrom(value).buildPartial();
          } else {
            operation_ = value;
          }
          onChanged();
        } else {
          if (operationCase_ == 6) {
            allowValuesBuilder_.mergeFrom(value);
          }
          allowValuesBuilder_.setMessage(value);
        }
        operationCase_ = 6;
        return this;
      }
      /**
       * <code>optional .blaze.invocation_policy.AllowValues allow_values = 6;</code>
       */
      public Builder clearAllowValues() {
        if (allowValuesBuilder_ == null) {
          if (operationCase_ == 6) {
            operationCase_ = 0;
            operation_ = null;
            onChanged();
          }
        } else {
          if (operationCase_ == 6) {
            operationCase_ = 0;
            operation_ = null;
          }
          allowValuesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .blaze.invocation_policy.AllowValues allow_values = 6;</code>
       */
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues.Builder getAllowValuesBuilder() {
        return getAllowValuesFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .blaze.invocation_policy.AllowValues allow_values = 6;</code>
       */
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValuesOrBuilder getAllowValuesOrBuilder() {
        if ((operationCase_ == 6) && (allowValuesBuilder_ != null)) {
          return allowValuesBuilder_.getMessageOrBuilder();
        } else {
          if (operationCase_ == 6) {
            return (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues) operation_;
          }
          return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues.getDefaultInstance();
        }
      }
      /**
       * <code>optional .blaze.invocation_policy.AllowValues allow_values = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues.Builder, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValuesOrBuilder> 
          getAllowValuesFieldBuilder() {
        if (allowValuesBuilder_ == null) {
          if (!(operationCase_ == 6)) {
            operation_ = com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues.getDefaultInstance();
          }
          allowValuesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues.Builder, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValuesOrBuilder>(
                  (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues) operation_,
                  getParentForChildren(),
                  isClean());
          operation_ = null;
        }
        operationCase_ = 6;
        onChanged();;
        return allowValuesBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:blaze.invocation_policy.FlagPolicy)
    }

    // @@protoc_insertion_point(class_scope:blaze.invocation_policy.FlagPolicy)
    private static final com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy();
    }

    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<FlagPolicy>
        PARSER = new com.google.protobuf.AbstractParser<FlagPolicy>() {
      @java.lang.Override
      public FlagPolicy parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FlagPolicy(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FlagPolicy> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FlagPolicy> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.FlagPolicy getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SetValueOrBuilder extends
      // @@protoc_insertion_point(interface_extends:blaze.invocation_policy.SetValue)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Use this value for the specified flag, overriding any default or user-set
     * value (unless append is set to true for repeatable flags).
     * This field is repeated for repeatable flags. It is an error to set
     * multiple values for a flag that is not actually a repeatable flag.
     * This requires at least 1 value, if even the empty string.
     * If the flag allows multiple values, all of its values are replaced with the
     * value or values from the policy (i.e., no diffing or merging is performed),
     * unless the append field (see below) is set to true.
     * Note that some flags are tricky. For example, some flags look like boolean
     * flags, but are actually Void expansion flags that expand into other flags.
     * The Bazel flag parser will accept "--void_flag=false", but because
     * the flag is Void, the "=false" is ignored. It can get even trickier, like
     * "--novoid_flag" which is also an expansion flag with the type Void whose
     * name is explicitly "novoid_flag" and which expands into other flags that
     * are the opposite of "--void_flag". For expansion flags, it's best to
     * explicitly override the flags they expand into.
     * Other flags may be differently tricky: A flag could have a converter that
     * converts some string to a list of values, but that flag may not itself have
     * allowMultiple set to true.
     * An example is "--test_tag_filters": this flag sets its converter to
     * CommaSeparatedOptionListConverter, but does not set allowMultiple to true.
     * So "--test_tag_filters=foo,bar" results in ["foo", "bar"], however
     * "--test_tag_filters=foo --test_tag_filters=bar" results in just ["bar"]
     * since the 2nd value overrides the 1st.
     * Similarly, "--test_tag_filters=foo,bar --test_tag_filters=baz,qux" results
     * in ["baz", "qux"]. For flags like these, the policy should specify
     * "foo,bar" instead of separately specifying "foo" and "bar" so that the
     * converter is appropriately invoked.
     * Note that the opposite is not necessarily
     * true: for a flag that specifies allowMultiple=true, "--flag=foo,bar"
     * may fail to parse or result in an unexpected value.
     * </pre>
     *
     * <code>repeated string flag_value = 1;</code>
     */
    java.util.List<java.lang.String>
        getFlagValueList();
    /**
     * <pre>
     * Use this value for the specified flag, overriding any default or user-set
     * value (unless append is set to true for repeatable flags).
     * This field is repeated for repeatable flags. It is an error to set
     * multiple values for a flag that is not actually a repeatable flag.
     * This requires at least 1 value, if even the empty string.
     * If the flag allows multiple values, all of its values are replaced with the
     * value or values from the policy (i.e., no diffing or merging is performed),
     * unless the append field (see below) is set to true.
     * Note that some flags are tricky. For example, some flags look like boolean
     * flags, but are actually Void expansion flags that expand into other flags.
     * The Bazel flag parser will accept "--void_flag=false", but because
     * the flag is Void, the "=false" is ignored. It can get even trickier, like
     * "--novoid_flag" which is also an expansion flag with the type Void whose
     * name is explicitly "novoid_flag" and which expands into other flags that
     * are the opposite of "--void_flag". For expansion flags, it's best to
     * explicitly override the flags they expand into.
     * Other flags may be differently tricky: A flag could have a converter that
     * converts some string to a list of values, but that flag may not itself have
     * allowMultiple set to true.
     * An example is "--test_tag_filters": this flag sets its converter to
     * CommaSeparatedOptionListConverter, but does not set allowMultiple to true.
     * So "--test_tag_filters=foo,bar" results in ["foo", "bar"], however
     * "--test_tag_filters=foo --test_tag_filters=bar" results in just ["bar"]
     * since the 2nd value overrides the 1st.
     * Similarly, "--test_tag_filters=foo,bar --test_tag_filters=baz,qux" results
     * in ["baz", "qux"]. For flags like these, the policy should specify
     * "foo,bar" instead of separately specifying "foo" and "bar" so that the
     * converter is appropriately invoked.
     * Note that the opposite is not necessarily
     * true: for a flag that specifies allowMultiple=true, "--flag=foo,bar"
     * may fail to parse or result in an unexpected value.
     * </pre>
     *
     * <code>repeated string flag_value = 1;</code>
     */
    int getFlagValueCount();
    /**
     * <pre>
     * Use this value for the specified flag, overriding any default or user-set
     * value (unless append is set to true for repeatable flags).
     * This field is repeated for repeatable flags. It is an error to set
     * multiple values for a flag that is not actually a repeatable flag.
     * This requires at least 1 value, if even the empty string.
     * If the flag allows multiple values, all of its values are replaced with the
     * value or values from the policy (i.e., no diffing or merging is performed),
     * unless the append field (see below) is set to true.
     * Note that some flags are tricky. For example, some flags look like boolean
     * flags, but are actually Void expansion flags that expand into other flags.
     * The Bazel flag parser will accept "--void_flag=false", but because
     * the flag is Void, the "=false" is ignored. It can get even trickier, like
     * "--novoid_flag" which is also an expansion flag with the type Void whose
     * name is explicitly "novoid_flag" and which expands into other flags that
     * are the opposite of "--void_flag". For expansion flags, it's best to
     * explicitly override the flags they expand into.
     * Other flags may be differently tricky: A flag could have a converter that
     * converts some string to a list of values, but that flag may not itself have
     * allowMultiple set to true.
     * An example is "--test_tag_filters": this flag sets its converter to
     * CommaSeparatedOptionListConverter, but does not set allowMultiple to true.
     * So "--test_tag_filters=foo,bar" results in ["foo", "bar"], however
     * "--test_tag_filters=foo --test_tag_filters=bar" results in just ["bar"]
     * since the 2nd value overrides the 1st.
     * Similarly, "--test_tag_filters=foo,bar --test_tag_filters=baz,qux" results
     * in ["baz", "qux"]. For flags like these, the policy should specify
     * "foo,bar" instead of separately specifying "foo" and "bar" so that the
     * converter is appropriately invoked.
     * Note that the opposite is not necessarily
     * true: for a flag that specifies allowMultiple=true, "--flag=foo,bar"
     * may fail to parse or result in an unexpected value.
     * </pre>
     *
     * <code>repeated string flag_value = 1;</code>
     */
    java.lang.String getFlagValue(int index);
    /**
     * <pre>
     * Use this value for the specified flag, overriding any default or user-set
     * value (unless append is set to true for repeatable flags).
     * This field is repeated for repeatable flags. It is an error to set
     * multiple values for a flag that is not actually a repeatable flag.
     * This requires at least 1 value, if even the empty string.
     * If the flag allows multiple values, all of its values are replaced with the
     * value or values from the policy (i.e., no diffing or merging is performed),
     * unless the append field (see below) is set to true.
     * Note that some flags are tricky. For example, some flags look like boolean
     * flags, but are actually Void expansion flags that expand into other flags.
     * The Bazel flag parser will accept "--void_flag=false", but because
     * the flag is Void, the "=false" is ignored. It can get even trickier, like
     * "--novoid_flag" which is also an expansion flag with the type Void whose
     * name is explicitly "novoid_flag" and which expands into other flags that
     * are the opposite of "--void_flag". For expansion flags, it's best to
     * explicitly override the flags they expand into.
     * Other flags may be differently tricky: A flag could have a converter that
     * converts some string to a list of values, but that flag may not itself have
     * allowMultiple set to true.
     * An example is "--test_tag_filters": this flag sets its converter to
     * CommaSeparatedOptionListConverter, but does not set allowMultiple to true.
     * So "--test_tag_filters=foo,bar" results in ["foo", "bar"], however
     * "--test_tag_filters=foo --test_tag_filters=bar" results in just ["bar"]
     * since the 2nd value overrides the 1st.
     * Similarly, "--test_tag_filters=foo,bar --test_tag_filters=baz,qux" results
     * in ["baz", "qux"]. For flags like these, the policy should specify
     * "foo,bar" instead of separately specifying "foo" and "bar" so that the
     * converter is appropriately invoked.
     * Note that the opposite is not necessarily
     * true: for a flag that specifies allowMultiple=true, "--flag=foo,bar"
     * may fail to parse or result in an unexpected value.
     * </pre>
     *
     * <code>repeated string flag_value = 1;</code>
     */
    com.google.protobuf.ByteString
        getFlagValueBytes(int index);

    /**
     * <pre>
     * Whether to allow this policy to be overridden by user-specified values.
     * When set, if the user specified a value for this flag, use the value
     * from the user, otherwise use the value specified in this policy.
     * </pre>
     *
     * <code>optional bool overridable = 2;</code>
     */
    boolean hasOverridable();
    /**
     * <pre>
     * Whether to allow this policy to be overridden by user-specified values.
     * When set, if the user specified a value for this flag, use the value
     * from the user, otherwise use the value specified in this policy.
     * </pre>
     *
     * <code>optional bool overridable = 2;</code>
     */
    boolean getOverridable();

    /**
     * <pre>
     * If true, and if the flag named in the policy is a repeatable flag, then
     * the values listed in flag_value do not replace all the user-set or default
     * values of the flag, but instead append to them. If the flag is not
     * repeatable, then this has no effect.
     * </pre>
     *
     * <code>optional bool append = 3;</code>
     */
    boolean hasAppend();
    /**
     * <pre>
     * If true, and if the flag named in the policy is a repeatable flag, then
     * the values listed in flag_value do not replace all the user-set or default
     * values of the flag, but instead append to them. If the flag is not
     * repeatable, then this has no effect.
     * </pre>
     *
     * <code>optional bool append = 3;</code>
     */
    boolean getAppend();
  }
  /**
   * Protobuf type {@code blaze.invocation_policy.SetValue}
   */
  public  static final class SetValue extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:blaze.invocation_policy.SetValue)
      SetValueOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SetValue.newBuilder() to construct.
    private SetValue(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SetValue() {
      flagValue_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      overridable_ = false;
      append_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SetValue(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                flagValue_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              flagValue_.add(bs);
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              overridable_ = input.readBool();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              append_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          flagValue_ = flagValue_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.internal_static_blaze_invocation_policy_SetValue_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.internal_static_blaze_invocation_policy_SetValue_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue.class, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue.Builder.class);
    }

    private int bitField0_;
    public static final int FLAG_VALUE_FIELD_NUMBER = 1;
    private com.google.protobuf.LazyStringList flagValue_;
    /**
     * <pre>
     * Use this value for the specified flag, overriding any default or user-set
     * value (unless append is set to true for repeatable flags).
     * This field is repeated for repeatable flags. It is an error to set
     * multiple values for a flag that is not actually a repeatable flag.
     * This requires at least 1 value, if even the empty string.
     * If the flag allows multiple values, all of its values are replaced with the
     * value or values from the policy (i.e., no diffing or merging is performed),
     * unless the append field (see below) is set to true.
     * Note that some flags are tricky. For example, some flags look like boolean
     * flags, but are actually Void expansion flags that expand into other flags.
     * The Bazel flag parser will accept "--void_flag=false", but because
     * the flag is Void, the "=false" is ignored. It can get even trickier, like
     * "--novoid_flag" which is also an expansion flag with the type Void whose
     * name is explicitly "novoid_flag" and which expands into other flags that
     * are the opposite of "--void_flag". For expansion flags, it's best to
     * explicitly override the flags they expand into.
     * Other flags may be differently tricky: A flag could have a converter that
     * converts some string to a list of values, but that flag may not itself have
     * allowMultiple set to true.
     * An example is "--test_tag_filters": this flag sets its converter to
     * CommaSeparatedOptionListConverter, but does not set allowMultiple to true.
     * So "--test_tag_filters=foo,bar" results in ["foo", "bar"], however
     * "--test_tag_filters=foo --test_tag_filters=bar" results in just ["bar"]
     * since the 2nd value overrides the 1st.
     * Similarly, "--test_tag_filters=foo,bar --test_tag_filters=baz,qux" results
     * in ["baz", "qux"]. For flags like these, the policy should specify
     * "foo,bar" instead of separately specifying "foo" and "bar" so that the
     * converter is appropriately invoked.
     * Note that the opposite is not necessarily
     * true: for a flag that specifies allowMultiple=true, "--flag=foo,bar"
     * may fail to parse or result in an unexpected value.
     * </pre>
     *
     * <code>repeated string flag_value = 1;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getFlagValueList() {
      return flagValue_;
    }
    /**
     * <pre>
     * Use this value for the specified flag, overriding any default or user-set
     * value (unless append is set to true for repeatable flags).
     * This field is repeated for repeatable flags. It is an error to set
     * multiple values for a flag that is not actually a repeatable flag.
     * This requires at least 1 value, if even the empty string.
     * If the flag allows multiple values, all of its values are replaced with the
     * value or values from the policy (i.e., no diffing or merging is performed),
     * unless the append field (see below) is set to true.
     * Note that some flags are tricky. For example, some flags look like boolean
     * flags, but are actually Void expansion flags that expand into other flags.
     * The Bazel flag parser will accept "--void_flag=false", but because
     * the flag is Void, the "=false" is ignored. It can get even trickier, like
     * "--novoid_flag" which is also an expansion flag with the type Void whose
     * name is explicitly "novoid_flag" and which expands into other flags that
     * are the opposite of "--void_flag". For expansion flags, it's best to
     * explicitly override the flags they expand into.
     * Other flags may be differently tricky: A flag could have a converter that
     * converts some string to a list of values, but that flag may not itself have
     * allowMultiple set to true.
     * An example is "--test_tag_filters": this flag sets its converter to
     * CommaSeparatedOptionListConverter, but does not set allowMultiple to true.
     * So "--test_tag_filters=foo,bar" results in ["foo", "bar"], however
     * "--test_tag_filters=foo --test_tag_filters=bar" results in just ["bar"]
     * since the 2nd value overrides the 1st.
     * Similarly, "--test_tag_filters=foo,bar --test_tag_filters=baz,qux" results
     * in ["baz", "qux"]. For flags like these, the policy should specify
     * "foo,bar" instead of separately specifying "foo" and "bar" so that the
     * converter is appropriately invoked.
     * Note that the opposite is not necessarily
     * true: for a flag that specifies allowMultiple=true, "--flag=foo,bar"
     * may fail to parse or result in an unexpected value.
     * </pre>
     *
     * <code>repeated string flag_value = 1;</code>
     */
    public int getFlagValueCount() {
      return flagValue_.size();
    }
    /**
     * <pre>
     * Use this value for the specified flag, overriding any default or user-set
     * value (unless append is set to true for repeatable flags).
     * This field is repeated for repeatable flags. It is an error to set
     * multiple values for a flag that is not actually a repeatable flag.
     * This requires at least 1 value, if even the empty string.
     * If the flag allows multiple values, all of its values are replaced with the
     * value or values from the policy (i.e., no diffing or merging is performed),
     * unless the append field (see below) is set to true.
     * Note that some flags are tricky. For example, some flags look like boolean
     * flags, but are actually Void expansion flags that expand into other flags.
     * The Bazel flag parser will accept "--void_flag=false", but because
     * the flag is Void, the "=false" is ignored. It can get even trickier, like
     * "--novoid_flag" which is also an expansion flag with the type Void whose
     * name is explicitly "novoid_flag" and which expands into other flags that
     * are the opposite of "--void_flag". For expansion flags, it's best to
     * explicitly override the flags they expand into.
     * Other flags may be differently tricky: A flag could have a converter that
     * converts some string to a list of values, but that flag may not itself have
     * allowMultiple set to true.
     * An example is "--test_tag_filters": this flag sets its converter to
     * CommaSeparatedOptionListConverter, but does not set allowMultiple to true.
     * So "--test_tag_filters=foo,bar" results in ["foo", "bar"], however
     * "--test_tag_filters=foo --test_tag_filters=bar" results in just ["bar"]
     * since the 2nd value overrides the 1st.
     * Similarly, "--test_tag_filters=foo,bar --test_tag_filters=baz,qux" results
     * in ["baz", "qux"]. For flags like these, the policy should specify
     * "foo,bar" instead of separately specifying "foo" and "bar" so that the
     * converter is appropriately invoked.
     * Note that the opposite is not necessarily
     * true: for a flag that specifies allowMultiple=true, "--flag=foo,bar"
     * may fail to parse or result in an unexpected value.
     * </pre>
     *
     * <code>repeated string flag_value = 1;</code>
     */
    public java.lang.String getFlagValue(int index) {
      return flagValue_.get(index);
    }
    /**
     * <pre>
     * Use this value for the specified flag, overriding any default or user-set
     * value (unless append is set to true for repeatable flags).
     * This field is repeated for repeatable flags. It is an error to set
     * multiple values for a flag that is not actually a repeatable flag.
     * This requires at least 1 value, if even the empty string.
     * If the flag allows multiple values, all of its values are replaced with the
     * value or values from the policy (i.e., no diffing or merging is performed),
     * unless the append field (see below) is set to true.
     * Note that some flags are tricky. For example, some flags look like boolean
     * flags, but are actually Void expansion flags that expand into other flags.
     * The Bazel flag parser will accept "--void_flag=false", but because
     * the flag is Void, the "=false" is ignored. It can get even trickier, like
     * "--novoid_flag" which is also an expansion flag with the type Void whose
     * name is explicitly "novoid_flag" and which expands into other flags that
     * are the opposite of "--void_flag". For expansion flags, it's best to
     * explicitly override the flags they expand into.
     * Other flags may be differently tricky: A flag could have a converter that
     * converts some string to a list of values, but that flag may not itself have
     * allowMultiple set to true.
     * An example is "--test_tag_filters": this flag sets its converter to
     * CommaSeparatedOptionListConverter, but does not set allowMultiple to true.
     * So "--test_tag_filters=foo,bar" results in ["foo", "bar"], however
     * "--test_tag_filters=foo --test_tag_filters=bar" results in just ["bar"]
     * since the 2nd value overrides the 1st.
     * Similarly, "--test_tag_filters=foo,bar --test_tag_filters=baz,qux" results
     * in ["baz", "qux"]. For flags like these, the policy should specify
     * "foo,bar" instead of separately specifying "foo" and "bar" so that the
     * converter is appropriately invoked.
     * Note that the opposite is not necessarily
     * true: for a flag that specifies allowMultiple=true, "--flag=foo,bar"
     * may fail to parse or result in an unexpected value.
     * </pre>
     *
     * <code>repeated string flag_value = 1;</code>
     */
    public com.google.protobuf.ByteString
        getFlagValueBytes(int index) {
      return flagValue_.getByteString(index);
    }

    public static final int OVERRIDABLE_FIELD_NUMBER = 2;
    private boolean overridable_;
    /**
     * <pre>
     * Whether to allow this policy to be overridden by user-specified values.
     * When set, if the user specified a value for this flag, use the value
     * from the user, otherwise use the value specified in this policy.
     * </pre>
     *
     * <code>optional bool overridable = 2;</code>
     */
    public boolean hasOverridable() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Whether to allow this policy to be overridden by user-specified values.
     * When set, if the user specified a value for this flag, use the value
     * from the user, otherwise use the value specified in this policy.
     * </pre>
     *
     * <code>optional bool overridable = 2;</code>
     */
    public boolean getOverridable() {
      return overridable_;
    }

    public static final int APPEND_FIELD_NUMBER = 3;
    private boolean append_;
    /**
     * <pre>
     * If true, and if the flag named in the policy is a repeatable flag, then
     * the values listed in flag_value do not replace all the user-set or default
     * values of the flag, but instead append to them. If the flag is not
     * repeatable, then this has no effect.
     * </pre>
     *
     * <code>optional bool append = 3;</code>
     */
    public boolean hasAppend() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * If true, and if the flag named in the policy is a repeatable flag, then
     * the values listed in flag_value do not replace all the user-set or default
     * values of the flag, but instead append to them. If the flag is not
     * repeatable, then this has no effect.
     * </pre>
     *
     * <code>optional bool append = 3;</code>
     */
    public boolean getAppend() {
      return append_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < flagValue_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, flagValue_.getRaw(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(2, overridable_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(3, append_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < flagValue_.size(); i++) {
          dataSize += computeStringSizeNoTag(flagValue_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getFlagValueList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, overridable_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, append_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue)) {
        return super.equals(obj);
      }
      com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue other = (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue) obj;

      boolean result = true;
      result = result && getFlagValueList()
          .equals(other.getFlagValueList());
      result = result && (hasOverridable() == other.hasOverridable());
      if (hasOverridable()) {
        result = result && (getOverridable()
            == other.getOverridable());
      }
      result = result && (hasAppend() == other.hasAppend());
      if (hasAppend()) {
        result = result && (getAppend()
            == other.getAppend());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getFlagValueCount() > 0) {
        hash = (37 * hash) + FLAG_VALUE_FIELD_NUMBER;
        hash = (53 * hash) + getFlagValueList().hashCode();
      }
      if (hasOverridable()) {
        hash = (37 * hash) + OVERRIDABLE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getOverridable());
      }
      if (hasAppend()) {
        hash = (37 * hash) + APPEND_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getAppend());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code blaze.invocation_policy.SetValue}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:blaze.invocation_policy.SetValue)
        com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValueOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.internal_static_blaze_invocation_policy_SetValue_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.internal_static_blaze_invocation_policy_SetValue_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue.class, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue.Builder.class);
      }

      // Construct using com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        flagValue_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        overridable_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        append_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.internal_static_blaze_invocation_policy_SetValue_descriptor;
      }

      @java.lang.Override
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue getDefaultInstanceForType() {
        return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue build() {
        com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue buildPartial() {
        com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue result = new com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          flagValue_ = flagValue_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.flagValue_ = flagValue_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.overridable_ = overridable_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.append_ = append_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue) {
          return mergeFrom((com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue other) {
        if (other == com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue.getDefaultInstance()) return this;
        if (!other.flagValue_.isEmpty()) {
          if (flagValue_.isEmpty()) {
            flagValue_ = other.flagValue_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureFlagValueIsMutable();
            flagValue_.addAll(other.flagValue_);
          }
          onChanged();
        }
        if (other.hasOverridable()) {
          setOverridable(other.getOverridable());
        }
        if (other.hasAppend()) {
          setAppend(other.getAppend());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.LazyStringList flagValue_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureFlagValueIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          flagValue_ = new com.google.protobuf.LazyStringArrayList(flagValue_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * Use this value for the specified flag, overriding any default or user-set
       * value (unless append is set to true for repeatable flags).
       * This field is repeated for repeatable flags. It is an error to set
       * multiple values for a flag that is not actually a repeatable flag.
       * This requires at least 1 value, if even the empty string.
       * If the flag allows multiple values, all of its values are replaced with the
       * value or values from the policy (i.e., no diffing or merging is performed),
       * unless the append field (see below) is set to true.
       * Note that some flags are tricky. For example, some flags look like boolean
       * flags, but are actually Void expansion flags that expand into other flags.
       * The Bazel flag parser will accept "--void_flag=false", but because
       * the flag is Void, the "=false" is ignored. It can get even trickier, like
       * "--novoid_flag" which is also an expansion flag with the type Void whose
       * name is explicitly "novoid_flag" and which expands into other flags that
       * are the opposite of "--void_flag". For expansion flags, it's best to
       * explicitly override the flags they expand into.
       * Other flags may be differently tricky: A flag could have a converter that
       * converts some string to a list of values, but that flag may not itself have
       * allowMultiple set to true.
       * An example is "--test_tag_filters": this flag sets its converter to
       * CommaSeparatedOptionListConverter, but does not set allowMultiple to true.
       * So "--test_tag_filters=foo,bar" results in ["foo", "bar"], however
       * "--test_tag_filters=foo --test_tag_filters=bar" results in just ["bar"]
       * since the 2nd value overrides the 1st.
       * Similarly, "--test_tag_filters=foo,bar --test_tag_filters=baz,qux" results
       * in ["baz", "qux"]. For flags like these, the policy should specify
       * "foo,bar" instead of separately specifying "foo" and "bar" so that the
       * converter is appropriately invoked.
       * Note that the opposite is not necessarily
       * true: for a flag that specifies allowMultiple=true, "--flag=foo,bar"
       * may fail to parse or result in an unexpected value.
       * </pre>
       *
       * <code>repeated string flag_value = 1;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getFlagValueList() {
        return flagValue_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Use this value for the specified flag, overriding any default or user-set
       * value (unless append is set to true for repeatable flags).
       * This field is repeated for repeatable flags. It is an error to set
       * multiple values for a flag that is not actually a repeatable flag.
       * This requires at least 1 value, if even the empty string.
       * If the flag allows multiple values, all of its values are replaced with the
       * value or values from the policy (i.e., no diffing or merging is performed),
       * unless the append field (see below) is set to true.
       * Note that some flags are tricky. For example, some flags look like boolean
       * flags, but are actually Void expansion flags that expand into other flags.
       * The Bazel flag parser will accept "--void_flag=false", but because
       * the flag is Void, the "=false" is ignored. It can get even trickier, like
       * "--novoid_flag" which is also an expansion flag with the type Void whose
       * name is explicitly "novoid_flag" and which expands into other flags that
       * are the opposite of "--void_flag". For expansion flags, it's best to
       * explicitly override the flags they expand into.
       * Other flags may be differently tricky: A flag could have a converter that
       * converts some string to a list of values, but that flag may not itself have
       * allowMultiple set to true.
       * An example is "--test_tag_filters": this flag sets its converter to
       * CommaSeparatedOptionListConverter, but does not set allowMultiple to true.
       * So "--test_tag_filters=foo,bar" results in ["foo", "bar"], however
       * "--test_tag_filters=foo --test_tag_filters=bar" results in just ["bar"]
       * since the 2nd value overrides the 1st.
       * Similarly, "--test_tag_filters=foo,bar --test_tag_filters=baz,qux" results
       * in ["baz", "qux"]. For flags like these, the policy should specify
       * "foo,bar" instead of separately specifying "foo" and "bar" so that the
       * converter is appropriately invoked.
       * Note that the opposite is not necessarily
       * true: for a flag that specifies allowMultiple=true, "--flag=foo,bar"
       * may fail to parse or result in an unexpected value.
       * </pre>
       *
       * <code>repeated string flag_value = 1;</code>
       */
      public int getFlagValueCount() {
        return flagValue_.size();
      }
      /**
       * <pre>
       * Use this value for the specified flag, overriding any default or user-set
       * value (unless append is set to true for repeatable flags).
       * This field is repeated for repeatable flags. It is an error to set
       * multiple values for a flag that is not actually a repeatable flag.
       * This requires at least 1 value, if even the empty string.
       * If the flag allows multiple values, all of its values are replaced with the
       * value or values from the policy (i.e., no diffing or merging is performed),
       * unless the append field (see below) is set to true.
       * Note that some flags are tricky. For example, some flags look like boolean
       * flags, but are actually Void expansion flags that expand into other flags.
       * The Bazel flag parser will accept "--void_flag=false", but because
       * the flag is Void, the "=false" is ignored. It can get even trickier, like
       * "--novoid_flag" which is also an expansion flag with the type Void whose
       * name is explicitly "novoid_flag" and which expands into other flags that
       * are the opposite of "--void_flag". For expansion flags, it's best to
       * explicitly override the flags they expand into.
       * Other flags may be differently tricky: A flag could have a converter that
       * converts some string to a list of values, but that flag may not itself have
       * allowMultiple set to true.
       * An example is "--test_tag_filters": this flag sets its converter to
       * CommaSeparatedOptionListConverter, but does not set allowMultiple to true.
       * So "--test_tag_filters=foo,bar" results in ["foo", "bar"], however
       * "--test_tag_filters=foo --test_tag_filters=bar" results in just ["bar"]
       * since the 2nd value overrides the 1st.
       * Similarly, "--test_tag_filters=foo,bar --test_tag_filters=baz,qux" results
       * in ["baz", "qux"]. For flags like these, the policy should specify
       * "foo,bar" instead of separately specifying "foo" and "bar" so that the
       * converter is appropriately invoked.
       * Note that the opposite is not necessarily
       * true: for a flag that specifies allowMultiple=true, "--flag=foo,bar"
       * may fail to parse or result in an unexpected value.
       * </pre>
       *
       * <code>repeated string flag_value = 1;</code>
       */
      public java.lang.String getFlagValue(int index) {
        return flagValue_.get(index);
      }
      /**
       * <pre>
       * Use this value for the specified flag, overriding any default or user-set
       * value (unless append is set to true for repeatable flags).
       * This field is repeated for repeatable flags. It is an error to set
       * multiple values for a flag that is not actually a repeatable flag.
       * This requires at least 1 value, if even the empty string.
       * If the flag allows multiple values, all of its values are replaced with the
       * value or values from the policy (i.e., no diffing or merging is performed),
       * unless the append field (see below) is set to true.
       * Note that some flags are tricky. For example, some flags look like boolean
       * flags, but are actually Void expansion flags that expand into other flags.
       * The Bazel flag parser will accept "--void_flag=false", but because
       * the flag is Void, the "=false" is ignored. It can get even trickier, like
       * "--novoid_flag" which is also an expansion flag with the type Void whose
       * name is explicitly "novoid_flag" and which expands into other flags that
       * are the opposite of "--void_flag". For expansion flags, it's best to
       * explicitly override the flags they expand into.
       * Other flags may be differently tricky: A flag could have a converter that
       * converts some string to a list of values, but that flag may not itself have
       * allowMultiple set to true.
       * An example is "--test_tag_filters": this flag sets its converter to
       * CommaSeparatedOptionListConverter, but does not set allowMultiple to true.
       * So "--test_tag_filters=foo,bar" results in ["foo", "bar"], however
       * "--test_tag_filters=foo --test_tag_filters=bar" results in just ["bar"]
       * since the 2nd value overrides the 1st.
       * Similarly, "--test_tag_filters=foo,bar --test_tag_filters=baz,qux" results
       * in ["baz", "qux"]. For flags like these, the policy should specify
       * "foo,bar" instead of separately specifying "foo" and "bar" so that the
       * converter is appropriately invoked.
       * Note that the opposite is not necessarily
       * true: for a flag that specifies allowMultiple=true, "--flag=foo,bar"
       * may fail to parse or result in an unexpected value.
       * </pre>
       *
       * <code>repeated string flag_value = 1;</code>
       */
      public com.google.protobuf.ByteString
          getFlagValueBytes(int index) {
        return flagValue_.getByteString(index);
      }
      /**
       * <pre>
       * Use this value for the specified flag, overriding any default or user-set
       * value (unless append is set to true for repeatable flags).
       * This field is repeated for repeatable flags. It is an error to set
       * multiple values for a flag that is not actually a repeatable flag.
       * This requires at least 1 value, if even the empty string.
       * If the flag allows multiple values, all of its values are replaced with the
       * value or values from the policy (i.e., no diffing or merging is performed),
       * unless the append field (see below) is set to true.
       * Note that some flags are tricky. For example, some flags look like boolean
       * flags, but are actually Void expansion flags that expand into other flags.
       * The Bazel flag parser will accept "--void_flag=false", but because
       * the flag is Void, the "=false" is ignored. It can get even trickier, like
       * "--novoid_flag" which is also an expansion flag with the type Void whose
       * name is explicitly "novoid_flag" and which expands into other flags that
       * are the opposite of "--void_flag". For expansion flags, it's best to
       * explicitly override the flags they expand into.
       * Other flags may be differently tricky: A flag could have a converter that
       * converts some string to a list of values, but that flag may not itself have
       * allowMultiple set to true.
       * An example is "--test_tag_filters": this flag sets its converter to
       * CommaSeparatedOptionListConverter, but does not set allowMultiple to true.
       * So "--test_tag_filters=foo,bar" results in ["foo", "bar"], however
       * "--test_tag_filters=foo --test_tag_filters=bar" results in just ["bar"]
       * since the 2nd value overrides the 1st.
       * Similarly, "--test_tag_filters=foo,bar --test_tag_filters=baz,qux" results
       * in ["baz", "qux"]. For flags like these, the policy should specify
       * "foo,bar" instead of separately specifying "foo" and "bar" so that the
       * converter is appropriately invoked.
       * Note that the opposite is not necessarily
       * true: for a flag that specifies allowMultiple=true, "--flag=foo,bar"
       * may fail to parse or result in an unexpected value.
       * </pre>
       *
       * <code>repeated string flag_value = 1;</code>
       */
      public Builder setFlagValue(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureFlagValueIsMutable();
        flagValue_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Use this value for the specified flag, overriding any default or user-set
       * value (unless append is set to true for repeatable flags).
       * This field is repeated for repeatable flags. It is an error to set
       * multiple values for a flag that is not actually a repeatable flag.
       * This requires at least 1 value, if even the empty string.
       * If the flag allows multiple values, all of its values are replaced with the
       * value or values from the policy (i.e., no diffing or merging is performed),
       * unless the append field (see below) is set to true.
       * Note that some flags are tricky. For example, some flags look like boolean
       * flags, but are actually Void expansion flags that expand into other flags.
       * The Bazel flag parser will accept "--void_flag=false", but because
       * the flag is Void, the "=false" is ignored. It can get even trickier, like
       * "--novoid_flag" which is also an expansion flag with the type Void whose
       * name is explicitly "novoid_flag" and which expands into other flags that
       * are the opposite of "--void_flag". For expansion flags, it's best to
       * explicitly override the flags they expand into.
       * Other flags may be differently tricky: A flag could have a converter that
       * converts some string to a list of values, but that flag may not itself have
       * allowMultiple set to true.
       * An example is "--test_tag_filters": this flag sets its converter to
       * CommaSeparatedOptionListConverter, but does not set allowMultiple to true.
       * So "--test_tag_filters=foo,bar" results in ["foo", "bar"], however
       * "--test_tag_filters=foo --test_tag_filters=bar" results in just ["bar"]
       * since the 2nd value overrides the 1st.
       * Similarly, "--test_tag_filters=foo,bar --test_tag_filters=baz,qux" results
       * in ["baz", "qux"]. For flags like these, the policy should specify
       * "foo,bar" instead of separately specifying "foo" and "bar" so that the
       * converter is appropriately invoked.
       * Note that the opposite is not necessarily
       * true: for a flag that specifies allowMultiple=true, "--flag=foo,bar"
       * may fail to parse or result in an unexpected value.
       * </pre>
       *
       * <code>repeated string flag_value = 1;</code>
       */
      public Builder addFlagValue(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureFlagValueIsMutable();
        flagValue_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Use this value for the specified flag, overriding any default or user-set
       * value (unless append is set to true for repeatable flags).
       * This field is repeated for repeatable flags. It is an error to set
       * multiple values for a flag that is not actually a repeatable flag.
       * This requires at least 1 value, if even the empty string.
       * If the flag allows multiple values, all of its values are replaced with the
       * value or values from the policy (i.e., no diffing or merging is performed),
       * unless the append field (see below) is set to true.
       * Note that some flags are tricky. For example, some flags look like boolean
       * flags, but are actually Void expansion flags that expand into other flags.
       * The Bazel flag parser will accept "--void_flag=false", but because
       * the flag is Void, the "=false" is ignored. It can get even trickier, like
       * "--novoid_flag" which is also an expansion flag with the type Void whose
       * name is explicitly "novoid_flag" and which expands into other flags that
       * are the opposite of "--void_flag". For expansion flags, it's best to
       * explicitly override the flags they expand into.
       * Other flags may be differently tricky: A flag could have a converter that
       * converts some string to a list of values, but that flag may not itself have
       * allowMultiple set to true.
       * An example is "--test_tag_filters": this flag sets its converter to
       * CommaSeparatedOptionListConverter, but does not set allowMultiple to true.
       * So "--test_tag_filters=foo,bar" results in ["foo", "bar"], however
       * "--test_tag_filters=foo --test_tag_filters=bar" results in just ["bar"]
       * since the 2nd value overrides the 1st.
       * Similarly, "--test_tag_filters=foo,bar --test_tag_filters=baz,qux" results
       * in ["baz", "qux"]. For flags like these, the policy should specify
       * "foo,bar" instead of separately specifying "foo" and "bar" so that the
       * converter is appropriately invoked.
       * Note that the opposite is not necessarily
       * true: for a flag that specifies allowMultiple=true, "--flag=foo,bar"
       * may fail to parse or result in an unexpected value.
       * </pre>
       *
       * <code>repeated string flag_value = 1;</code>
       */
      public Builder addAllFlagValue(
          java.lang.Iterable<java.lang.String> values) {
        ensureFlagValueIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, flagValue_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Use this value for the specified flag, overriding any default or user-set
       * value (unless append is set to true for repeatable flags).
       * This field is repeated for repeatable flags. It is an error to set
       * multiple values for a flag that is not actually a repeatable flag.
       * This requires at least 1 value, if even the empty string.
       * If the flag allows multiple values, all of its values are replaced with the
       * value or values from the policy (i.e., no diffing or merging is performed),
       * unless the append field (see below) is set to true.
       * Note that some flags are tricky. For example, some flags look like boolean
       * flags, but are actually Void expansion flags that expand into other flags.
       * The Bazel flag parser will accept "--void_flag=false", but because
       * the flag is Void, the "=false" is ignored. It can get even trickier, like
       * "--novoid_flag" which is also an expansion flag with the type Void whose
       * name is explicitly "novoid_flag" and which expands into other flags that
       * are the opposite of "--void_flag". For expansion flags, it's best to
       * explicitly override the flags they expand into.
       * Other flags may be differently tricky: A flag could have a converter that
       * converts some string to a list of values, but that flag may not itself have
       * allowMultiple set to true.
       * An example is "--test_tag_filters": this flag sets its converter to
       * CommaSeparatedOptionListConverter, but does not set allowMultiple to true.
       * So "--test_tag_filters=foo,bar" results in ["foo", "bar"], however
       * "--test_tag_filters=foo --test_tag_filters=bar" results in just ["bar"]
       * since the 2nd value overrides the 1st.
       * Similarly, "--test_tag_filters=foo,bar --test_tag_filters=baz,qux" results
       * in ["baz", "qux"]. For flags like these, the policy should specify
       * "foo,bar" instead of separately specifying "foo" and "bar" so that the
       * converter is appropriately invoked.
       * Note that the opposite is not necessarily
       * true: for a flag that specifies allowMultiple=true, "--flag=foo,bar"
       * may fail to parse or result in an unexpected value.
       * </pre>
       *
       * <code>repeated string flag_value = 1;</code>
       */
      public Builder clearFlagValue() {
        flagValue_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Use this value for the specified flag, overriding any default or user-set
       * value (unless append is set to true for repeatable flags).
       * This field is repeated for repeatable flags. It is an error to set
       * multiple values for a flag that is not actually a repeatable flag.
       * This requires at least 1 value, if even the empty string.
       * If the flag allows multiple values, all of its values are replaced with the
       * value or values from the policy (i.e., no diffing or merging is performed),
       * unless the append field (see below) is set to true.
       * Note that some flags are tricky. For example, some flags look like boolean
       * flags, but are actually Void expansion flags that expand into other flags.
       * The Bazel flag parser will accept "--void_flag=false", but because
       * the flag is Void, the "=false" is ignored. It can get even trickier, like
       * "--novoid_flag" which is also an expansion flag with the type Void whose
       * name is explicitly "novoid_flag" and which expands into other flags that
       * are the opposite of "--void_flag". For expansion flags, it's best to
       * explicitly override the flags they expand into.
       * Other flags may be differently tricky: A flag could have a converter that
       * converts some string to a list of values, but that flag may not itself have
       * allowMultiple set to true.
       * An example is "--test_tag_filters": this flag sets its converter to
       * CommaSeparatedOptionListConverter, but does not set allowMultiple to true.
       * So "--test_tag_filters=foo,bar" results in ["foo", "bar"], however
       * "--test_tag_filters=foo --test_tag_filters=bar" results in just ["bar"]
       * since the 2nd value overrides the 1st.
       * Similarly, "--test_tag_filters=foo,bar --test_tag_filters=baz,qux" results
       * in ["baz", "qux"]. For flags like these, the policy should specify
       * "foo,bar" instead of separately specifying "foo" and "bar" so that the
       * converter is appropriately invoked.
       * Note that the opposite is not necessarily
       * true: for a flag that specifies allowMultiple=true, "--flag=foo,bar"
       * may fail to parse or result in an unexpected value.
       * </pre>
       *
       * <code>repeated string flag_value = 1;</code>
       */
      public Builder addFlagValueBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureFlagValueIsMutable();
        flagValue_.add(value);
        onChanged();
        return this;
      }

      private boolean overridable_ ;
      /**
       * <pre>
       * Whether to allow this policy to be overridden by user-specified values.
       * When set, if the user specified a value for this flag, use the value
       * from the user, otherwise use the value specified in this policy.
       * </pre>
       *
       * <code>optional bool overridable = 2;</code>
       */
      public boolean hasOverridable() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * Whether to allow this policy to be overridden by user-specified values.
       * When set, if the user specified a value for this flag, use the value
       * from the user, otherwise use the value specified in this policy.
       * </pre>
       *
       * <code>optional bool overridable = 2;</code>
       */
      public boolean getOverridable() {
        return overridable_;
      }
      /**
       * <pre>
       * Whether to allow this policy to be overridden by user-specified values.
       * When set, if the user specified a value for this flag, use the value
       * from the user, otherwise use the value specified in this policy.
       * </pre>
       *
       * <code>optional bool overridable = 2;</code>
       */
      public Builder setOverridable(boolean value) {
        bitField0_ |= 0x00000002;
        overridable_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether to allow this policy to be overridden by user-specified values.
       * When set, if the user specified a value for this flag, use the value
       * from the user, otherwise use the value specified in this policy.
       * </pre>
       *
       * <code>optional bool overridable = 2;</code>
       */
      public Builder clearOverridable() {
        bitField0_ = (bitField0_ & ~0x00000002);
        overridable_ = false;
        onChanged();
        return this;
      }

      private boolean append_ ;
      /**
       * <pre>
       * If true, and if the flag named in the policy is a repeatable flag, then
       * the values listed in flag_value do not replace all the user-set or default
       * values of the flag, but instead append to them. If the flag is not
       * repeatable, then this has no effect.
       * </pre>
       *
       * <code>optional bool append = 3;</code>
       */
      public boolean hasAppend() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * If true, and if the flag named in the policy is a repeatable flag, then
       * the values listed in flag_value do not replace all the user-set or default
       * values of the flag, but instead append to them. If the flag is not
       * repeatable, then this has no effect.
       * </pre>
       *
       * <code>optional bool append = 3;</code>
       */
      public boolean getAppend() {
        return append_;
      }
      /**
       * <pre>
       * If true, and if the flag named in the policy is a repeatable flag, then
       * the values listed in flag_value do not replace all the user-set or default
       * values of the flag, but instead append to them. If the flag is not
       * repeatable, then this has no effect.
       * </pre>
       *
       * <code>optional bool append = 3;</code>
       */
      public Builder setAppend(boolean value) {
        bitField0_ |= 0x00000004;
        append_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If true, and if the flag named in the policy is a repeatable flag, then
       * the values listed in flag_value do not replace all the user-set or default
       * values of the flag, but instead append to them. If the flag is not
       * repeatable, then this has no effect.
       * </pre>
       *
       * <code>optional bool append = 3;</code>
       */
      public Builder clearAppend() {
        bitField0_ = (bitField0_ & ~0x00000004);
        append_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:blaze.invocation_policy.SetValue)
    }

    // @@protoc_insertion_point(class_scope:blaze.invocation_policy.SetValue)
    private static final com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue();
    }

    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<SetValue>
        PARSER = new com.google.protobuf.AbstractParser<SetValue>() {
      @java.lang.Override
      public SetValue parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SetValue(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SetValue> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SetValue> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.SetValue getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface UseDefaultOrBuilder extends
      // @@protoc_insertion_point(interface_extends:blaze.invocation_policy.UseDefault)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * <pre>
   * Use the default value of the flag, as defined by Bazel (or equivalently, do
   * not allow the user to set this flag).
   * Note on implementation: UseDefault sets the default by clearing the flag,
   * so that when the value is requested and no flag is found, the flag parser
   * returns the default. This is mostly relevant for expansion flags: it will
   * erase user values in *all* flags that the expansion flag expands to. Only
   * use this on expansion flags if this is acceptable behavior. Since the last
   * policy wins, later policies on this same flag will still remove the
   * expanded UseDefault, so there is a way around, but it's really best not to
   * use this on expansion flags at all.
   * </pre>
   *
   * Protobuf type {@code blaze.invocation_policy.UseDefault}
   */
  public  static final class UseDefault extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:blaze.invocation_policy.UseDefault)
      UseDefaultOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use UseDefault.newBuilder() to construct.
    private UseDefault(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private UseDefault() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private UseDefault(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.internal_static_blaze_invocation_policy_UseDefault_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.internal_static_blaze_invocation_policy_UseDefault_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.class, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault)) {
        return super.equals(obj);
      }
      com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault other = (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) obj;

      boolean result = true;
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Use the default value of the flag, as defined by Bazel (or equivalently, do
     * not allow the user to set this flag).
     * Note on implementation: UseDefault sets the default by clearing the flag,
     * so that when the value is requested and no flag is found, the flag parser
     * returns the default. This is mostly relevant for expansion flags: it will
     * erase user values in *all* flags that the expansion flag expands to. Only
     * use this on expansion flags if this is acceptable behavior. Since the last
     * policy wins, later policies on this same flag will still remove the
     * expanded UseDefault, so there is a way around, but it's really best not to
     * use this on expansion flags at all.
     * </pre>
     *
     * Protobuf type {@code blaze.invocation_policy.UseDefault}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:blaze.invocation_policy.UseDefault)
        com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefaultOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.internal_static_blaze_invocation_policy_UseDefault_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.internal_static_blaze_invocation_policy_UseDefault_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.class, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.Builder.class);
      }

      // Construct using com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.internal_static_blaze_invocation_policy_UseDefault_descriptor;
      }

      @java.lang.Override
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault getDefaultInstanceForType() {
        return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault build() {
        com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault buildPartial() {
        com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault result = new com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) {
          return mergeFrom((com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault other) {
        if (other == com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:blaze.invocation_policy.UseDefault)
    }

    // @@protoc_insertion_point(class_scope:blaze.invocation_policy.UseDefault)
    private static final com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault();
    }

    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<UseDefault>
        PARSER = new com.google.protobuf.AbstractParser<UseDefault>() {
      @java.lang.Override
      public UseDefault parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new UseDefault(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<UseDefault> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<UseDefault> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DisallowValuesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:blaze.invocation_policy.DisallowValues)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * It is an error for the user to use any of these values (that is, the Bazel
     * command will fail), unless new_value or use_default is set.
     * For repeatable flags, if any one of the values in the flag matches a value
     * in the list of disallowed values, an error is thrown.
     * Care must be taken for flags with complicated converters. For example,
     * it's possible for a repeated flag to be of type List&lt;List&lt;T&gt;&gt;, so that
     * "--foo=a,b --foo=c,d" results in foo=[["a","b"], ["c", "d"]]. In this case,
     * it is not possible to disallow just "b", nor will ["b", "a"] match, nor
     * will ["b", "c"] (but ["a", "b"] will still match).
     * </pre>
     *
     * <code>repeated string disallowed_values = 1;</code>
     */
    java.util.List<java.lang.String>
        getDisallowedValuesList();
    /**
     * <pre>
     * It is an error for the user to use any of these values (that is, the Bazel
     * command will fail), unless new_value or use_default is set.
     * For repeatable flags, if any one of the values in the flag matches a value
     * in the list of disallowed values, an error is thrown.
     * Care must be taken for flags with complicated converters. For example,
     * it's possible for a repeated flag to be of type List&lt;List&lt;T&gt;&gt;, so that
     * "--foo=a,b --foo=c,d" results in foo=[["a","b"], ["c", "d"]]. In this case,
     * it is not possible to disallow just "b", nor will ["b", "a"] match, nor
     * will ["b", "c"] (but ["a", "b"] will still match).
     * </pre>
     *
     * <code>repeated string disallowed_values = 1;</code>
     */
    int getDisallowedValuesCount();
    /**
     * <pre>
     * It is an error for the user to use any of these values (that is, the Bazel
     * command will fail), unless new_value or use_default is set.
     * For repeatable flags, if any one of the values in the flag matches a value
     * in the list of disallowed values, an error is thrown.
     * Care must be taken for flags with complicated converters. For example,
     * it's possible for a repeated flag to be of type List&lt;List&lt;T&gt;&gt;, so that
     * "--foo=a,b --foo=c,d" results in foo=[["a","b"], ["c", "d"]]. In this case,
     * it is not possible to disallow just "b", nor will ["b", "a"] match, nor
     * will ["b", "c"] (but ["a", "b"] will still match).
     * </pre>
     *
     * <code>repeated string disallowed_values = 1;</code>
     */
    java.lang.String getDisallowedValues(int index);
    /**
     * <pre>
     * It is an error for the user to use any of these values (that is, the Bazel
     * command will fail), unless new_value or use_default is set.
     * For repeatable flags, if any one of the values in the flag matches a value
     * in the list of disallowed values, an error is thrown.
     * Care must be taken for flags with complicated converters. For example,
     * it's possible for a repeated flag to be of type List&lt;List&lt;T&gt;&gt;, so that
     * "--foo=a,b --foo=c,d" results in foo=[["a","b"], ["c", "d"]]. In this case,
     * it is not possible to disallow just "b", nor will ["b", "a"] match, nor
     * will ["b", "c"] (but ["a", "b"] will still match).
     * </pre>
     *
     * <code>repeated string disallowed_values = 1;</code>
     */
    com.google.protobuf.ByteString
        getDisallowedValuesBytes(int index);

    /**
     * <pre>
     * If set and if the value of the flag is disallowed (including the default
     * value of the flag if the user doesn't specify a value), use this value as
     * the value of the flag instead of raising an error. This does not apply to
     * repeatable flags and is ignored if the flag is a repeatable flag.
     * </pre>
     *
     * <code>optional string new_value = 3;</code>
     */
    boolean hasNewValue();
    /**
     * <pre>
     * If set and if the value of the flag is disallowed (including the default
     * value of the flag if the user doesn't specify a value), use this value as
     * the value of the flag instead of raising an error. This does not apply to
     * repeatable flags and is ignored if the flag is a repeatable flag.
     * </pre>
     *
     * <code>optional string new_value = 3;</code>
     */
    java.lang.String getNewValue();
    /**
     * <pre>
     * If set and if the value of the flag is disallowed (including the default
     * value of the flag if the user doesn't specify a value), use this value as
     * the value of the flag instead of raising an error. This does not apply to
     * repeatable flags and is ignored if the flag is a repeatable flag.
     * </pre>
     *
     * <code>optional string new_value = 3;</code>
     */
    com.google.protobuf.ByteString
        getNewValueBytes();

    /**
     * <pre>
     * If set and if the value of the flag is disallowed, use the default value
     * of the flag instead of raising an error. Unlike new_value, this works for
     * repeatable flags, but note that the default value for repeatable flags is
     * always empty.
     * Note that it is an error to disallow the default value of the flag and
     * to set use_default, unless the flag is a repeatable flag where the
     * default value is always the empty list.
     * </pre>
     *
     * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
     */
    boolean hasUseDefault();
    /**
     * <pre>
     * If set and if the value of the flag is disallowed, use the default value
     * of the flag instead of raising an error. Unlike new_value, this works for
     * repeatable flags, but note that the default value for repeatable flags is
     * always empty.
     * Note that it is an error to disallow the default value of the flag and
     * to set use_default, unless the flag is a repeatable flag where the
     * default value is always the empty list.
     * </pre>
     *
     * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
     */
    com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault getUseDefault();
    /**
     * <pre>
     * If set and if the value of the flag is disallowed, use the default value
     * of the flag instead of raising an error. Unlike new_value, this works for
     * repeatable flags, but note that the default value for repeatable flags is
     * always empty.
     * Note that it is an error to disallow the default value of the flag and
     * to set use_default, unless the flag is a repeatable flag where the
     * default value is always the empty list.
     * </pre>
     *
     * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
     */
    com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefaultOrBuilder getUseDefaultOrBuilder();

    public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues.ReplacementValueCase getReplacementValueCase();
  }
  /**
   * Protobuf type {@code blaze.invocation_policy.DisallowValues}
   */
  public  static final class DisallowValues extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:blaze.invocation_policy.DisallowValues)
      DisallowValuesOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DisallowValues.newBuilder() to construct.
    private DisallowValues(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DisallowValues() {
      disallowedValues_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private DisallowValues(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                disallowedValues_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              disallowedValues_.add(bs);
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              replacementValueCase_ = 3;
              replacementValue_ = bs;
              break;
            }
            case 34: {
              com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.Builder subBuilder = null;
              if (replacementValueCase_ == 4) {
                subBuilder = ((com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) replacementValue_).toBuilder();
              }
              replacementValue_ =
                  input.readMessage(com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) replacementValue_);
                replacementValue_ = subBuilder.buildPartial();
              }
              replacementValueCase_ = 4;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          disallowedValues_ = disallowedValues_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.internal_static_blaze_invocation_policy_DisallowValues_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.internal_static_blaze_invocation_policy_DisallowValues_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues.class, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues.Builder.class);
    }

    private int bitField0_;
    private int replacementValueCase_ = 0;
    private java.lang.Object replacementValue_;
    public enum ReplacementValueCase
        implements com.google.protobuf.Internal.EnumLite {
      NEW_VALUE(3),
      USE_DEFAULT(4),
      REPLACEMENTVALUE_NOT_SET(0);
      private final int value;
      private ReplacementValueCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ReplacementValueCase valueOf(int value) {
        return forNumber(value);
      }

      public static ReplacementValueCase forNumber(int value) {
        switch (value) {
          case 3: return NEW_VALUE;
          case 4: return USE_DEFAULT;
          case 0: return REPLACEMENTVALUE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ReplacementValueCase
    getReplacementValueCase() {
      return ReplacementValueCase.forNumber(
          replacementValueCase_);
    }

    public static final int DISALLOWED_VALUES_FIELD_NUMBER = 1;
    private com.google.protobuf.LazyStringList disallowedValues_;
    /**
     * <pre>
     * It is an error for the user to use any of these values (that is, the Bazel
     * command will fail), unless new_value or use_default is set.
     * For repeatable flags, if any one of the values in the flag matches a value
     * in the list of disallowed values, an error is thrown.
     * Care must be taken for flags with complicated converters. For example,
     * it's possible for a repeated flag to be of type List&lt;List&lt;T&gt;&gt;, so that
     * "--foo=a,b --foo=c,d" results in foo=[["a","b"], ["c", "d"]]. In this case,
     * it is not possible to disallow just "b", nor will ["b", "a"] match, nor
     * will ["b", "c"] (but ["a", "b"] will still match).
     * </pre>
     *
     * <code>repeated string disallowed_values = 1;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getDisallowedValuesList() {
      return disallowedValues_;
    }
    /**
     * <pre>
     * It is an error for the user to use any of these values (that is, the Bazel
     * command will fail), unless new_value or use_default is set.
     * For repeatable flags, if any one of the values in the flag matches a value
     * in the list of disallowed values, an error is thrown.
     * Care must be taken for flags with complicated converters. For example,
     * it's possible for a repeated flag to be of type List&lt;List&lt;T&gt;&gt;, so that
     * "--foo=a,b --foo=c,d" results in foo=[["a","b"], ["c", "d"]]. In this case,
     * it is not possible to disallow just "b", nor will ["b", "a"] match, nor
     * will ["b", "c"] (but ["a", "b"] will still match).
     * </pre>
     *
     * <code>repeated string disallowed_values = 1;</code>
     */
    public int getDisallowedValuesCount() {
      return disallowedValues_.size();
    }
    /**
     * <pre>
     * It is an error for the user to use any of these values (that is, the Bazel
     * command will fail), unless new_value or use_default is set.
     * For repeatable flags, if any one of the values in the flag matches a value
     * in the list of disallowed values, an error is thrown.
     * Care must be taken for flags with complicated converters. For example,
     * it's possible for a repeated flag to be of type List&lt;List&lt;T&gt;&gt;, so that
     * "--foo=a,b --foo=c,d" results in foo=[["a","b"], ["c", "d"]]. In this case,
     * it is not possible to disallow just "b", nor will ["b", "a"] match, nor
     * will ["b", "c"] (but ["a", "b"] will still match).
     * </pre>
     *
     * <code>repeated string disallowed_values = 1;</code>
     */
    public java.lang.String getDisallowedValues(int index) {
      return disallowedValues_.get(index);
    }
    /**
     * <pre>
     * It is an error for the user to use any of these values (that is, the Bazel
     * command will fail), unless new_value or use_default is set.
     * For repeatable flags, if any one of the values in the flag matches a value
     * in the list of disallowed values, an error is thrown.
     * Care must be taken for flags with complicated converters. For example,
     * it's possible for a repeated flag to be of type List&lt;List&lt;T&gt;&gt;, so that
     * "--foo=a,b --foo=c,d" results in foo=[["a","b"], ["c", "d"]]. In this case,
     * it is not possible to disallow just "b", nor will ["b", "a"] match, nor
     * will ["b", "c"] (but ["a", "b"] will still match).
     * </pre>
     *
     * <code>repeated string disallowed_values = 1;</code>
     */
    public com.google.protobuf.ByteString
        getDisallowedValuesBytes(int index) {
      return disallowedValues_.getByteString(index);
    }

    public static final int NEW_VALUE_FIELD_NUMBER = 3;
    /**
     * <pre>
     * If set and if the value of the flag is disallowed (including the default
     * value of the flag if the user doesn't specify a value), use this value as
     * the value of the flag instead of raising an error. This does not apply to
     * repeatable flags and is ignored if the flag is a repeatable flag.
     * </pre>
     *
     * <code>optional string new_value = 3;</code>
     */
    public boolean hasNewValue() {
      return replacementValueCase_ == 3;
    }
    /**
     * <pre>
     * If set and if the value of the flag is disallowed (including the default
     * value of the flag if the user doesn't specify a value), use this value as
     * the value of the flag instead of raising an error. This does not apply to
     * repeatable flags and is ignored if the flag is a repeatable flag.
     * </pre>
     *
     * <code>optional string new_value = 3;</code>
     */
    public java.lang.String getNewValue() {
      java.lang.Object ref = "";
      if (replacementValueCase_ == 3) {
        ref = replacementValue_;
      }
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8() && (replacementValueCase_ == 3)) {
          replacementValue_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * If set and if the value of the flag is disallowed (including the default
     * value of the flag if the user doesn't specify a value), use this value as
     * the value of the flag instead of raising an error. This does not apply to
     * repeatable flags and is ignored if the flag is a repeatable flag.
     * </pre>
     *
     * <code>optional string new_value = 3;</code>
     */
    public com.google.protobuf.ByteString
        getNewValueBytes() {
      java.lang.Object ref = "";
      if (replacementValueCase_ == 3) {
        ref = replacementValue_;
      }
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (replacementValueCase_ == 3) {
          replacementValue_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int USE_DEFAULT_FIELD_NUMBER = 4;
    /**
     * <pre>
     * If set and if the value of the flag is disallowed, use the default value
     * of the flag instead of raising an error. Unlike new_value, this works for
     * repeatable flags, but note that the default value for repeatable flags is
     * always empty.
     * Note that it is an error to disallow the default value of the flag and
     * to set use_default, unless the flag is a repeatable flag where the
     * default value is always the empty list.
     * </pre>
     *
     * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
     */
    public boolean hasUseDefault() {
      return replacementValueCase_ == 4;
    }
    /**
     * <pre>
     * If set and if the value of the flag is disallowed, use the default value
     * of the flag instead of raising an error. Unlike new_value, this works for
     * repeatable flags, but note that the default value for repeatable flags is
     * always empty.
     * Note that it is an error to disallow the default value of the flag and
     * to set use_default, unless the flag is a repeatable flag where the
     * default value is always the empty list.
     * </pre>
     *
     * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
     */
    public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault getUseDefault() {
      if (replacementValueCase_ == 4) {
         return (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) replacementValue_;
      }
      return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.getDefaultInstance();
    }
    /**
     * <pre>
     * If set and if the value of the flag is disallowed, use the default value
     * of the flag instead of raising an error. Unlike new_value, this works for
     * repeatable flags, but note that the default value for repeatable flags is
     * always empty.
     * Note that it is an error to disallow the default value of the flag and
     * to set use_default, unless the flag is a repeatable flag where the
     * default value is always the empty list.
     * </pre>
     *
     * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
     */
    public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefaultOrBuilder getUseDefaultOrBuilder() {
      if (replacementValueCase_ == 4) {
         return (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) replacementValue_;
      }
      return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < disallowedValues_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, disallowedValues_.getRaw(i));
      }
      if (replacementValueCase_ == 3) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, replacementValue_);
      }
      if (replacementValueCase_ == 4) {
        output.writeMessage(4, (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) replacementValue_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < disallowedValues_.size(); i++) {
          dataSize += computeStringSizeNoTag(disallowedValues_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getDisallowedValuesList().size();
      }
      if (replacementValueCase_ == 3) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, replacementValue_);
      }
      if (replacementValueCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) replacementValue_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues)) {
        return super.equals(obj);
      }
      com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues other = (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues) obj;

      boolean result = true;
      result = result && getDisallowedValuesList()
          .equals(other.getDisallowedValuesList());
      result = result && getReplacementValueCase().equals(
          other.getReplacementValueCase());
      if (!result) return false;
      switch (replacementValueCase_) {
        case 3:
          result = result && getNewValue()
              .equals(other.getNewValue());
          break;
        case 4:
          result = result && getUseDefault()
              .equals(other.getUseDefault());
          break;
        case 0:
        default:
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getDisallowedValuesCount() > 0) {
        hash = (37 * hash) + DISALLOWED_VALUES_FIELD_NUMBER;
        hash = (53 * hash) + getDisallowedValuesList().hashCode();
      }
      switch (replacementValueCase_) {
        case 3:
          hash = (37 * hash) + NEW_VALUE_FIELD_NUMBER;
          hash = (53 * hash) + getNewValue().hashCode();
          break;
        case 4:
          hash = (37 * hash) + USE_DEFAULT_FIELD_NUMBER;
          hash = (53 * hash) + getUseDefault().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code blaze.invocation_policy.DisallowValues}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:blaze.invocation_policy.DisallowValues)
        com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValuesOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.internal_static_blaze_invocation_policy_DisallowValues_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.internal_static_blaze_invocation_policy_DisallowValues_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues.class, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues.Builder.class);
      }

      // Construct using com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        disallowedValues_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        replacementValueCase_ = 0;
        replacementValue_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.internal_static_blaze_invocation_policy_DisallowValues_descriptor;
      }

      @java.lang.Override
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues getDefaultInstanceForType() {
        return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues build() {
        com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues buildPartial() {
        com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues result = new com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          disallowedValues_ = disallowedValues_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.disallowedValues_ = disallowedValues_;
        if (replacementValueCase_ == 3) {
          result.replacementValue_ = replacementValue_;
        }
        if (replacementValueCase_ == 4) {
          if (useDefaultBuilder_ == null) {
            result.replacementValue_ = replacementValue_;
          } else {
            result.replacementValue_ = useDefaultBuilder_.build();
          }
        }
        result.bitField0_ = to_bitField0_;
        result.replacementValueCase_ = replacementValueCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues) {
          return mergeFrom((com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues other) {
        if (other == com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues.getDefaultInstance()) return this;
        if (!other.disallowedValues_.isEmpty()) {
          if (disallowedValues_.isEmpty()) {
            disallowedValues_ = other.disallowedValues_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureDisallowedValuesIsMutable();
            disallowedValues_.addAll(other.disallowedValues_);
          }
          onChanged();
        }
        switch (other.getReplacementValueCase()) {
          case NEW_VALUE: {
            replacementValueCase_ = 3;
            replacementValue_ = other.replacementValue_;
            onChanged();
            break;
          }
          case USE_DEFAULT: {
            mergeUseDefault(other.getUseDefault());
            break;
          }
          case REPLACEMENTVALUE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int replacementValueCase_ = 0;
      private java.lang.Object replacementValue_;
      public ReplacementValueCase
          getReplacementValueCase() {
        return ReplacementValueCase.forNumber(
            replacementValueCase_);
      }

      public Builder clearReplacementValue() {
        replacementValueCase_ = 0;
        replacementValue_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private com.google.protobuf.LazyStringList disallowedValues_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureDisallowedValuesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          disallowedValues_ = new com.google.protobuf.LazyStringArrayList(disallowedValues_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * It is an error for the user to use any of these values (that is, the Bazel
       * command will fail), unless new_value or use_default is set.
       * For repeatable flags, if any one of the values in the flag matches a value
       * in the list of disallowed values, an error is thrown.
       * Care must be taken for flags with complicated converters. For example,
       * it's possible for a repeated flag to be of type List&lt;List&lt;T&gt;&gt;, so that
       * "--foo=a,b --foo=c,d" results in foo=[["a","b"], ["c", "d"]]. In this case,
       * it is not possible to disallow just "b", nor will ["b", "a"] match, nor
       * will ["b", "c"] (but ["a", "b"] will still match).
       * </pre>
       *
       * <code>repeated string disallowed_values = 1;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getDisallowedValuesList() {
        return disallowedValues_.getUnmodifiableView();
      }
      /**
       * <pre>
       * It is an error for the user to use any of these values (that is, the Bazel
       * command will fail), unless new_value or use_default is set.
       * For repeatable flags, if any one of the values in the flag matches a value
       * in the list of disallowed values, an error is thrown.
       * Care must be taken for flags with complicated converters. For example,
       * it's possible for a repeated flag to be of type List&lt;List&lt;T&gt;&gt;, so that
       * "--foo=a,b --foo=c,d" results in foo=[["a","b"], ["c", "d"]]. In this case,
       * it is not possible to disallow just "b", nor will ["b", "a"] match, nor
       * will ["b", "c"] (but ["a", "b"] will still match).
       * </pre>
       *
       * <code>repeated string disallowed_values = 1;</code>
       */
      public int getDisallowedValuesCount() {
        return disallowedValues_.size();
      }
      /**
       * <pre>
       * It is an error for the user to use any of these values (that is, the Bazel
       * command will fail), unless new_value or use_default is set.
       * For repeatable flags, if any one of the values in the flag matches a value
       * in the list of disallowed values, an error is thrown.
       * Care must be taken for flags with complicated converters. For example,
       * it's possible for a repeated flag to be of type List&lt;List&lt;T&gt;&gt;, so that
       * "--foo=a,b --foo=c,d" results in foo=[["a","b"], ["c", "d"]]. In this case,
       * it is not possible to disallow just "b", nor will ["b", "a"] match, nor
       * will ["b", "c"] (but ["a", "b"] will still match).
       * </pre>
       *
       * <code>repeated string disallowed_values = 1;</code>
       */
      public java.lang.String getDisallowedValues(int index) {
        return disallowedValues_.get(index);
      }
      /**
       * <pre>
       * It is an error for the user to use any of these values (that is, the Bazel
       * command will fail), unless new_value or use_default is set.
       * For repeatable flags, if any one of the values in the flag matches a value
       * in the list of disallowed values, an error is thrown.
       * Care must be taken for flags with complicated converters. For example,
       * it's possible for a repeated flag to be of type List&lt;List&lt;T&gt;&gt;, so that
       * "--foo=a,b --foo=c,d" results in foo=[["a","b"], ["c", "d"]]. In this case,
       * it is not possible to disallow just "b", nor will ["b", "a"] match, nor
       * will ["b", "c"] (but ["a", "b"] will still match).
       * </pre>
       *
       * <code>repeated string disallowed_values = 1;</code>
       */
      public com.google.protobuf.ByteString
          getDisallowedValuesBytes(int index) {
        return disallowedValues_.getByteString(index);
      }
      /**
       * <pre>
       * It is an error for the user to use any of these values (that is, the Bazel
       * command will fail), unless new_value or use_default is set.
       * For repeatable flags, if any one of the values in the flag matches a value
       * in the list of disallowed values, an error is thrown.
       * Care must be taken for flags with complicated converters. For example,
       * it's possible for a repeated flag to be of type List&lt;List&lt;T&gt;&gt;, so that
       * "--foo=a,b --foo=c,d" results in foo=[["a","b"], ["c", "d"]]. In this case,
       * it is not possible to disallow just "b", nor will ["b", "a"] match, nor
       * will ["b", "c"] (but ["a", "b"] will still match).
       * </pre>
       *
       * <code>repeated string disallowed_values = 1;</code>
       */
      public Builder setDisallowedValues(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDisallowedValuesIsMutable();
        disallowedValues_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * It is an error for the user to use any of these values (that is, the Bazel
       * command will fail), unless new_value or use_default is set.
       * For repeatable flags, if any one of the values in the flag matches a value
       * in the list of disallowed values, an error is thrown.
       * Care must be taken for flags with complicated converters. For example,
       * it's possible for a repeated flag to be of type List&lt;List&lt;T&gt;&gt;, so that
       * "--foo=a,b --foo=c,d" results in foo=[["a","b"], ["c", "d"]]. In this case,
       * it is not possible to disallow just "b", nor will ["b", "a"] match, nor
       * will ["b", "c"] (but ["a", "b"] will still match).
       * </pre>
       *
       * <code>repeated string disallowed_values = 1;</code>
       */
      public Builder addDisallowedValues(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDisallowedValuesIsMutable();
        disallowedValues_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * It is an error for the user to use any of these values (that is, the Bazel
       * command will fail), unless new_value or use_default is set.
       * For repeatable flags, if any one of the values in the flag matches a value
       * in the list of disallowed values, an error is thrown.
       * Care must be taken for flags with complicated converters. For example,
       * it's possible for a repeated flag to be of type List&lt;List&lt;T&gt;&gt;, so that
       * "--foo=a,b --foo=c,d" results in foo=[["a","b"], ["c", "d"]]. In this case,
       * it is not possible to disallow just "b", nor will ["b", "a"] match, nor
       * will ["b", "c"] (but ["a", "b"] will still match).
       * </pre>
       *
       * <code>repeated string disallowed_values = 1;</code>
       */
      public Builder addAllDisallowedValues(
          java.lang.Iterable<java.lang.String> values) {
        ensureDisallowedValuesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, disallowedValues_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * It is an error for the user to use any of these values (that is, the Bazel
       * command will fail), unless new_value or use_default is set.
       * For repeatable flags, if any one of the values in the flag matches a value
       * in the list of disallowed values, an error is thrown.
       * Care must be taken for flags with complicated converters. For example,
       * it's possible for a repeated flag to be of type List&lt;List&lt;T&gt;&gt;, so that
       * "--foo=a,b --foo=c,d" results in foo=[["a","b"], ["c", "d"]]. In this case,
       * it is not possible to disallow just "b", nor will ["b", "a"] match, nor
       * will ["b", "c"] (but ["a", "b"] will still match).
       * </pre>
       *
       * <code>repeated string disallowed_values = 1;</code>
       */
      public Builder clearDisallowedValues() {
        disallowedValues_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * It is an error for the user to use any of these values (that is, the Bazel
       * command will fail), unless new_value or use_default is set.
       * For repeatable flags, if any one of the values in the flag matches a value
       * in the list of disallowed values, an error is thrown.
       * Care must be taken for flags with complicated converters. For example,
       * it's possible for a repeated flag to be of type List&lt;List&lt;T&gt;&gt;, so that
       * "--foo=a,b --foo=c,d" results in foo=[["a","b"], ["c", "d"]]. In this case,
       * it is not possible to disallow just "b", nor will ["b", "a"] match, nor
       * will ["b", "c"] (but ["a", "b"] will still match).
       * </pre>
       *
       * <code>repeated string disallowed_values = 1;</code>
       */
      public Builder addDisallowedValuesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDisallowedValuesIsMutable();
        disallowedValues_.add(value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       * If set and if the value of the flag is disallowed (including the default
       * value of the flag if the user doesn't specify a value), use this value as
       * the value of the flag instead of raising an error. This does not apply to
       * repeatable flags and is ignored if the flag is a repeatable flag.
       * </pre>
       *
       * <code>optional string new_value = 3;</code>
       */
      public boolean hasNewValue() {
        return replacementValueCase_ == 3;
      }
      /**
       * <pre>
       * If set and if the value of the flag is disallowed (including the default
       * value of the flag if the user doesn't specify a value), use this value as
       * the value of the flag instead of raising an error. This does not apply to
       * repeatable flags and is ignored if the flag is a repeatable flag.
       * </pre>
       *
       * <code>optional string new_value = 3;</code>
       */
      public java.lang.String getNewValue() {
        java.lang.Object ref = "";
        if (replacementValueCase_ == 3) {
          ref = replacementValue_;
        }
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (replacementValueCase_ == 3) {
            if (bs.isValidUtf8()) {
              replacementValue_ = s;
            }
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * If set and if the value of the flag is disallowed (including the default
       * value of the flag if the user doesn't specify a value), use this value as
       * the value of the flag instead of raising an error. This does not apply to
       * repeatable flags and is ignored if the flag is a repeatable flag.
       * </pre>
       *
       * <code>optional string new_value = 3;</code>
       */
      public com.google.protobuf.ByteString
          getNewValueBytes() {
        java.lang.Object ref = "";
        if (replacementValueCase_ == 3) {
          ref = replacementValue_;
        }
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          if (replacementValueCase_ == 3) {
            replacementValue_ = b;
          }
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * If set and if the value of the flag is disallowed (including the default
       * value of the flag if the user doesn't specify a value), use this value as
       * the value of the flag instead of raising an error. This does not apply to
       * repeatable flags and is ignored if the flag is a repeatable flag.
       * </pre>
       *
       * <code>optional string new_value = 3;</code>
       */
      public Builder setNewValue(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  replacementValueCase_ = 3;
        replacementValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If set and if the value of the flag is disallowed (including the default
       * value of the flag if the user doesn't specify a value), use this value as
       * the value of the flag instead of raising an error. This does not apply to
       * repeatable flags and is ignored if the flag is a repeatable flag.
       * </pre>
       *
       * <code>optional string new_value = 3;</code>
       */
      public Builder clearNewValue() {
        if (replacementValueCase_ == 3) {
          replacementValueCase_ = 0;
          replacementValue_ = null;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * If set and if the value of the flag is disallowed (including the default
       * value of the flag if the user doesn't specify a value), use this value as
       * the value of the flag instead of raising an error. This does not apply to
       * repeatable flags and is ignored if the flag is a repeatable flag.
       * </pre>
       *
       * <code>optional string new_value = 3;</code>
       */
      public Builder setNewValueBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  replacementValueCase_ = 3;
        replacementValue_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.Builder, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefaultOrBuilder> useDefaultBuilder_;
      /**
       * <pre>
       * If set and if the value of the flag is disallowed, use the default value
       * of the flag instead of raising an error. Unlike new_value, this works for
       * repeatable flags, but note that the default value for repeatable flags is
       * always empty.
       * Note that it is an error to disallow the default value of the flag and
       * to set use_default, unless the flag is a repeatable flag where the
       * default value is always the empty list.
       * </pre>
       *
       * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
       */
      public boolean hasUseDefault() {
        return replacementValueCase_ == 4;
      }
      /**
       * <pre>
       * If set and if the value of the flag is disallowed, use the default value
       * of the flag instead of raising an error. Unlike new_value, this works for
       * repeatable flags, but note that the default value for repeatable flags is
       * always empty.
       * Note that it is an error to disallow the default value of the flag and
       * to set use_default, unless the flag is a repeatable flag where the
       * default value is always the empty list.
       * </pre>
       *
       * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
       */
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault getUseDefault() {
        if (useDefaultBuilder_ == null) {
          if (replacementValueCase_ == 4) {
            return (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) replacementValue_;
          }
          return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.getDefaultInstance();
        } else {
          if (replacementValueCase_ == 4) {
            return useDefaultBuilder_.getMessage();
          }
          return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * If set and if the value of the flag is disallowed, use the default value
       * of the flag instead of raising an error. Unlike new_value, this works for
       * repeatable flags, but note that the default value for repeatable flags is
       * always empty.
       * Note that it is an error to disallow the default value of the flag and
       * to set use_default, unless the flag is a repeatable flag where the
       * default value is always the empty list.
       * </pre>
       *
       * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
       */
      public Builder setUseDefault(com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault value) {
        if (useDefaultBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          replacementValue_ = value;
          onChanged();
        } else {
          useDefaultBuilder_.setMessage(value);
        }
        replacementValueCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * If set and if the value of the flag is disallowed, use the default value
       * of the flag instead of raising an error. Unlike new_value, this works for
       * repeatable flags, but note that the default value for repeatable flags is
       * always empty.
       * Note that it is an error to disallow the default value of the flag and
       * to set use_default, unless the flag is a repeatable flag where the
       * default value is always the empty list.
       * </pre>
       *
       * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
       */
      public Builder setUseDefault(
          com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.Builder builderForValue) {
        if (useDefaultBuilder_ == null) {
          replacementValue_ = builderForValue.build();
          onChanged();
        } else {
          useDefaultBuilder_.setMessage(builderForValue.build());
        }
        replacementValueCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * If set and if the value of the flag is disallowed, use the default value
       * of the flag instead of raising an error. Unlike new_value, this works for
       * repeatable flags, but note that the default value for repeatable flags is
       * always empty.
       * Note that it is an error to disallow the default value of the flag and
       * to set use_default, unless the flag is a repeatable flag where the
       * default value is always the empty list.
       * </pre>
       *
       * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
       */
      public Builder mergeUseDefault(com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault value) {
        if (useDefaultBuilder_ == null) {
          if (replacementValueCase_ == 4 &&
              replacementValue_ != com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.getDefaultInstance()) {
            replacementValue_ = com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.newBuilder((com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) replacementValue_)
                .mergeFrom(value).buildPartial();
          } else {
            replacementValue_ = value;
          }
          onChanged();
        } else {
          if (replacementValueCase_ == 4) {
            useDefaultBuilder_.mergeFrom(value);
          }
          useDefaultBuilder_.setMessage(value);
        }
        replacementValueCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * If set and if the value of the flag is disallowed, use the default value
       * of the flag instead of raising an error. Unlike new_value, this works for
       * repeatable flags, but note that the default value for repeatable flags is
       * always empty.
       * Note that it is an error to disallow the default value of the flag and
       * to set use_default, unless the flag is a repeatable flag where the
       * default value is always the empty list.
       * </pre>
       *
       * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
       */
      public Builder clearUseDefault() {
        if (useDefaultBuilder_ == null) {
          if (replacementValueCase_ == 4) {
            replacementValueCase_ = 0;
            replacementValue_ = null;
            onChanged();
          }
        } else {
          if (replacementValueCase_ == 4) {
            replacementValueCase_ = 0;
            replacementValue_ = null;
          }
          useDefaultBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * If set and if the value of the flag is disallowed, use the default value
       * of the flag instead of raising an error. Unlike new_value, this works for
       * repeatable flags, but note that the default value for repeatable flags is
       * always empty.
       * Note that it is an error to disallow the default value of the flag and
       * to set use_default, unless the flag is a repeatable flag where the
       * default value is always the empty list.
       * </pre>
       *
       * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
       */
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.Builder getUseDefaultBuilder() {
        return getUseDefaultFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * If set and if the value of the flag is disallowed, use the default value
       * of the flag instead of raising an error. Unlike new_value, this works for
       * repeatable flags, but note that the default value for repeatable flags is
       * always empty.
       * Note that it is an error to disallow the default value of the flag and
       * to set use_default, unless the flag is a repeatable flag where the
       * default value is always the empty list.
       * </pre>
       *
       * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
       */
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefaultOrBuilder getUseDefaultOrBuilder() {
        if ((replacementValueCase_ == 4) && (useDefaultBuilder_ != null)) {
          return useDefaultBuilder_.getMessageOrBuilder();
        } else {
          if (replacementValueCase_ == 4) {
            return (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) replacementValue_;
          }
          return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * If set and if the value of the flag is disallowed, use the default value
       * of the flag instead of raising an error. Unlike new_value, this works for
       * repeatable flags, but note that the default value for repeatable flags is
       * always empty.
       * Note that it is an error to disallow the default value of the flag and
       * to set use_default, unless the flag is a repeatable flag where the
       * default value is always the empty list.
       * </pre>
       *
       * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.Builder, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefaultOrBuilder> 
          getUseDefaultFieldBuilder() {
        if (useDefaultBuilder_ == null) {
          if (!(replacementValueCase_ == 4)) {
            replacementValue_ = com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.getDefaultInstance();
          }
          useDefaultBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.Builder, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefaultOrBuilder>(
                  (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) replacementValue_,
                  getParentForChildren(),
                  isClean());
          replacementValue_ = null;
        }
        replacementValueCase_ = 4;
        onChanged();;
        return useDefaultBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:blaze.invocation_policy.DisallowValues)
    }

    // @@protoc_insertion_point(class_scope:blaze.invocation_policy.DisallowValues)
    private static final com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues();
    }

    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<DisallowValues>
        PARSER = new com.google.protobuf.AbstractParser<DisallowValues>() {
      @java.lang.Override
      public DisallowValues parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DisallowValues(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DisallowValues> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DisallowValues> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.DisallowValues getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface AllowValuesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:blaze.invocation_policy.AllowValues)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * It is an error for the user to use any value not in this list, unless
     * new_value or use_default is set.
     * </pre>
     *
     * <code>repeated string allowed_values = 1;</code>
     */
    java.util.List<java.lang.String>
        getAllowedValuesList();
    /**
     * <pre>
     * It is an error for the user to use any value not in this list, unless
     * new_value or use_default is set.
     * </pre>
     *
     * <code>repeated string allowed_values = 1;</code>
     */
    int getAllowedValuesCount();
    /**
     * <pre>
     * It is an error for the user to use any value not in this list, unless
     * new_value or use_default is set.
     * </pre>
     *
     * <code>repeated string allowed_values = 1;</code>
     */
    java.lang.String getAllowedValues(int index);
    /**
     * <pre>
     * It is an error for the user to use any value not in this list, unless
     * new_value or use_default is set.
     * </pre>
     *
     * <code>repeated string allowed_values = 1;</code>
     */
    com.google.protobuf.ByteString
        getAllowedValuesBytes(int index);

    /**
     * <pre>
     * If set and if the value of the flag is disallowed (including the default
     * value of the flag if the user doesn't specify a value), use this value as
     * the value of the flag instead of raising an error. This does not apply to
     * repeatable flags and is ignored if the flag is a repeatable flag.
     * </pre>
     *
     * <code>optional string new_value = 3;</code>
     */
    boolean hasNewValue();
    /**
     * <pre>
     * If set and if the value of the flag is disallowed (including the default
     * value of the flag if the user doesn't specify a value), use this value as
     * the value of the flag instead of raising an error. This does not apply to
     * repeatable flags and is ignored if the flag is a repeatable flag.
     * </pre>
     *
     * <code>optional string new_value = 3;</code>
     */
    java.lang.String getNewValue();
    /**
     * <pre>
     * If set and if the value of the flag is disallowed (including the default
     * value of the flag if the user doesn't specify a value), use this value as
     * the value of the flag instead of raising an error. This does not apply to
     * repeatable flags and is ignored if the flag is a repeatable flag.
     * </pre>
     *
     * <code>optional string new_value = 3;</code>
     */
    com.google.protobuf.ByteString
        getNewValueBytes();

    /**
     * <pre>
     * If set and if the value of the flag is disallowed, use the default value
     * of the flag instead of raising an error. Unlike new_value, this works for
     * repeatable flags, but note that the default value for repeatable flags is
     * always empty.
     * Note that it is an error to disallow the default value of the flag and
     * to set use_default, unless the flag is a repeatable flag where the
     * default value is always the empty list.
     * </pre>
     *
     * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
     */
    boolean hasUseDefault();
    /**
     * <pre>
     * If set and if the value of the flag is disallowed, use the default value
     * of the flag instead of raising an error. Unlike new_value, this works for
     * repeatable flags, but note that the default value for repeatable flags is
     * always empty.
     * Note that it is an error to disallow the default value of the flag and
     * to set use_default, unless the flag is a repeatable flag where the
     * default value is always the empty list.
     * </pre>
     *
     * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
     */
    com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault getUseDefault();
    /**
     * <pre>
     * If set and if the value of the flag is disallowed, use the default value
     * of the flag instead of raising an error. Unlike new_value, this works for
     * repeatable flags, but note that the default value for repeatable flags is
     * always empty.
     * Note that it is an error to disallow the default value of the flag and
     * to set use_default, unless the flag is a repeatable flag where the
     * default value is always the empty list.
     * </pre>
     *
     * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
     */
    com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefaultOrBuilder getUseDefaultOrBuilder();

    public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues.ReplacementValueCase getReplacementValueCase();
  }
  /**
   * Protobuf type {@code blaze.invocation_policy.AllowValues}
   */
  public  static final class AllowValues extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:blaze.invocation_policy.AllowValues)
      AllowValuesOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use AllowValues.newBuilder() to construct.
    private AllowValues(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private AllowValues() {
      allowedValues_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private AllowValues(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                allowedValues_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              allowedValues_.add(bs);
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              replacementValueCase_ = 3;
              replacementValue_ = bs;
              break;
            }
            case 34: {
              com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.Builder subBuilder = null;
              if (replacementValueCase_ == 4) {
                subBuilder = ((com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) replacementValue_).toBuilder();
              }
              replacementValue_ =
                  input.readMessage(com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) replacementValue_);
                replacementValue_ = subBuilder.buildPartial();
              }
              replacementValueCase_ = 4;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          allowedValues_ = allowedValues_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.internal_static_blaze_invocation_policy_AllowValues_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.internal_static_blaze_invocation_policy_AllowValues_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues.class, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues.Builder.class);
    }

    private int bitField0_;
    private int replacementValueCase_ = 0;
    private java.lang.Object replacementValue_;
    public enum ReplacementValueCase
        implements com.google.protobuf.Internal.EnumLite {
      NEW_VALUE(3),
      USE_DEFAULT(4),
      REPLACEMENTVALUE_NOT_SET(0);
      private final int value;
      private ReplacementValueCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ReplacementValueCase valueOf(int value) {
        return forNumber(value);
      }

      public static ReplacementValueCase forNumber(int value) {
        switch (value) {
          case 3: return NEW_VALUE;
          case 4: return USE_DEFAULT;
          case 0: return REPLACEMENTVALUE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ReplacementValueCase
    getReplacementValueCase() {
      return ReplacementValueCase.forNumber(
          replacementValueCase_);
    }

    public static final int ALLOWED_VALUES_FIELD_NUMBER = 1;
    private com.google.protobuf.LazyStringList allowedValues_;
    /**
     * <pre>
     * It is an error for the user to use any value not in this list, unless
     * new_value or use_default is set.
     * </pre>
     *
     * <code>repeated string allowed_values = 1;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getAllowedValuesList() {
      return allowedValues_;
    }
    /**
     * <pre>
     * It is an error for the user to use any value not in this list, unless
     * new_value or use_default is set.
     * </pre>
     *
     * <code>repeated string allowed_values = 1;</code>
     */
    public int getAllowedValuesCount() {
      return allowedValues_.size();
    }
    /**
     * <pre>
     * It is an error for the user to use any value not in this list, unless
     * new_value or use_default is set.
     * </pre>
     *
     * <code>repeated string allowed_values = 1;</code>
     */
    public java.lang.String getAllowedValues(int index) {
      return allowedValues_.get(index);
    }
    /**
     * <pre>
     * It is an error for the user to use any value not in this list, unless
     * new_value or use_default is set.
     * </pre>
     *
     * <code>repeated string allowed_values = 1;</code>
     */
    public com.google.protobuf.ByteString
        getAllowedValuesBytes(int index) {
      return allowedValues_.getByteString(index);
    }

    public static final int NEW_VALUE_FIELD_NUMBER = 3;
    /**
     * <pre>
     * If set and if the value of the flag is disallowed (including the default
     * value of the flag if the user doesn't specify a value), use this value as
     * the value of the flag instead of raising an error. This does not apply to
     * repeatable flags and is ignored if the flag is a repeatable flag.
     * </pre>
     *
     * <code>optional string new_value = 3;</code>
     */
    public boolean hasNewValue() {
      return replacementValueCase_ == 3;
    }
    /**
     * <pre>
     * If set and if the value of the flag is disallowed (including the default
     * value of the flag if the user doesn't specify a value), use this value as
     * the value of the flag instead of raising an error. This does not apply to
     * repeatable flags and is ignored if the flag is a repeatable flag.
     * </pre>
     *
     * <code>optional string new_value = 3;</code>
     */
    public java.lang.String getNewValue() {
      java.lang.Object ref = "";
      if (replacementValueCase_ == 3) {
        ref = replacementValue_;
      }
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8() && (replacementValueCase_ == 3)) {
          replacementValue_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * If set and if the value of the flag is disallowed (including the default
     * value of the flag if the user doesn't specify a value), use this value as
     * the value of the flag instead of raising an error. This does not apply to
     * repeatable flags and is ignored if the flag is a repeatable flag.
     * </pre>
     *
     * <code>optional string new_value = 3;</code>
     */
    public com.google.protobuf.ByteString
        getNewValueBytes() {
      java.lang.Object ref = "";
      if (replacementValueCase_ == 3) {
        ref = replacementValue_;
      }
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (replacementValueCase_ == 3) {
          replacementValue_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int USE_DEFAULT_FIELD_NUMBER = 4;
    /**
     * <pre>
     * If set and if the value of the flag is disallowed, use the default value
     * of the flag instead of raising an error. Unlike new_value, this works for
     * repeatable flags, but note that the default value for repeatable flags is
     * always empty.
     * Note that it is an error to disallow the default value of the flag and
     * to set use_default, unless the flag is a repeatable flag where the
     * default value is always the empty list.
     * </pre>
     *
     * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
     */
    public boolean hasUseDefault() {
      return replacementValueCase_ == 4;
    }
    /**
     * <pre>
     * If set and if the value of the flag is disallowed, use the default value
     * of the flag instead of raising an error. Unlike new_value, this works for
     * repeatable flags, but note that the default value for repeatable flags is
     * always empty.
     * Note that it is an error to disallow the default value of the flag and
     * to set use_default, unless the flag is a repeatable flag where the
     * default value is always the empty list.
     * </pre>
     *
     * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
     */
    public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault getUseDefault() {
      if (replacementValueCase_ == 4) {
         return (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) replacementValue_;
      }
      return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.getDefaultInstance();
    }
    /**
     * <pre>
     * If set and if the value of the flag is disallowed, use the default value
     * of the flag instead of raising an error. Unlike new_value, this works for
     * repeatable flags, but note that the default value for repeatable flags is
     * always empty.
     * Note that it is an error to disallow the default value of the flag and
     * to set use_default, unless the flag is a repeatable flag where the
     * default value is always the empty list.
     * </pre>
     *
     * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
     */
    public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefaultOrBuilder getUseDefaultOrBuilder() {
      if (replacementValueCase_ == 4) {
         return (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) replacementValue_;
      }
      return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < allowedValues_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, allowedValues_.getRaw(i));
      }
      if (replacementValueCase_ == 3) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, replacementValue_);
      }
      if (replacementValueCase_ == 4) {
        output.writeMessage(4, (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) replacementValue_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < allowedValues_.size(); i++) {
          dataSize += computeStringSizeNoTag(allowedValues_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getAllowedValuesList().size();
      }
      if (replacementValueCase_ == 3) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, replacementValue_);
      }
      if (replacementValueCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) replacementValue_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues)) {
        return super.equals(obj);
      }
      com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues other = (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues) obj;

      boolean result = true;
      result = result && getAllowedValuesList()
          .equals(other.getAllowedValuesList());
      result = result && getReplacementValueCase().equals(
          other.getReplacementValueCase());
      if (!result) return false;
      switch (replacementValueCase_) {
        case 3:
          result = result && getNewValue()
              .equals(other.getNewValue());
          break;
        case 4:
          result = result && getUseDefault()
              .equals(other.getUseDefault());
          break;
        case 0:
        default:
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getAllowedValuesCount() > 0) {
        hash = (37 * hash) + ALLOWED_VALUES_FIELD_NUMBER;
        hash = (53 * hash) + getAllowedValuesList().hashCode();
      }
      switch (replacementValueCase_) {
        case 3:
          hash = (37 * hash) + NEW_VALUE_FIELD_NUMBER;
          hash = (53 * hash) + getNewValue().hashCode();
          break;
        case 4:
          hash = (37 * hash) + USE_DEFAULT_FIELD_NUMBER;
          hash = (53 * hash) + getUseDefault().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code blaze.invocation_policy.AllowValues}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:blaze.invocation_policy.AllowValues)
        com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValuesOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.internal_static_blaze_invocation_policy_AllowValues_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.internal_static_blaze_invocation_policy_AllowValues_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues.class, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues.Builder.class);
      }

      // Construct using com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        allowedValues_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        replacementValueCase_ = 0;
        replacementValue_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.internal_static_blaze_invocation_policy_AllowValues_descriptor;
      }

      @java.lang.Override
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues getDefaultInstanceForType() {
        return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues build() {
        com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues buildPartial() {
        com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues result = new com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          allowedValues_ = allowedValues_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.allowedValues_ = allowedValues_;
        if (replacementValueCase_ == 3) {
          result.replacementValue_ = replacementValue_;
        }
        if (replacementValueCase_ == 4) {
          if (useDefaultBuilder_ == null) {
            result.replacementValue_ = replacementValue_;
          } else {
            result.replacementValue_ = useDefaultBuilder_.build();
          }
        }
        result.bitField0_ = to_bitField0_;
        result.replacementValueCase_ = replacementValueCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues) {
          return mergeFrom((com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues other) {
        if (other == com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues.getDefaultInstance()) return this;
        if (!other.allowedValues_.isEmpty()) {
          if (allowedValues_.isEmpty()) {
            allowedValues_ = other.allowedValues_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureAllowedValuesIsMutable();
            allowedValues_.addAll(other.allowedValues_);
          }
          onChanged();
        }
        switch (other.getReplacementValueCase()) {
          case NEW_VALUE: {
            replacementValueCase_ = 3;
            replacementValue_ = other.replacementValue_;
            onChanged();
            break;
          }
          case USE_DEFAULT: {
            mergeUseDefault(other.getUseDefault());
            break;
          }
          case REPLACEMENTVALUE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int replacementValueCase_ = 0;
      private java.lang.Object replacementValue_;
      public ReplacementValueCase
          getReplacementValueCase() {
        return ReplacementValueCase.forNumber(
            replacementValueCase_);
      }

      public Builder clearReplacementValue() {
        replacementValueCase_ = 0;
        replacementValue_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private com.google.protobuf.LazyStringList allowedValues_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureAllowedValuesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          allowedValues_ = new com.google.protobuf.LazyStringArrayList(allowedValues_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * It is an error for the user to use any value not in this list, unless
       * new_value or use_default is set.
       * </pre>
       *
       * <code>repeated string allowed_values = 1;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getAllowedValuesList() {
        return allowedValues_.getUnmodifiableView();
      }
      /**
       * <pre>
       * It is an error for the user to use any value not in this list, unless
       * new_value or use_default is set.
       * </pre>
       *
       * <code>repeated string allowed_values = 1;</code>
       */
      public int getAllowedValuesCount() {
        return allowedValues_.size();
      }
      /**
       * <pre>
       * It is an error for the user to use any value not in this list, unless
       * new_value or use_default is set.
       * </pre>
       *
       * <code>repeated string allowed_values = 1;</code>
       */
      public java.lang.String getAllowedValues(int index) {
        return allowedValues_.get(index);
      }
      /**
       * <pre>
       * It is an error for the user to use any value not in this list, unless
       * new_value or use_default is set.
       * </pre>
       *
       * <code>repeated string allowed_values = 1;</code>
       */
      public com.google.protobuf.ByteString
          getAllowedValuesBytes(int index) {
        return allowedValues_.getByteString(index);
      }
      /**
       * <pre>
       * It is an error for the user to use any value not in this list, unless
       * new_value or use_default is set.
       * </pre>
       *
       * <code>repeated string allowed_values = 1;</code>
       */
      public Builder setAllowedValues(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureAllowedValuesIsMutable();
        allowedValues_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * It is an error for the user to use any value not in this list, unless
       * new_value or use_default is set.
       * </pre>
       *
       * <code>repeated string allowed_values = 1;</code>
       */
      public Builder addAllowedValues(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureAllowedValuesIsMutable();
        allowedValues_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * It is an error for the user to use any value not in this list, unless
       * new_value or use_default is set.
       * </pre>
       *
       * <code>repeated string allowed_values = 1;</code>
       */
      public Builder addAllAllowedValues(
          java.lang.Iterable<java.lang.String> values) {
        ensureAllowedValuesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, allowedValues_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * It is an error for the user to use any value not in this list, unless
       * new_value or use_default is set.
       * </pre>
       *
       * <code>repeated string allowed_values = 1;</code>
       */
      public Builder clearAllowedValues() {
        allowedValues_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * It is an error for the user to use any value not in this list, unless
       * new_value or use_default is set.
       * </pre>
       *
       * <code>repeated string allowed_values = 1;</code>
       */
      public Builder addAllowedValuesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureAllowedValuesIsMutable();
        allowedValues_.add(value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       * If set and if the value of the flag is disallowed (including the default
       * value of the flag if the user doesn't specify a value), use this value as
       * the value of the flag instead of raising an error. This does not apply to
       * repeatable flags and is ignored if the flag is a repeatable flag.
       * </pre>
       *
       * <code>optional string new_value = 3;</code>
       */
      public boolean hasNewValue() {
        return replacementValueCase_ == 3;
      }
      /**
       * <pre>
       * If set and if the value of the flag is disallowed (including the default
       * value of the flag if the user doesn't specify a value), use this value as
       * the value of the flag instead of raising an error. This does not apply to
       * repeatable flags and is ignored if the flag is a repeatable flag.
       * </pre>
       *
       * <code>optional string new_value = 3;</code>
       */
      public java.lang.String getNewValue() {
        java.lang.Object ref = "";
        if (replacementValueCase_ == 3) {
          ref = replacementValue_;
        }
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (replacementValueCase_ == 3) {
            if (bs.isValidUtf8()) {
              replacementValue_ = s;
            }
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * If set and if the value of the flag is disallowed (including the default
       * value of the flag if the user doesn't specify a value), use this value as
       * the value of the flag instead of raising an error. This does not apply to
       * repeatable flags and is ignored if the flag is a repeatable flag.
       * </pre>
       *
       * <code>optional string new_value = 3;</code>
       */
      public com.google.protobuf.ByteString
          getNewValueBytes() {
        java.lang.Object ref = "";
        if (replacementValueCase_ == 3) {
          ref = replacementValue_;
        }
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          if (replacementValueCase_ == 3) {
            replacementValue_ = b;
          }
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * If set and if the value of the flag is disallowed (including the default
       * value of the flag if the user doesn't specify a value), use this value as
       * the value of the flag instead of raising an error. This does not apply to
       * repeatable flags and is ignored if the flag is a repeatable flag.
       * </pre>
       *
       * <code>optional string new_value = 3;</code>
       */
      public Builder setNewValue(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  replacementValueCase_ = 3;
        replacementValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If set and if the value of the flag is disallowed (including the default
       * value of the flag if the user doesn't specify a value), use this value as
       * the value of the flag instead of raising an error. This does not apply to
       * repeatable flags and is ignored if the flag is a repeatable flag.
       * </pre>
       *
       * <code>optional string new_value = 3;</code>
       */
      public Builder clearNewValue() {
        if (replacementValueCase_ == 3) {
          replacementValueCase_ = 0;
          replacementValue_ = null;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * If set and if the value of the flag is disallowed (including the default
       * value of the flag if the user doesn't specify a value), use this value as
       * the value of the flag instead of raising an error. This does not apply to
       * repeatable flags and is ignored if the flag is a repeatable flag.
       * </pre>
       *
       * <code>optional string new_value = 3;</code>
       */
      public Builder setNewValueBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  replacementValueCase_ = 3;
        replacementValue_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.Builder, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefaultOrBuilder> useDefaultBuilder_;
      /**
       * <pre>
       * If set and if the value of the flag is disallowed, use the default value
       * of the flag instead of raising an error. Unlike new_value, this works for
       * repeatable flags, but note that the default value for repeatable flags is
       * always empty.
       * Note that it is an error to disallow the default value of the flag and
       * to set use_default, unless the flag is a repeatable flag where the
       * default value is always the empty list.
       * </pre>
       *
       * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
       */
      public boolean hasUseDefault() {
        return replacementValueCase_ == 4;
      }
      /**
       * <pre>
       * If set and if the value of the flag is disallowed, use the default value
       * of the flag instead of raising an error. Unlike new_value, this works for
       * repeatable flags, but note that the default value for repeatable flags is
       * always empty.
       * Note that it is an error to disallow the default value of the flag and
       * to set use_default, unless the flag is a repeatable flag where the
       * default value is always the empty list.
       * </pre>
       *
       * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
       */
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault getUseDefault() {
        if (useDefaultBuilder_ == null) {
          if (replacementValueCase_ == 4) {
            return (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) replacementValue_;
          }
          return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.getDefaultInstance();
        } else {
          if (replacementValueCase_ == 4) {
            return useDefaultBuilder_.getMessage();
          }
          return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * If set and if the value of the flag is disallowed, use the default value
       * of the flag instead of raising an error. Unlike new_value, this works for
       * repeatable flags, but note that the default value for repeatable flags is
       * always empty.
       * Note that it is an error to disallow the default value of the flag and
       * to set use_default, unless the flag is a repeatable flag where the
       * default value is always the empty list.
       * </pre>
       *
       * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
       */
      public Builder setUseDefault(com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault value) {
        if (useDefaultBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          replacementValue_ = value;
          onChanged();
        } else {
          useDefaultBuilder_.setMessage(value);
        }
        replacementValueCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * If set and if the value of the flag is disallowed, use the default value
       * of the flag instead of raising an error. Unlike new_value, this works for
       * repeatable flags, but note that the default value for repeatable flags is
       * always empty.
       * Note that it is an error to disallow the default value of the flag and
       * to set use_default, unless the flag is a repeatable flag where the
       * default value is always the empty list.
       * </pre>
       *
       * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
       */
      public Builder setUseDefault(
          com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.Builder builderForValue) {
        if (useDefaultBuilder_ == null) {
          replacementValue_ = builderForValue.build();
          onChanged();
        } else {
          useDefaultBuilder_.setMessage(builderForValue.build());
        }
        replacementValueCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * If set and if the value of the flag is disallowed, use the default value
       * of the flag instead of raising an error. Unlike new_value, this works for
       * repeatable flags, but note that the default value for repeatable flags is
       * always empty.
       * Note that it is an error to disallow the default value of the flag and
       * to set use_default, unless the flag is a repeatable flag where the
       * default value is always the empty list.
       * </pre>
       *
       * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
       */
      public Builder mergeUseDefault(com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault value) {
        if (useDefaultBuilder_ == null) {
          if (replacementValueCase_ == 4 &&
              replacementValue_ != com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.getDefaultInstance()) {
            replacementValue_ = com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.newBuilder((com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) replacementValue_)
                .mergeFrom(value).buildPartial();
          } else {
            replacementValue_ = value;
          }
          onChanged();
        } else {
          if (replacementValueCase_ == 4) {
            useDefaultBuilder_.mergeFrom(value);
          }
          useDefaultBuilder_.setMessage(value);
        }
        replacementValueCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * If set and if the value of the flag is disallowed, use the default value
       * of the flag instead of raising an error. Unlike new_value, this works for
       * repeatable flags, but note that the default value for repeatable flags is
       * always empty.
       * Note that it is an error to disallow the default value of the flag and
       * to set use_default, unless the flag is a repeatable flag where the
       * default value is always the empty list.
       * </pre>
       *
       * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
       */
      public Builder clearUseDefault() {
        if (useDefaultBuilder_ == null) {
          if (replacementValueCase_ == 4) {
            replacementValueCase_ = 0;
            replacementValue_ = null;
            onChanged();
          }
        } else {
          if (replacementValueCase_ == 4) {
            replacementValueCase_ = 0;
            replacementValue_ = null;
          }
          useDefaultBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * If set and if the value of the flag is disallowed, use the default value
       * of the flag instead of raising an error. Unlike new_value, this works for
       * repeatable flags, but note that the default value for repeatable flags is
       * always empty.
       * Note that it is an error to disallow the default value of the flag and
       * to set use_default, unless the flag is a repeatable flag where the
       * default value is always the empty list.
       * </pre>
       *
       * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
       */
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.Builder getUseDefaultBuilder() {
        return getUseDefaultFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * If set and if the value of the flag is disallowed, use the default value
       * of the flag instead of raising an error. Unlike new_value, this works for
       * repeatable flags, but note that the default value for repeatable flags is
       * always empty.
       * Note that it is an error to disallow the default value of the flag and
       * to set use_default, unless the flag is a repeatable flag where the
       * default value is always the empty list.
       * </pre>
       *
       * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
       */
      public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefaultOrBuilder getUseDefaultOrBuilder() {
        if ((replacementValueCase_ == 4) && (useDefaultBuilder_ != null)) {
          return useDefaultBuilder_.getMessageOrBuilder();
        } else {
          if (replacementValueCase_ == 4) {
            return (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) replacementValue_;
          }
          return com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * If set and if the value of the flag is disallowed, use the default value
       * of the flag instead of raising an error. Unlike new_value, this works for
       * repeatable flags, but note that the default value for repeatable flags is
       * always empty.
       * Note that it is an error to disallow the default value of the flag and
       * to set use_default, unless the flag is a repeatable flag where the
       * default value is always the empty list.
       * </pre>
       *
       * <code>optional .blaze.invocation_policy.UseDefault use_default = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.Builder, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefaultOrBuilder> 
          getUseDefaultFieldBuilder() {
        if (useDefaultBuilder_ == null) {
          if (!(replacementValueCase_ == 4)) {
            replacementValue_ = com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.getDefaultInstance();
          }
          useDefaultBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault.Builder, com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefaultOrBuilder>(
                  (com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.UseDefault) replacementValue_,
                  getParentForChildren(),
                  isClean());
          replacementValue_ = null;
        }
        replacementValueCase_ = 4;
        onChanged();;
        return useDefaultBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:blaze.invocation_policy.AllowValues)
    }

    // @@protoc_insertion_point(class_scope:blaze.invocation_policy.AllowValues)
    private static final com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues();
    }

    public static com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<AllowValues>
        PARSER = new com.google.protobuf.AbstractParser<AllowValues>() {
      @java.lang.Override
      public AllowValues parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AllowValues(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<AllowValues> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<AllowValues> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.AllowValues getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_blaze_invocation_policy_InvocationPolicy_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_blaze_invocation_policy_InvocationPolicy_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_blaze_invocation_policy_FlagPolicy_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_blaze_invocation_policy_FlagPolicy_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_blaze_invocation_policy_SetValue_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_blaze_invocation_policy_SetValue_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_blaze_invocation_policy_UseDefault_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_blaze_invocation_policy_UseDefault_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_blaze_invocation_policy_DisallowValues_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_blaze_invocation_policy_DisallowValues_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_blaze_invocation_policy_AllowValues_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_blaze_invocation_policy_AllowValues_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n)src/main/protobuf/invocation_policy.pr" +
      "oto\022\027blaze.invocation_policy\"N\n\020Invocati" +
      "onPolicy\022:\n\rflag_policies\030\001 \003(\0132#.blaze." +
      "invocation_policy.FlagPolicy\"\264\002\n\nFlagPol" +
      "icy\022\021\n\tflag_name\030\001 \001(\t\022\020\n\010commands\030\002 \003(\t" +
      "\0226\n\tset_value\030\003 \001(\0132!.blaze.invocation_p" +
      "olicy.SetValueH\000\022:\n\013use_default\030\004 \001(\0132#." +
      "blaze.invocation_policy.UseDefaultH\000\022B\n\017" +
      "disallow_values\030\005 \001(\0132\'.blaze.invocation" +
      "_policy.DisallowValuesH\000\022<\n\014allow_values" +
      "\030\006 \001(\0132$.blaze.invocation_policy.AllowVa" +
      "luesH\000B\013\n\toperation\"C\n\010SetValue\022\022\n\nflag_" +
      "value\030\001 \003(\t\022\023\n\013overridable\030\002 \001(\010\022\016\n\006appe" +
      "nd\030\003 \001(\010\"\014\n\nUseDefault\"\227\001\n\016DisallowValue" +
      "s\022\031\n\021disallowed_values\030\001 \003(\t\022\023\n\tnew_valu" +
      "e\030\003 \001(\tH\000\022:\n\013use_default\030\004 \001(\0132#.blaze.i" +
      "nvocation_policy.UseDefaultH\000B\023\n\021replace" +
      "ment_valueJ\004\010\002\020\003\"\221\001\n\013AllowValues\022\026\n\016allo" +
      "wed_values\030\001 \003(\t\022\023\n\tnew_value\030\003 \001(\tH\000\022:\n" +
      "\013use_default\030\004 \001(\0132#.blaze.invocation_po" +
      "licy.UseDefaultH\000B\023\n\021replacement_valueJ\004" +
      "\010\002\020\003B-\n+com.google.devtools.build.lib.ru" +
      "ntime.proto"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_blaze_invocation_policy_InvocationPolicy_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_blaze_invocation_policy_InvocationPolicy_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_blaze_invocation_policy_InvocationPolicy_descriptor,
        new java.lang.String[] { "FlagPolicies", });
    internal_static_blaze_invocation_policy_FlagPolicy_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_blaze_invocation_policy_FlagPolicy_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_blaze_invocation_policy_FlagPolicy_descriptor,
        new java.lang.String[] { "FlagName", "Commands", "SetValue", "UseDefault", "DisallowValues", "AllowValues", "Operation", });
    internal_static_blaze_invocation_policy_SetValue_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_blaze_invocation_policy_SetValue_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_blaze_invocation_policy_SetValue_descriptor,
        new java.lang.String[] { "FlagValue", "Overridable", "Append", });
    internal_static_blaze_invocation_policy_UseDefault_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_blaze_invocation_policy_UseDefault_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_blaze_invocation_policy_UseDefault_descriptor,
        new java.lang.String[] { });
    internal_static_blaze_invocation_policy_DisallowValues_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_blaze_invocation_policy_DisallowValues_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_blaze_invocation_policy_DisallowValues_descriptor,
        new java.lang.String[] { "DisallowedValues", "NewValue", "UseDefault", "ReplacementValue", });
    internal_static_blaze_invocation_policy_AllowValues_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_blaze_invocation_policy_AllowValues_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_blaze_invocation_policy_AllowValues_descriptor,
        new java.lang.String[] { "AllowedValues", "NewValue", "UseDefault", "ReplacementValue", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
