// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/main/protobuf/plmerge.proto

package com.google.devtools.build.xcode.plmerge.proto;

public final class PlMergeProtos {
  private PlMergeProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ControlOrBuilder extends
      // @@protoc_insertion_point(interface_extends:devtools.xcode.Control)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Paths to the plist files to merge relative to execution root.
     * </pre>
     *
     * <code>repeated string source_file = 1;</code>
     */
    java.util.List<java.lang.String>
        getSourceFileList();
    /**
     * <pre>
     * Paths to the plist files to merge relative to execution root.
     * </pre>
     *
     * <code>repeated string source_file = 1;</code>
     */
    int getSourceFileCount();
    /**
     * <pre>
     * Paths to the plist files to merge relative to execution root.
     * </pre>
     *
     * <code>repeated string source_file = 1;</code>
     */
    java.lang.String getSourceFile(int index);
    /**
     * <pre>
     * Paths to the plist files to merge relative to execution root.
     * </pre>
     *
     * <code>repeated string source_file = 1;</code>
     */
    com.google.protobuf.ByteString
        getSourceFileBytes(int index);

    /**
     * <pre>
     * Paths to plist files to merge relative to execution root.  Unlike
     * source_file, these keys cannot be overwritten by other plists.
     * Plmerge will throw an error if any of these keys occur more than once.
     * </pre>
     *
     * <code>repeated string immutable_source_file = 6;</code>
     */
    java.util.List<java.lang.String>
        getImmutableSourceFileList();
    /**
     * <pre>
     * Paths to plist files to merge relative to execution root.  Unlike
     * source_file, these keys cannot be overwritten by other plists.
     * Plmerge will throw an error if any of these keys occur more than once.
     * </pre>
     *
     * <code>repeated string immutable_source_file = 6;</code>
     */
    int getImmutableSourceFileCount();
    /**
     * <pre>
     * Paths to plist files to merge relative to execution root.  Unlike
     * source_file, these keys cannot be overwritten by other plists.
     * Plmerge will throw an error if any of these keys occur more than once.
     * </pre>
     *
     * <code>repeated string immutable_source_file = 6;</code>
     */
    java.lang.String getImmutableSourceFile(int index);
    /**
     * <pre>
     * Paths to plist files to merge relative to execution root.  Unlike
     * source_file, these keys cannot be overwritten by other plists.
     * Plmerge will throw an error if any of these keys occur more than once.
     * </pre>
     *
     * <code>repeated string immutable_source_file = 6;</code>
     */
    com.google.protobuf.ByteString
        getImmutableSourceFileBytes(int index);

    /**
     * <pre>
     * Path to the output file to merge relative to execution root.
     * </pre>
     *
     * <code>required string out_file = 2;</code>
     */
    boolean hasOutFile();
    /**
     * <pre>
     * Path to the output file to merge relative to execution root.
     * </pre>
     *
     * <code>required string out_file = 2;</code>
     */
    java.lang.String getOutFile();
    /**
     * <pre>
     * Path to the output file to merge relative to execution root.
     * </pre>
     *
     * <code>required string out_file = 2;</code>
     */
    com.google.protobuf.ByteString
        getOutFileBytes();

    /**
     * <pre>
     * Output format of the resulting plist file.
     * </pre>
     *
     * <code>optional .devtools.xcode.Control.OutputFormat output_format = 8 [default = BINARY];</code>
     */
    boolean hasOutputFormat();
    /**
     * <pre>
     * Output format of the resulting plist file.
     * </pre>
     *
     * <code>optional .devtools.xcode.Control.OutputFormat output_format = 8 [default = BINARY];</code>
     */
    com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control.OutputFormat getOutputFormat();

    /**
     * <pre>
     * Key-value substitutions to support templating for plists.  A substitution
     * is made if the substitution key appears as a value for any key-value pair
     * in any source_file.
     * For example, a plist with the entry:
     *    &lt;key&gt;CFBundleExecutable&lt;/key&gt;
     *    &lt;string&gt;EXECUTABLE_NAME&lt;/string&gt;
     * could be templated by passing a variable substitution like
     *    {"EXECUTABLE_NAME", "PrenotCalculator"}
     * </pre>
     *
     * <code>map&lt;string, string&gt; variable_substitution_map = 3;</code>
     */
    int getVariableSubstitutionMapCount();
    /**
     * <pre>
     * Key-value substitutions to support templating for plists.  A substitution
     * is made if the substitution key appears as a value for any key-value pair
     * in any source_file.
     * For example, a plist with the entry:
     *    &lt;key&gt;CFBundleExecutable&lt;/key&gt;
     *    &lt;string&gt;EXECUTABLE_NAME&lt;/string&gt;
     * could be templated by passing a variable substitution like
     *    {"EXECUTABLE_NAME", "PrenotCalculator"}
     * </pre>
     *
     * <code>map&lt;string, string&gt; variable_substitution_map = 3;</code>
     */
    boolean containsVariableSubstitutionMap(
        java.lang.String key);
    /**
     * Use {@link #getVariableSubstitutionMapMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getVariableSubstitutionMap();
    /**
     * <pre>
     * Key-value substitutions to support templating for plists.  A substitution
     * is made if the substitution key appears as a value for any key-value pair
     * in any source_file.
     * For example, a plist with the entry:
     *    &lt;key&gt;CFBundleExecutable&lt;/key&gt;
     *    &lt;string&gt;EXECUTABLE_NAME&lt;/string&gt;
     * could be templated by passing a variable substitution like
     *    {"EXECUTABLE_NAME", "PrenotCalculator"}
     * </pre>
     *
     * <code>map&lt;string, string&gt; variable_substitution_map = 3;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getVariableSubstitutionMapMap();
    /**
     * <pre>
     * Key-value substitutions to support templating for plists.  A substitution
     * is made if the substitution key appears as a value for any key-value pair
     * in any source_file.
     * For example, a plist with the entry:
     *    &lt;key&gt;CFBundleExecutable&lt;/key&gt;
     *    &lt;string&gt;EXECUTABLE_NAME&lt;/string&gt;
     * could be templated by passing a variable substitution like
     *    {"EXECUTABLE_NAME", "PrenotCalculator"}
     * </pre>
     *
     * <code>map&lt;string, string&gt; variable_substitution_map = 3;</code>
     */

    java.lang.String getVariableSubstitutionMapOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <pre>
     * Key-value substitutions to support templating for plists.  A substitution
     * is made if the substitution key appears as a value for any key-value pair
     * in any source_file.
     * For example, a plist with the entry:
     *    &lt;key&gt;CFBundleExecutable&lt;/key&gt;
     *    &lt;string&gt;EXECUTABLE_NAME&lt;/string&gt;
     * could be templated by passing a variable substitution like
     *    {"EXECUTABLE_NAME", "PrenotCalculator"}
     * </pre>
     *
     * <code>map&lt;string, string&gt; variable_substitution_map = 3;</code>
     */

    java.lang.String getVariableSubstitutionMapOrThrow(
        java.lang.String key);

    /**
     * <pre>
     * A reverse-DNS string identifier for this bundle associated with output
     * binary plist.  Overrides the bundle id specified in the CFBundleIdentifier
     * plist field.
     * </pre>
     *
     * <code>optional string primary_bundle_id = 4;</code>
     */
    boolean hasPrimaryBundleId();
    /**
     * <pre>
     * A reverse-DNS string identifier for this bundle associated with output
     * binary plist.  Overrides the bundle id specified in the CFBundleIdentifier
     * plist field.
     * </pre>
     *
     * <code>optional string primary_bundle_id = 4;</code>
     */
    java.lang.String getPrimaryBundleId();
    /**
     * <pre>
     * A reverse-DNS string identifier for this bundle associated with output
     * binary plist.  Overrides the bundle id specified in the CFBundleIdentifier
     * plist field.
     * </pre>
     *
     * <code>optional string primary_bundle_id = 4;</code>
     */
    com.google.protobuf.ByteString
        getPrimaryBundleIdBytes();

    /**
     * <pre>
     * A fallback reverse-DNS string identifier for this bundle when bundle
     * identifier is not specified in primary_bundle_id or an associated plist
     * file.
     * </pre>
     *
     * <code>optional string fallback_bundle_id = 5;</code>
     */
    boolean hasFallbackBundleId();
    /**
     * <pre>
     * A fallback reverse-DNS string identifier for this bundle when bundle
     * identifier is not specified in primary_bundle_id or an associated plist
     * file.
     * </pre>
     *
     * <code>optional string fallback_bundle_id = 5;</code>
     */
    java.lang.String getFallbackBundleId();
    /**
     * <pre>
     * A fallback reverse-DNS string identifier for this bundle when bundle
     * identifier is not specified in primary_bundle_id or an associated plist
     * file.
     * </pre>
     *
     * <code>optional string fallback_bundle_id = 5;</code>
     */
    com.google.protobuf.ByteString
        getFallbackBundleIdBytes();

    /**
     * <pre>
     * Name of executable for the bundle this merged plist is intended for, or
     * unset if no such executable exists.  If a value for CFBundleExecutable is
     * given in a source_file or immutable_source_file, that value mut not
     * conflict with this key.
     * </pre>
     *
     * <code>optional string executable_name = 7;</code>
     */
    boolean hasExecutableName();
    /**
     * <pre>
     * Name of executable for the bundle this merged plist is intended for, or
     * unset if no such executable exists.  If a value for CFBundleExecutable is
     * given in a source_file or immutable_source_file, that value mut not
     * conflict with this key.
     * </pre>
     *
     * <code>optional string executable_name = 7;</code>
     */
    java.lang.String getExecutableName();
    /**
     * <pre>
     * Name of executable for the bundle this merged plist is intended for, or
     * unset if no such executable exists.  If a value for CFBundleExecutable is
     * given in a source_file or immutable_source_file, that value mut not
     * conflict with this key.
     * </pre>
     *
     * <code>optional string executable_name = 7;</code>
     */
    com.google.protobuf.ByteString
        getExecutableNameBytes();
  }
  /**
   * <pre>
   * Contains necessary arguments for PlMerge, which is responsible for merging
   * plist files.
   * Next Id: 9
   * </pre>
   *
   * Protobuf type {@code devtools.xcode.Control}
   */
  public  static final class Control extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:devtools.xcode.Control)
      ControlOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Control.newBuilder() to construct.
    private Control(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Control() {
      sourceFile_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      immutableSourceFile_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      outFile_ = "";
      outputFormat_ = 1;
      primaryBundleId_ = "";
      fallbackBundleId_ = "";
      executableName_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Control(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                sourceFile_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              sourceFile_.add(bs);
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              outFile_ = bs;
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                variableSubstitutionMap_ = com.google.protobuf.MapField.newMapField(
                    VariableSubstitutionMapDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000010;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              variableSubstitutionMap__ = input.readMessage(
                  VariableSubstitutionMapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              variableSubstitutionMap_.getMutableMap().put(
                  variableSubstitutionMap__.getKey(), variableSubstitutionMap__.getValue());
              break;
            }
            case 34: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              primaryBundleId_ = bs;
              break;
            }
            case 42: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              fallbackBundleId_ = bs;
              break;
            }
            case 50: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                immutableSourceFile_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000002;
              }
              immutableSourceFile_.add(bs);
              break;
            }
            case 58: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000010;
              executableName_ = bs;
              break;
            }
            case 64: {
              int rawValue = input.readEnum();
                @SuppressWarnings("deprecation")
              com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control.OutputFormat value = com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control.OutputFormat.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(8, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                outputFormat_ = rawValue;
              }
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          sourceFile_ = sourceFile_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          immutableSourceFile_ = immutableSourceFile_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.internal_static_devtools_xcode_Control_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 3:
          return internalGetVariableSubstitutionMap();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.internal_static_devtools_xcode_Control_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control.class, com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control.Builder.class);
    }

    /**
     * <pre>
     * Formats that plmerge can output to.
     * </pre>
     *
     * Protobuf enum {@code devtools.xcode.Control.OutputFormat}
     */
    public enum OutputFormat
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>BINARY = 1;</code>
       */
      BINARY(1),
      /**
       * <code>XML = 2;</code>
       */
      XML(2),
      ;

      /**
       * <code>BINARY = 1;</code>
       */
      public static final int BINARY_VALUE = 1;
      /**
       * <code>XML = 2;</code>
       */
      public static final int XML_VALUE = 2;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static OutputFormat valueOf(int value) {
        return forNumber(value);
      }

      public static OutputFormat forNumber(int value) {
        switch (value) {
          case 1: return BINARY;
          case 2: return XML;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<OutputFormat>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          OutputFormat> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<OutputFormat>() {
              public OutputFormat findValueByNumber(int number) {
                return OutputFormat.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control.getDescriptor().getEnumTypes().get(0);
      }

      private static final OutputFormat[] VALUES = values();

      public static OutputFormat valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private OutputFormat(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:devtools.xcode.Control.OutputFormat)
    }

    private int bitField0_;
    public static final int SOURCE_FILE_FIELD_NUMBER = 1;
    private com.google.protobuf.LazyStringList sourceFile_;
    /**
     * <pre>
     * Paths to the plist files to merge relative to execution root.
     * </pre>
     *
     * <code>repeated string source_file = 1;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getSourceFileList() {
      return sourceFile_;
    }
    /**
     * <pre>
     * Paths to the plist files to merge relative to execution root.
     * </pre>
     *
     * <code>repeated string source_file = 1;</code>
     */
    public int getSourceFileCount() {
      return sourceFile_.size();
    }
    /**
     * <pre>
     * Paths to the plist files to merge relative to execution root.
     * </pre>
     *
     * <code>repeated string source_file = 1;</code>
     */
    public java.lang.String getSourceFile(int index) {
      return sourceFile_.get(index);
    }
    /**
     * <pre>
     * Paths to the plist files to merge relative to execution root.
     * </pre>
     *
     * <code>repeated string source_file = 1;</code>
     */
    public com.google.protobuf.ByteString
        getSourceFileBytes(int index) {
      return sourceFile_.getByteString(index);
    }

    public static final int IMMUTABLE_SOURCE_FILE_FIELD_NUMBER = 6;
    private com.google.protobuf.LazyStringList immutableSourceFile_;
    /**
     * <pre>
     * Paths to plist files to merge relative to execution root.  Unlike
     * source_file, these keys cannot be overwritten by other plists.
     * Plmerge will throw an error if any of these keys occur more than once.
     * </pre>
     *
     * <code>repeated string immutable_source_file = 6;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getImmutableSourceFileList() {
      return immutableSourceFile_;
    }
    /**
     * <pre>
     * Paths to plist files to merge relative to execution root.  Unlike
     * source_file, these keys cannot be overwritten by other plists.
     * Plmerge will throw an error if any of these keys occur more than once.
     * </pre>
     *
     * <code>repeated string immutable_source_file = 6;</code>
     */
    public int getImmutableSourceFileCount() {
      return immutableSourceFile_.size();
    }
    /**
     * <pre>
     * Paths to plist files to merge relative to execution root.  Unlike
     * source_file, these keys cannot be overwritten by other plists.
     * Plmerge will throw an error if any of these keys occur more than once.
     * </pre>
     *
     * <code>repeated string immutable_source_file = 6;</code>
     */
    public java.lang.String getImmutableSourceFile(int index) {
      return immutableSourceFile_.get(index);
    }
    /**
     * <pre>
     * Paths to plist files to merge relative to execution root.  Unlike
     * source_file, these keys cannot be overwritten by other plists.
     * Plmerge will throw an error if any of these keys occur more than once.
     * </pre>
     *
     * <code>repeated string immutable_source_file = 6;</code>
     */
    public com.google.protobuf.ByteString
        getImmutableSourceFileBytes(int index) {
      return immutableSourceFile_.getByteString(index);
    }

    public static final int OUT_FILE_FIELD_NUMBER = 2;
    private volatile java.lang.Object outFile_;
    /**
     * <pre>
     * Path to the output file to merge relative to execution root.
     * </pre>
     *
     * <code>required string out_file = 2;</code>
     */
    public boolean hasOutFile() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Path to the output file to merge relative to execution root.
     * </pre>
     *
     * <code>required string out_file = 2;</code>
     */
    public java.lang.String getOutFile() {
      java.lang.Object ref = outFile_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          outFile_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Path to the output file to merge relative to execution root.
     * </pre>
     *
     * <code>required string out_file = 2;</code>
     */
    public com.google.protobuf.ByteString
        getOutFileBytes() {
      java.lang.Object ref = outFile_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        outFile_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int OUTPUT_FORMAT_FIELD_NUMBER = 8;
    private int outputFormat_;
    /**
     * <pre>
     * Output format of the resulting plist file.
     * </pre>
     *
     * <code>optional .devtools.xcode.Control.OutputFormat output_format = 8 [default = BINARY];</code>
     */
    public boolean hasOutputFormat() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * Output format of the resulting plist file.
     * </pre>
     *
     * <code>optional .devtools.xcode.Control.OutputFormat output_format = 8 [default = BINARY];</code>
     */
    public com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control.OutputFormat getOutputFormat() {
      @SuppressWarnings("deprecation")
      com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control.OutputFormat result = com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control.OutputFormat.valueOf(outputFormat_);
      return result == null ? com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control.OutputFormat.BINARY : result;
    }

    public static final int VARIABLE_SUBSTITUTION_MAP_FIELD_NUMBER = 3;
    private static final class VariableSubstitutionMapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.internal_static_devtools_xcode_Control_VariableSubstitutionMapEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> variableSubstitutionMap_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetVariableSubstitutionMap() {
      if (variableSubstitutionMap_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            VariableSubstitutionMapDefaultEntryHolder.defaultEntry);
      }
      return variableSubstitutionMap_;
    }

    public int getVariableSubstitutionMapCount() {
      return internalGetVariableSubstitutionMap().getMap().size();
    }
    /**
     * <pre>
     * Key-value substitutions to support templating for plists.  A substitution
     * is made if the substitution key appears as a value for any key-value pair
     * in any source_file.
     * For example, a plist with the entry:
     *    &lt;key&gt;CFBundleExecutable&lt;/key&gt;
     *    &lt;string&gt;EXECUTABLE_NAME&lt;/string&gt;
     * could be templated by passing a variable substitution like
     *    {"EXECUTABLE_NAME", "PrenotCalculator"}
     * </pre>
     *
     * <code>map&lt;string, string&gt; variable_substitution_map = 3;</code>
     */

    public boolean containsVariableSubstitutionMap(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetVariableSubstitutionMap().getMap().containsKey(key);
    }
    /**
     * Use {@link #getVariableSubstitutionMapMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getVariableSubstitutionMap() {
      return getVariableSubstitutionMapMap();
    }
    /**
     * <pre>
     * Key-value substitutions to support templating for plists.  A substitution
     * is made if the substitution key appears as a value for any key-value pair
     * in any source_file.
     * For example, a plist with the entry:
     *    &lt;key&gt;CFBundleExecutable&lt;/key&gt;
     *    &lt;string&gt;EXECUTABLE_NAME&lt;/string&gt;
     * could be templated by passing a variable substitution like
     *    {"EXECUTABLE_NAME", "PrenotCalculator"}
     * </pre>
     *
     * <code>map&lt;string, string&gt; variable_substitution_map = 3;</code>
     */

    public java.util.Map<java.lang.String, java.lang.String> getVariableSubstitutionMapMap() {
      return internalGetVariableSubstitutionMap().getMap();
    }
    /**
     * <pre>
     * Key-value substitutions to support templating for plists.  A substitution
     * is made if the substitution key appears as a value for any key-value pair
     * in any source_file.
     * For example, a plist with the entry:
     *    &lt;key&gt;CFBundleExecutable&lt;/key&gt;
     *    &lt;string&gt;EXECUTABLE_NAME&lt;/string&gt;
     * could be templated by passing a variable substitution like
     *    {"EXECUTABLE_NAME", "PrenotCalculator"}
     * </pre>
     *
     * <code>map&lt;string, string&gt; variable_substitution_map = 3;</code>
     */

    public java.lang.String getVariableSubstitutionMapOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetVariableSubstitutionMap().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Key-value substitutions to support templating for plists.  A substitution
     * is made if the substitution key appears as a value for any key-value pair
     * in any source_file.
     * For example, a plist with the entry:
     *    &lt;key&gt;CFBundleExecutable&lt;/key&gt;
     *    &lt;string&gt;EXECUTABLE_NAME&lt;/string&gt;
     * could be templated by passing a variable substitution like
     *    {"EXECUTABLE_NAME", "PrenotCalculator"}
     * </pre>
     *
     * <code>map&lt;string, string&gt; variable_substitution_map = 3;</code>
     */

    public java.lang.String getVariableSubstitutionMapOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetVariableSubstitutionMap().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int PRIMARY_BUNDLE_ID_FIELD_NUMBER = 4;
    private volatile java.lang.Object primaryBundleId_;
    /**
     * <pre>
     * A reverse-DNS string identifier for this bundle associated with output
     * binary plist.  Overrides the bundle id specified in the CFBundleIdentifier
     * plist field.
     * </pre>
     *
     * <code>optional string primary_bundle_id = 4;</code>
     */
    public boolean hasPrimaryBundleId() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * A reverse-DNS string identifier for this bundle associated with output
     * binary plist.  Overrides the bundle id specified in the CFBundleIdentifier
     * plist field.
     * </pre>
     *
     * <code>optional string primary_bundle_id = 4;</code>
     */
    public java.lang.String getPrimaryBundleId() {
      java.lang.Object ref = primaryBundleId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          primaryBundleId_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * A reverse-DNS string identifier for this bundle associated with output
     * binary plist.  Overrides the bundle id specified in the CFBundleIdentifier
     * plist field.
     * </pre>
     *
     * <code>optional string primary_bundle_id = 4;</code>
     */
    public com.google.protobuf.ByteString
        getPrimaryBundleIdBytes() {
      java.lang.Object ref = primaryBundleId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        primaryBundleId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FALLBACK_BUNDLE_ID_FIELD_NUMBER = 5;
    private volatile java.lang.Object fallbackBundleId_;
    /**
     * <pre>
     * A fallback reverse-DNS string identifier for this bundle when bundle
     * identifier is not specified in primary_bundle_id or an associated plist
     * file.
     * </pre>
     *
     * <code>optional string fallback_bundle_id = 5;</code>
     */
    public boolean hasFallbackBundleId() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * A fallback reverse-DNS string identifier for this bundle when bundle
     * identifier is not specified in primary_bundle_id or an associated plist
     * file.
     * </pre>
     *
     * <code>optional string fallback_bundle_id = 5;</code>
     */
    public java.lang.String getFallbackBundleId() {
      java.lang.Object ref = fallbackBundleId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          fallbackBundleId_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * A fallback reverse-DNS string identifier for this bundle when bundle
     * identifier is not specified in primary_bundle_id or an associated plist
     * file.
     * </pre>
     *
     * <code>optional string fallback_bundle_id = 5;</code>
     */
    public com.google.protobuf.ByteString
        getFallbackBundleIdBytes() {
      java.lang.Object ref = fallbackBundleId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        fallbackBundleId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int EXECUTABLE_NAME_FIELD_NUMBER = 7;
    private volatile java.lang.Object executableName_;
    /**
     * <pre>
     * Name of executable for the bundle this merged plist is intended for, or
     * unset if no such executable exists.  If a value for CFBundleExecutable is
     * given in a source_file or immutable_source_file, that value mut not
     * conflict with this key.
     * </pre>
     *
     * <code>optional string executable_name = 7;</code>
     */
    public boolean hasExecutableName() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * Name of executable for the bundle this merged plist is intended for, or
     * unset if no such executable exists.  If a value for CFBundleExecutable is
     * given in a source_file or immutable_source_file, that value mut not
     * conflict with this key.
     * </pre>
     *
     * <code>optional string executable_name = 7;</code>
     */
    public java.lang.String getExecutableName() {
      java.lang.Object ref = executableName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          executableName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Name of executable for the bundle this merged plist is intended for, or
     * unset if no such executable exists.  If a value for CFBundleExecutable is
     * given in a source_file or immutable_source_file, that value mut not
     * conflict with this key.
     * </pre>
     *
     * <code>optional string executable_name = 7;</code>
     */
    public com.google.protobuf.ByteString
        getExecutableNameBytes() {
      java.lang.Object ref = executableName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        executableName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasOutFile()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < sourceFile_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, sourceFile_.getRaw(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, outFile_);
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetVariableSubstitutionMap(),
          VariableSubstitutionMapDefaultEntryHolder.defaultEntry,
          3);
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, primaryBundleId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, fallbackBundleId_);
      }
      for (int i = 0; i < immutableSourceFile_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, immutableSourceFile_.getRaw(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 7, executableName_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(8, outputFormat_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < sourceFile_.size(); i++) {
          dataSize += computeStringSizeNoTag(sourceFile_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getSourceFileList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, outFile_);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetVariableSubstitutionMap().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        variableSubstitutionMap__ = VariableSubstitutionMapDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, variableSubstitutionMap__);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, primaryBundleId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, fallbackBundleId_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < immutableSourceFile_.size(); i++) {
          dataSize += computeStringSizeNoTag(immutableSourceFile_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getImmutableSourceFileList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, executableName_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, outputFormat_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control)) {
        return super.equals(obj);
      }
      com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control other = (com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control) obj;

      boolean result = true;
      result = result && getSourceFileList()
          .equals(other.getSourceFileList());
      result = result && getImmutableSourceFileList()
          .equals(other.getImmutableSourceFileList());
      result = result && (hasOutFile() == other.hasOutFile());
      if (hasOutFile()) {
        result = result && getOutFile()
            .equals(other.getOutFile());
      }
      result = result && (hasOutputFormat() == other.hasOutputFormat());
      if (hasOutputFormat()) {
        result = result && outputFormat_ == other.outputFormat_;
      }
      result = result && internalGetVariableSubstitutionMap().equals(
          other.internalGetVariableSubstitutionMap());
      result = result && (hasPrimaryBundleId() == other.hasPrimaryBundleId());
      if (hasPrimaryBundleId()) {
        result = result && getPrimaryBundleId()
            .equals(other.getPrimaryBundleId());
      }
      result = result && (hasFallbackBundleId() == other.hasFallbackBundleId());
      if (hasFallbackBundleId()) {
        result = result && getFallbackBundleId()
            .equals(other.getFallbackBundleId());
      }
      result = result && (hasExecutableName() == other.hasExecutableName());
      if (hasExecutableName()) {
        result = result && getExecutableName()
            .equals(other.getExecutableName());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getSourceFileCount() > 0) {
        hash = (37 * hash) + SOURCE_FILE_FIELD_NUMBER;
        hash = (53 * hash) + getSourceFileList().hashCode();
      }
      if (getImmutableSourceFileCount() > 0) {
        hash = (37 * hash) + IMMUTABLE_SOURCE_FILE_FIELD_NUMBER;
        hash = (53 * hash) + getImmutableSourceFileList().hashCode();
      }
      if (hasOutFile()) {
        hash = (37 * hash) + OUT_FILE_FIELD_NUMBER;
        hash = (53 * hash) + getOutFile().hashCode();
      }
      if (hasOutputFormat()) {
        hash = (37 * hash) + OUTPUT_FORMAT_FIELD_NUMBER;
        hash = (53 * hash) + outputFormat_;
      }
      if (!internalGetVariableSubstitutionMap().getMap().isEmpty()) {
        hash = (37 * hash) + VARIABLE_SUBSTITUTION_MAP_FIELD_NUMBER;
        hash = (53 * hash) + internalGetVariableSubstitutionMap().hashCode();
      }
      if (hasPrimaryBundleId()) {
        hash = (37 * hash) + PRIMARY_BUNDLE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getPrimaryBundleId().hashCode();
      }
      if (hasFallbackBundleId()) {
        hash = (37 * hash) + FALLBACK_BUNDLE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getFallbackBundleId().hashCode();
      }
      if (hasExecutableName()) {
        hash = (37 * hash) + EXECUTABLE_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getExecutableName().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Contains necessary arguments for PlMerge, which is responsible for merging
     * plist files.
     * Next Id: 9
     * </pre>
     *
     * Protobuf type {@code devtools.xcode.Control}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:devtools.xcode.Control)
        com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.ControlOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.internal_static_devtools_xcode_Control_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 3:
            return internalGetVariableSubstitutionMap();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 3:
            return internalGetMutableVariableSubstitutionMap();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.internal_static_devtools_xcode_Control_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control.class, com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control.Builder.class);
      }

      // Construct using com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        sourceFile_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        immutableSourceFile_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        outFile_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        outputFormat_ = 1;
        bitField0_ = (bitField0_ & ~0x00000008);
        internalGetMutableVariableSubstitutionMap().clear();
        primaryBundleId_ = "";
        bitField0_ = (bitField0_ & ~0x00000020);
        fallbackBundleId_ = "";
        bitField0_ = (bitField0_ & ~0x00000040);
        executableName_ = "";
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.internal_static_devtools_xcode_Control_descriptor;
      }

      @java.lang.Override
      public com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control getDefaultInstanceForType() {
        return com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control build() {
        com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control buildPartial() {
        com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control result = new com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          sourceFile_ = sourceFile_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.sourceFile_ = sourceFile_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          immutableSourceFile_ = immutableSourceFile_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.immutableSourceFile_ = immutableSourceFile_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000001;
        }
        result.outFile_ = outFile_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.outputFormat_ = outputFormat_;
        result.variableSubstitutionMap_ = internalGetVariableSubstitutionMap();
        result.variableSubstitutionMap_.makeImmutable();
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000004;
        }
        result.primaryBundleId_ = primaryBundleId_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000008;
        }
        result.fallbackBundleId_ = fallbackBundleId_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000010;
        }
        result.executableName_ = executableName_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control) {
          return mergeFrom((com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control other) {
        if (other == com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control.getDefaultInstance()) return this;
        if (!other.sourceFile_.isEmpty()) {
          if (sourceFile_.isEmpty()) {
            sourceFile_ = other.sourceFile_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureSourceFileIsMutable();
            sourceFile_.addAll(other.sourceFile_);
          }
          onChanged();
        }
        if (!other.immutableSourceFile_.isEmpty()) {
          if (immutableSourceFile_.isEmpty()) {
            immutableSourceFile_ = other.immutableSourceFile_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureImmutableSourceFileIsMutable();
            immutableSourceFile_.addAll(other.immutableSourceFile_);
          }
          onChanged();
        }
        if (other.hasOutFile()) {
          bitField0_ |= 0x00000004;
          outFile_ = other.outFile_;
          onChanged();
        }
        if (other.hasOutputFormat()) {
          setOutputFormat(other.getOutputFormat());
        }
        internalGetMutableVariableSubstitutionMap().mergeFrom(
            other.internalGetVariableSubstitutionMap());
        if (other.hasPrimaryBundleId()) {
          bitField0_ |= 0x00000020;
          primaryBundleId_ = other.primaryBundleId_;
          onChanged();
        }
        if (other.hasFallbackBundleId()) {
          bitField0_ |= 0x00000040;
          fallbackBundleId_ = other.fallbackBundleId_;
          onChanged();
        }
        if (other.hasExecutableName()) {
          bitField0_ |= 0x00000080;
          executableName_ = other.executableName_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasOutFile()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.LazyStringList sourceFile_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureSourceFileIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          sourceFile_ = new com.google.protobuf.LazyStringArrayList(sourceFile_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * Paths to the plist files to merge relative to execution root.
       * </pre>
       *
       * <code>repeated string source_file = 1;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getSourceFileList() {
        return sourceFile_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Paths to the plist files to merge relative to execution root.
       * </pre>
       *
       * <code>repeated string source_file = 1;</code>
       */
      public int getSourceFileCount() {
        return sourceFile_.size();
      }
      /**
       * <pre>
       * Paths to the plist files to merge relative to execution root.
       * </pre>
       *
       * <code>repeated string source_file = 1;</code>
       */
      public java.lang.String getSourceFile(int index) {
        return sourceFile_.get(index);
      }
      /**
       * <pre>
       * Paths to the plist files to merge relative to execution root.
       * </pre>
       *
       * <code>repeated string source_file = 1;</code>
       */
      public com.google.protobuf.ByteString
          getSourceFileBytes(int index) {
        return sourceFile_.getByteString(index);
      }
      /**
       * <pre>
       * Paths to the plist files to merge relative to execution root.
       * </pre>
       *
       * <code>repeated string source_file = 1;</code>
       */
      public Builder setSourceFile(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureSourceFileIsMutable();
        sourceFile_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Paths to the plist files to merge relative to execution root.
       * </pre>
       *
       * <code>repeated string source_file = 1;</code>
       */
      public Builder addSourceFile(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureSourceFileIsMutable();
        sourceFile_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Paths to the plist files to merge relative to execution root.
       * </pre>
       *
       * <code>repeated string source_file = 1;</code>
       */
      public Builder addAllSourceFile(
          java.lang.Iterable<java.lang.String> values) {
        ensureSourceFileIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, sourceFile_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Paths to the plist files to merge relative to execution root.
       * </pre>
       *
       * <code>repeated string source_file = 1;</code>
       */
      public Builder clearSourceFile() {
        sourceFile_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Paths to the plist files to merge relative to execution root.
       * </pre>
       *
       * <code>repeated string source_file = 1;</code>
       */
      public Builder addSourceFileBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureSourceFileIsMutable();
        sourceFile_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList immutableSourceFile_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureImmutableSourceFileIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          immutableSourceFile_ = new com.google.protobuf.LazyStringArrayList(immutableSourceFile_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       * Paths to plist files to merge relative to execution root.  Unlike
       * source_file, these keys cannot be overwritten by other plists.
       * Plmerge will throw an error if any of these keys occur more than once.
       * </pre>
       *
       * <code>repeated string immutable_source_file = 6;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getImmutableSourceFileList() {
        return immutableSourceFile_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Paths to plist files to merge relative to execution root.  Unlike
       * source_file, these keys cannot be overwritten by other plists.
       * Plmerge will throw an error if any of these keys occur more than once.
       * </pre>
       *
       * <code>repeated string immutable_source_file = 6;</code>
       */
      public int getImmutableSourceFileCount() {
        return immutableSourceFile_.size();
      }
      /**
       * <pre>
       * Paths to plist files to merge relative to execution root.  Unlike
       * source_file, these keys cannot be overwritten by other plists.
       * Plmerge will throw an error if any of these keys occur more than once.
       * </pre>
       *
       * <code>repeated string immutable_source_file = 6;</code>
       */
      public java.lang.String getImmutableSourceFile(int index) {
        return immutableSourceFile_.get(index);
      }
      /**
       * <pre>
       * Paths to plist files to merge relative to execution root.  Unlike
       * source_file, these keys cannot be overwritten by other plists.
       * Plmerge will throw an error if any of these keys occur more than once.
       * </pre>
       *
       * <code>repeated string immutable_source_file = 6;</code>
       */
      public com.google.protobuf.ByteString
          getImmutableSourceFileBytes(int index) {
        return immutableSourceFile_.getByteString(index);
      }
      /**
       * <pre>
       * Paths to plist files to merge relative to execution root.  Unlike
       * source_file, these keys cannot be overwritten by other plists.
       * Plmerge will throw an error if any of these keys occur more than once.
       * </pre>
       *
       * <code>repeated string immutable_source_file = 6;</code>
       */
      public Builder setImmutableSourceFile(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureImmutableSourceFileIsMutable();
        immutableSourceFile_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Paths to plist files to merge relative to execution root.  Unlike
       * source_file, these keys cannot be overwritten by other plists.
       * Plmerge will throw an error if any of these keys occur more than once.
       * </pre>
       *
       * <code>repeated string immutable_source_file = 6;</code>
       */
      public Builder addImmutableSourceFile(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureImmutableSourceFileIsMutable();
        immutableSourceFile_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Paths to plist files to merge relative to execution root.  Unlike
       * source_file, these keys cannot be overwritten by other plists.
       * Plmerge will throw an error if any of these keys occur more than once.
       * </pre>
       *
       * <code>repeated string immutable_source_file = 6;</code>
       */
      public Builder addAllImmutableSourceFile(
          java.lang.Iterable<java.lang.String> values) {
        ensureImmutableSourceFileIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, immutableSourceFile_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Paths to plist files to merge relative to execution root.  Unlike
       * source_file, these keys cannot be overwritten by other plists.
       * Plmerge will throw an error if any of these keys occur more than once.
       * </pre>
       *
       * <code>repeated string immutable_source_file = 6;</code>
       */
      public Builder clearImmutableSourceFile() {
        immutableSourceFile_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Paths to plist files to merge relative to execution root.  Unlike
       * source_file, these keys cannot be overwritten by other plists.
       * Plmerge will throw an error if any of these keys occur more than once.
       * </pre>
       *
       * <code>repeated string immutable_source_file = 6;</code>
       */
      public Builder addImmutableSourceFileBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureImmutableSourceFileIsMutable();
        immutableSourceFile_.add(value);
        onChanged();
        return this;
      }

      private java.lang.Object outFile_ = "";
      /**
       * <pre>
       * Path to the output file to merge relative to execution root.
       * </pre>
       *
       * <code>required string out_file = 2;</code>
       */
      public boolean hasOutFile() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * Path to the output file to merge relative to execution root.
       * </pre>
       *
       * <code>required string out_file = 2;</code>
       */
      public java.lang.String getOutFile() {
        java.lang.Object ref = outFile_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            outFile_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Path to the output file to merge relative to execution root.
       * </pre>
       *
       * <code>required string out_file = 2;</code>
       */
      public com.google.protobuf.ByteString
          getOutFileBytes() {
        java.lang.Object ref = outFile_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          outFile_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Path to the output file to merge relative to execution root.
       * </pre>
       *
       * <code>required string out_file = 2;</code>
       */
      public Builder setOutFile(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        outFile_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Path to the output file to merge relative to execution root.
       * </pre>
       *
       * <code>required string out_file = 2;</code>
       */
      public Builder clearOutFile() {
        bitField0_ = (bitField0_ & ~0x00000004);
        outFile_ = getDefaultInstance().getOutFile();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Path to the output file to merge relative to execution root.
       * </pre>
       *
       * <code>required string out_file = 2;</code>
       */
      public Builder setOutFileBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        outFile_ = value;
        onChanged();
        return this;
      }

      private int outputFormat_ = 1;
      /**
       * <pre>
       * Output format of the resulting plist file.
       * </pre>
       *
       * <code>optional .devtools.xcode.Control.OutputFormat output_format = 8 [default = BINARY];</code>
       */
      public boolean hasOutputFormat() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * Output format of the resulting plist file.
       * </pre>
       *
       * <code>optional .devtools.xcode.Control.OutputFormat output_format = 8 [default = BINARY];</code>
       */
      public com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control.OutputFormat getOutputFormat() {
        @SuppressWarnings("deprecation")
        com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control.OutputFormat result = com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control.OutputFormat.valueOf(outputFormat_);
        return result == null ? com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control.OutputFormat.BINARY : result;
      }
      /**
       * <pre>
       * Output format of the resulting plist file.
       * </pre>
       *
       * <code>optional .devtools.xcode.Control.OutputFormat output_format = 8 [default = BINARY];</code>
       */
      public Builder setOutputFormat(com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control.OutputFormat value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        outputFormat_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Output format of the resulting plist file.
       * </pre>
       *
       * <code>optional .devtools.xcode.Control.OutputFormat output_format = 8 [default = BINARY];</code>
       */
      public Builder clearOutputFormat() {
        bitField0_ = (bitField0_ & ~0x00000008);
        outputFormat_ = 1;
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> variableSubstitutionMap_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetVariableSubstitutionMap() {
        if (variableSubstitutionMap_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              VariableSubstitutionMapDefaultEntryHolder.defaultEntry);
        }
        return variableSubstitutionMap_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableVariableSubstitutionMap() {
        onChanged();;
        if (variableSubstitutionMap_ == null) {
          variableSubstitutionMap_ = com.google.protobuf.MapField.newMapField(
              VariableSubstitutionMapDefaultEntryHolder.defaultEntry);
        }
        if (!variableSubstitutionMap_.isMutable()) {
          variableSubstitutionMap_ = variableSubstitutionMap_.copy();
        }
        return variableSubstitutionMap_;
      }

      public int getVariableSubstitutionMapCount() {
        return internalGetVariableSubstitutionMap().getMap().size();
      }
      /**
       * <pre>
       * Key-value substitutions to support templating for plists.  A substitution
       * is made if the substitution key appears as a value for any key-value pair
       * in any source_file.
       * For example, a plist with the entry:
       *    &lt;key&gt;CFBundleExecutable&lt;/key&gt;
       *    &lt;string&gt;EXECUTABLE_NAME&lt;/string&gt;
       * could be templated by passing a variable substitution like
       *    {"EXECUTABLE_NAME", "PrenotCalculator"}
       * </pre>
       *
       * <code>map&lt;string, string&gt; variable_substitution_map = 3;</code>
       */

      public boolean containsVariableSubstitutionMap(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetVariableSubstitutionMap().getMap().containsKey(key);
      }
      /**
       * Use {@link #getVariableSubstitutionMapMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getVariableSubstitutionMap() {
        return getVariableSubstitutionMapMap();
      }
      /**
       * <pre>
       * Key-value substitutions to support templating for plists.  A substitution
       * is made if the substitution key appears as a value for any key-value pair
       * in any source_file.
       * For example, a plist with the entry:
       *    &lt;key&gt;CFBundleExecutable&lt;/key&gt;
       *    &lt;string&gt;EXECUTABLE_NAME&lt;/string&gt;
       * could be templated by passing a variable substitution like
       *    {"EXECUTABLE_NAME", "PrenotCalculator"}
       * </pre>
       *
       * <code>map&lt;string, string&gt; variable_substitution_map = 3;</code>
       */

      public java.util.Map<java.lang.String, java.lang.String> getVariableSubstitutionMapMap() {
        return internalGetVariableSubstitutionMap().getMap();
      }
      /**
       * <pre>
       * Key-value substitutions to support templating for plists.  A substitution
       * is made if the substitution key appears as a value for any key-value pair
       * in any source_file.
       * For example, a plist with the entry:
       *    &lt;key&gt;CFBundleExecutable&lt;/key&gt;
       *    &lt;string&gt;EXECUTABLE_NAME&lt;/string&gt;
       * could be templated by passing a variable substitution like
       *    {"EXECUTABLE_NAME", "PrenotCalculator"}
       * </pre>
       *
       * <code>map&lt;string, string&gt; variable_substitution_map = 3;</code>
       */

      public java.lang.String getVariableSubstitutionMapOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetVariableSubstitutionMap().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * Key-value substitutions to support templating for plists.  A substitution
       * is made if the substitution key appears as a value for any key-value pair
       * in any source_file.
       * For example, a plist with the entry:
       *    &lt;key&gt;CFBundleExecutable&lt;/key&gt;
       *    &lt;string&gt;EXECUTABLE_NAME&lt;/string&gt;
       * could be templated by passing a variable substitution like
       *    {"EXECUTABLE_NAME", "PrenotCalculator"}
       * </pre>
       *
       * <code>map&lt;string, string&gt; variable_substitution_map = 3;</code>
       */

      public java.lang.String getVariableSubstitutionMapOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetVariableSubstitutionMap().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearVariableSubstitutionMap() {
        internalGetMutableVariableSubstitutionMap().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * Key-value substitutions to support templating for plists.  A substitution
       * is made if the substitution key appears as a value for any key-value pair
       * in any source_file.
       * For example, a plist with the entry:
       *    &lt;key&gt;CFBundleExecutable&lt;/key&gt;
       *    &lt;string&gt;EXECUTABLE_NAME&lt;/string&gt;
       * could be templated by passing a variable substitution like
       *    {"EXECUTABLE_NAME", "PrenotCalculator"}
       * </pre>
       *
       * <code>map&lt;string, string&gt; variable_substitution_map = 3;</code>
       */

      public Builder removeVariableSubstitutionMap(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableVariableSubstitutionMap().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableVariableSubstitutionMap() {
        return internalGetMutableVariableSubstitutionMap().getMutableMap();
      }
      /**
       * <pre>
       * Key-value substitutions to support templating for plists.  A substitution
       * is made if the substitution key appears as a value for any key-value pair
       * in any source_file.
       * For example, a plist with the entry:
       *    &lt;key&gt;CFBundleExecutable&lt;/key&gt;
       *    &lt;string&gt;EXECUTABLE_NAME&lt;/string&gt;
       * could be templated by passing a variable substitution like
       *    {"EXECUTABLE_NAME", "PrenotCalculator"}
       * </pre>
       *
       * <code>map&lt;string, string&gt; variable_substitution_map = 3;</code>
       */
      public Builder putVariableSubstitutionMap(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableVariableSubstitutionMap().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * Key-value substitutions to support templating for plists.  A substitution
       * is made if the substitution key appears as a value for any key-value pair
       * in any source_file.
       * For example, a plist with the entry:
       *    &lt;key&gt;CFBundleExecutable&lt;/key&gt;
       *    &lt;string&gt;EXECUTABLE_NAME&lt;/string&gt;
       * could be templated by passing a variable substitution like
       *    {"EXECUTABLE_NAME", "PrenotCalculator"}
       * </pre>
       *
       * <code>map&lt;string, string&gt; variable_substitution_map = 3;</code>
       */

      public Builder putAllVariableSubstitutionMap(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableVariableSubstitutionMap().getMutableMap()
            .putAll(values);
        return this;
      }

      private java.lang.Object primaryBundleId_ = "";
      /**
       * <pre>
       * A reverse-DNS string identifier for this bundle associated with output
       * binary plist.  Overrides the bundle id specified in the CFBundleIdentifier
       * plist field.
       * </pre>
       *
       * <code>optional string primary_bundle_id = 4;</code>
       */
      public boolean hasPrimaryBundleId() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       * A reverse-DNS string identifier for this bundle associated with output
       * binary plist.  Overrides the bundle id specified in the CFBundleIdentifier
       * plist field.
       * </pre>
       *
       * <code>optional string primary_bundle_id = 4;</code>
       */
      public java.lang.String getPrimaryBundleId() {
        java.lang.Object ref = primaryBundleId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            primaryBundleId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A reverse-DNS string identifier for this bundle associated with output
       * binary plist.  Overrides the bundle id specified in the CFBundleIdentifier
       * plist field.
       * </pre>
       *
       * <code>optional string primary_bundle_id = 4;</code>
       */
      public com.google.protobuf.ByteString
          getPrimaryBundleIdBytes() {
        java.lang.Object ref = primaryBundleId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          primaryBundleId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A reverse-DNS string identifier for this bundle associated with output
       * binary plist.  Overrides the bundle id specified in the CFBundleIdentifier
       * plist field.
       * </pre>
       *
       * <code>optional string primary_bundle_id = 4;</code>
       */
      public Builder setPrimaryBundleId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        primaryBundleId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A reverse-DNS string identifier for this bundle associated with output
       * binary plist.  Overrides the bundle id specified in the CFBundleIdentifier
       * plist field.
       * </pre>
       *
       * <code>optional string primary_bundle_id = 4;</code>
       */
      public Builder clearPrimaryBundleId() {
        bitField0_ = (bitField0_ & ~0x00000020);
        primaryBundleId_ = getDefaultInstance().getPrimaryBundleId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A reverse-DNS string identifier for this bundle associated with output
       * binary plist.  Overrides the bundle id specified in the CFBundleIdentifier
       * plist field.
       * </pre>
       *
       * <code>optional string primary_bundle_id = 4;</code>
       */
      public Builder setPrimaryBundleIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        primaryBundleId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object fallbackBundleId_ = "";
      /**
       * <pre>
       * A fallback reverse-DNS string identifier for this bundle when bundle
       * identifier is not specified in primary_bundle_id or an associated plist
       * file.
       * </pre>
       *
       * <code>optional string fallback_bundle_id = 5;</code>
       */
      public boolean hasFallbackBundleId() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       * A fallback reverse-DNS string identifier for this bundle when bundle
       * identifier is not specified in primary_bundle_id or an associated plist
       * file.
       * </pre>
       *
       * <code>optional string fallback_bundle_id = 5;</code>
       */
      public java.lang.String getFallbackBundleId() {
        java.lang.Object ref = fallbackBundleId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            fallbackBundleId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A fallback reverse-DNS string identifier for this bundle when bundle
       * identifier is not specified in primary_bundle_id or an associated plist
       * file.
       * </pre>
       *
       * <code>optional string fallback_bundle_id = 5;</code>
       */
      public com.google.protobuf.ByteString
          getFallbackBundleIdBytes() {
        java.lang.Object ref = fallbackBundleId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          fallbackBundleId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A fallback reverse-DNS string identifier for this bundle when bundle
       * identifier is not specified in primary_bundle_id or an associated plist
       * file.
       * </pre>
       *
       * <code>optional string fallback_bundle_id = 5;</code>
       */
      public Builder setFallbackBundleId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        fallbackBundleId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A fallback reverse-DNS string identifier for this bundle when bundle
       * identifier is not specified in primary_bundle_id or an associated plist
       * file.
       * </pre>
       *
       * <code>optional string fallback_bundle_id = 5;</code>
       */
      public Builder clearFallbackBundleId() {
        bitField0_ = (bitField0_ & ~0x00000040);
        fallbackBundleId_ = getDefaultInstance().getFallbackBundleId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A fallback reverse-DNS string identifier for this bundle when bundle
       * identifier is not specified in primary_bundle_id or an associated plist
       * file.
       * </pre>
       *
       * <code>optional string fallback_bundle_id = 5;</code>
       */
      public Builder setFallbackBundleIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        fallbackBundleId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object executableName_ = "";
      /**
       * <pre>
       * Name of executable for the bundle this merged plist is intended for, or
       * unset if no such executable exists.  If a value for CFBundleExecutable is
       * given in a source_file or immutable_source_file, that value mut not
       * conflict with this key.
       * </pre>
       *
       * <code>optional string executable_name = 7;</code>
       */
      public boolean hasExecutableName() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <pre>
       * Name of executable for the bundle this merged plist is intended for, or
       * unset if no such executable exists.  If a value for CFBundleExecutable is
       * given in a source_file or immutable_source_file, that value mut not
       * conflict with this key.
       * </pre>
       *
       * <code>optional string executable_name = 7;</code>
       */
      public java.lang.String getExecutableName() {
        java.lang.Object ref = executableName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            executableName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Name of executable for the bundle this merged plist is intended for, or
       * unset if no such executable exists.  If a value for CFBundleExecutable is
       * given in a source_file or immutable_source_file, that value mut not
       * conflict with this key.
       * </pre>
       *
       * <code>optional string executable_name = 7;</code>
       */
      public com.google.protobuf.ByteString
          getExecutableNameBytes() {
        java.lang.Object ref = executableName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          executableName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Name of executable for the bundle this merged plist is intended for, or
       * unset if no such executable exists.  If a value for CFBundleExecutable is
       * given in a source_file or immutable_source_file, that value mut not
       * conflict with this key.
       * </pre>
       *
       * <code>optional string executable_name = 7;</code>
       */
      public Builder setExecutableName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        executableName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of executable for the bundle this merged plist is intended for, or
       * unset if no such executable exists.  If a value for CFBundleExecutable is
       * given in a source_file or immutable_source_file, that value mut not
       * conflict with this key.
       * </pre>
       *
       * <code>optional string executable_name = 7;</code>
       */
      public Builder clearExecutableName() {
        bitField0_ = (bitField0_ & ~0x00000080);
        executableName_ = getDefaultInstance().getExecutableName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of executable for the bundle this merged plist is intended for, or
       * unset if no such executable exists.  If a value for CFBundleExecutable is
       * given in a source_file or immutable_source_file, that value mut not
       * conflict with this key.
       * </pre>
       *
       * <code>optional string executable_name = 7;</code>
       */
      public Builder setExecutableNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        executableName_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:devtools.xcode.Control)
    }

    // @@protoc_insertion_point(class_scope:devtools.xcode.Control)
    private static final com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control();
    }

    public static com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<Control>
        PARSER = new com.google.protobuf.AbstractParser<Control>() {
      @java.lang.Override
      public Control parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Control(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Control> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Control> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.devtools.build.xcode.plmerge.proto.PlMergeProtos.Control getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_devtools_xcode_Control_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_devtools_xcode_Control_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_devtools_xcode_Control_VariableSubstitutionMapEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_devtools_xcode_Control_VariableSubstitutionMapEntry_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\037src/main/protobuf/plmerge.proto\022\016devto" +
      "ols.xcode\"\242\003\n\007Control\022\023\n\013source_file\030\001 \003" +
      "(\t\022\035\n\025immutable_source_file\030\006 \003(\t\022\020\n\010out" +
      "_file\030\002 \002(\t\022C\n\routput_format\030\010 \001(\0162$.dev" +
      "tools.xcode.Control.OutputFormat:\006BINARY" +
      "\022W\n\031variable_substitution_map\030\003 \003(\01324.de" +
      "vtools.xcode.Control.VariableSubstitutio" +
      "nMapEntry\022\031\n\021primary_bundle_id\030\004 \001(\t\022\032\n\022" +
      "fallback_bundle_id\030\005 \001(\t\022\027\n\017executable_n" +
      "ame\030\007 \001(\t\032>\n\034VariableSubstitutionMapEntr" +
      "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"#\n\014Out" +
      "putFormat\022\n\n\006BINARY\020\001\022\007\n\003XML\020\002B>\n-com.go" +
      "ogle.devtools.build.xcode.plmerge.protoB" +
      "\rPlMergeProtos"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_devtools_xcode_Control_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_devtools_xcode_Control_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_devtools_xcode_Control_descriptor,
        new java.lang.String[] { "SourceFile", "ImmutableSourceFile", "OutFile", "OutputFormat", "VariableSubstitutionMap", "PrimaryBundleId", "FallbackBundleId", "ExecutableName", });
    internal_static_devtools_xcode_Control_VariableSubstitutionMapEntry_descriptor =
      internal_static_devtools_xcode_Control_descriptor.getNestedTypes().get(0);
    internal_static_devtools_xcode_Control_VariableSubstitutionMapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_devtools_xcode_Control_VariableSubstitutionMapEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
