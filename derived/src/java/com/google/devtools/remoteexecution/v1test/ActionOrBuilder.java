// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/remoteexecution/v1test/remote_execution.proto

package com.google.devtools.remoteexecution.v1test;

public interface ActionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.devtools.remoteexecution.v1test.Action)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The digest of the [Command][google.devtools.remoteexecution.v1test.Command]
   * to run, which MUST be present in the
   * [ContentAddressableStorage][google.devtools.remoteexecution.v1test.ContentAddressableStorage].
   * </pre>
   *
   * <code>.google.devtools.remoteexecution.v1test.Digest command_digest = 1;</code>
   */
  boolean hasCommandDigest();
  /**
   * <pre>
   * The digest of the [Command][google.devtools.remoteexecution.v1test.Command]
   * to run, which MUST be present in the
   * [ContentAddressableStorage][google.devtools.remoteexecution.v1test.ContentAddressableStorage].
   * </pre>
   *
   * <code>.google.devtools.remoteexecution.v1test.Digest command_digest = 1;</code>
   */
  com.google.devtools.remoteexecution.v1test.Digest getCommandDigest();
  /**
   * <pre>
   * The digest of the [Command][google.devtools.remoteexecution.v1test.Command]
   * to run, which MUST be present in the
   * [ContentAddressableStorage][google.devtools.remoteexecution.v1test.ContentAddressableStorage].
   * </pre>
   *
   * <code>.google.devtools.remoteexecution.v1test.Digest command_digest = 1;</code>
   */
  com.google.devtools.remoteexecution.v1test.DigestOrBuilder getCommandDigestOrBuilder();

  /**
   * <pre>
   * The digest of the root
   * [Directory][google.devtools.remoteexecution.v1test.Directory] for the input
   * files. The files in the directory tree are available in the correct
   * location on the build machine before the command is executed. The root
   * directory, as well as every subdirectory and content blob referred to, MUST
   * be in the
   * [ContentAddressableStorage][google.devtools.remoteexecution.v1test.ContentAddressableStorage].
   * </pre>
   *
   * <code>.google.devtools.remoteexecution.v1test.Digest input_root_digest = 2;</code>
   */
  boolean hasInputRootDigest();
  /**
   * <pre>
   * The digest of the root
   * [Directory][google.devtools.remoteexecution.v1test.Directory] for the input
   * files. The files in the directory tree are available in the correct
   * location on the build machine before the command is executed. The root
   * directory, as well as every subdirectory and content blob referred to, MUST
   * be in the
   * [ContentAddressableStorage][google.devtools.remoteexecution.v1test.ContentAddressableStorage].
   * </pre>
   *
   * <code>.google.devtools.remoteexecution.v1test.Digest input_root_digest = 2;</code>
   */
  com.google.devtools.remoteexecution.v1test.Digest getInputRootDigest();
  /**
   * <pre>
   * The digest of the root
   * [Directory][google.devtools.remoteexecution.v1test.Directory] for the input
   * files. The files in the directory tree are available in the correct
   * location on the build machine before the command is executed. The root
   * directory, as well as every subdirectory and content blob referred to, MUST
   * be in the
   * [ContentAddressableStorage][google.devtools.remoteexecution.v1test.ContentAddressableStorage].
   * </pre>
   *
   * <code>.google.devtools.remoteexecution.v1test.Digest input_root_digest = 2;</code>
   */
  com.google.devtools.remoteexecution.v1test.DigestOrBuilder getInputRootDigestOrBuilder();

  /**
   * <pre>
   * A list of the output files that the client expects to retrieve from the
   * action. Only the listed files, as well as directories listed in
   * `output_directories`, will be returned to the client as output.
   * Other files that may be created during command execution are discarded.
   * The paths are specified using forward slashes (`/`) as path separators,
   * even if the execution platform natively uses a different separator. The
   * path MUST NOT include a trailing slash.
   * In order to ensure consistent hashing of the same Action, the output paths
   * MUST be sorted lexicographically by code point (or, equivalently, by UTF-8
   * bytes).
   * </pre>
   *
   * <code>repeated string output_files = 3;</code>
   */
  java.util.List<java.lang.String>
      getOutputFilesList();
  /**
   * <pre>
   * A list of the output files that the client expects to retrieve from the
   * action. Only the listed files, as well as directories listed in
   * `output_directories`, will be returned to the client as output.
   * Other files that may be created during command execution are discarded.
   * The paths are specified using forward slashes (`/`) as path separators,
   * even if the execution platform natively uses a different separator. The
   * path MUST NOT include a trailing slash.
   * In order to ensure consistent hashing of the same Action, the output paths
   * MUST be sorted lexicographically by code point (or, equivalently, by UTF-8
   * bytes).
   * </pre>
   *
   * <code>repeated string output_files = 3;</code>
   */
  int getOutputFilesCount();
  /**
   * <pre>
   * A list of the output files that the client expects to retrieve from the
   * action. Only the listed files, as well as directories listed in
   * `output_directories`, will be returned to the client as output.
   * Other files that may be created during command execution are discarded.
   * The paths are specified using forward slashes (`/`) as path separators,
   * even if the execution platform natively uses a different separator. The
   * path MUST NOT include a trailing slash.
   * In order to ensure consistent hashing of the same Action, the output paths
   * MUST be sorted lexicographically by code point (or, equivalently, by UTF-8
   * bytes).
   * </pre>
   *
   * <code>repeated string output_files = 3;</code>
   */
  java.lang.String getOutputFiles(int index);
  /**
   * <pre>
   * A list of the output files that the client expects to retrieve from the
   * action. Only the listed files, as well as directories listed in
   * `output_directories`, will be returned to the client as output.
   * Other files that may be created during command execution are discarded.
   * The paths are specified using forward slashes (`/`) as path separators,
   * even if the execution platform natively uses a different separator. The
   * path MUST NOT include a trailing slash.
   * In order to ensure consistent hashing of the same Action, the output paths
   * MUST be sorted lexicographically by code point (or, equivalently, by UTF-8
   * bytes).
   * </pre>
   *
   * <code>repeated string output_files = 3;</code>
   */
  com.google.protobuf.ByteString
      getOutputFilesBytes(int index);

  /**
   * <pre>
   * A list of the output directories that the client expects to retrieve from
   * the action. Only the contents of the indicated directories (recursively
   * including the contents of their subdirectories) will be
   * returned, as well as files listed in `output_files`. Other files that may
   * be created during command execution are discarded.
   * The paths are specified using forward slashes (`/`) as path separators,
   * even if the execution platform natively uses a different separator. The
   * path MUST NOT include a trailing slash, unless the path is `"/"` (which,
   * although not recommended, can be used to capture the entire working
   * directory tree, including inputs).
   * In order to ensure consistent hashing of the same Action, the output paths
   * MUST be sorted lexicographically by code point (or, equivalently, by UTF-8
   * bytes).
   * </pre>
   *
   * <code>repeated string output_directories = 4;</code>
   */
  java.util.List<java.lang.String>
      getOutputDirectoriesList();
  /**
   * <pre>
   * A list of the output directories that the client expects to retrieve from
   * the action. Only the contents of the indicated directories (recursively
   * including the contents of their subdirectories) will be
   * returned, as well as files listed in `output_files`. Other files that may
   * be created during command execution are discarded.
   * The paths are specified using forward slashes (`/`) as path separators,
   * even if the execution platform natively uses a different separator. The
   * path MUST NOT include a trailing slash, unless the path is `"/"` (which,
   * although not recommended, can be used to capture the entire working
   * directory tree, including inputs).
   * In order to ensure consistent hashing of the same Action, the output paths
   * MUST be sorted lexicographically by code point (or, equivalently, by UTF-8
   * bytes).
   * </pre>
   *
   * <code>repeated string output_directories = 4;</code>
   */
  int getOutputDirectoriesCount();
  /**
   * <pre>
   * A list of the output directories that the client expects to retrieve from
   * the action. Only the contents of the indicated directories (recursively
   * including the contents of their subdirectories) will be
   * returned, as well as files listed in `output_files`. Other files that may
   * be created during command execution are discarded.
   * The paths are specified using forward slashes (`/`) as path separators,
   * even if the execution platform natively uses a different separator. The
   * path MUST NOT include a trailing slash, unless the path is `"/"` (which,
   * although not recommended, can be used to capture the entire working
   * directory tree, including inputs).
   * In order to ensure consistent hashing of the same Action, the output paths
   * MUST be sorted lexicographically by code point (or, equivalently, by UTF-8
   * bytes).
   * </pre>
   *
   * <code>repeated string output_directories = 4;</code>
   */
  java.lang.String getOutputDirectories(int index);
  /**
   * <pre>
   * A list of the output directories that the client expects to retrieve from
   * the action. Only the contents of the indicated directories (recursively
   * including the contents of their subdirectories) will be
   * returned, as well as files listed in `output_files`. Other files that may
   * be created during command execution are discarded.
   * The paths are specified using forward slashes (`/`) as path separators,
   * even if the execution platform natively uses a different separator. The
   * path MUST NOT include a trailing slash, unless the path is `"/"` (which,
   * although not recommended, can be used to capture the entire working
   * directory tree, including inputs).
   * In order to ensure consistent hashing of the same Action, the output paths
   * MUST be sorted lexicographically by code point (or, equivalently, by UTF-8
   * bytes).
   * </pre>
   *
   * <code>repeated string output_directories = 4;</code>
   */
  com.google.protobuf.ByteString
      getOutputDirectoriesBytes(int index);

  /**
   * <pre>
   * The platform requirements for the execution environment. The server MAY
   * choose to execute the action on any worker satisfying the requirements, so
   * the client SHOULD ensure that running the action on any such worker will
   * have the same result.
   * </pre>
   *
   * <code>.google.devtools.remoteexecution.v1test.Platform platform = 5;</code>
   */
  boolean hasPlatform();
  /**
   * <pre>
   * The platform requirements for the execution environment. The server MAY
   * choose to execute the action on any worker satisfying the requirements, so
   * the client SHOULD ensure that running the action on any such worker will
   * have the same result.
   * </pre>
   *
   * <code>.google.devtools.remoteexecution.v1test.Platform platform = 5;</code>
   */
  com.google.devtools.remoteexecution.v1test.Platform getPlatform();
  /**
   * <pre>
   * The platform requirements for the execution environment. The server MAY
   * choose to execute the action on any worker satisfying the requirements, so
   * the client SHOULD ensure that running the action on any such worker will
   * have the same result.
   * </pre>
   *
   * <code>.google.devtools.remoteexecution.v1test.Platform platform = 5;</code>
   */
  com.google.devtools.remoteexecution.v1test.PlatformOrBuilder getPlatformOrBuilder();

  /**
   * <pre>
   * A timeout after which the execution should be killed. If the timeout is
   * absent, then the client is specifying that the execution should continue
   * as long as the server will let it. The server SHOULD impose a timeout if
   * the client does not specify one, however, if the client does specify a
   * timeout that is longer than the server's maximum timeout, the server MUST
   * reject the request.
   * The timeout is a part of the
   * [Action][google.devtools.remoteexecution.v1test.Action] message, and
   * therefore two `Actions` with different timeouts are different, even if they
   * are otherwise identical. This is because, if they were not, running an
   * `Action` with a lower timeout than is required might result in a cache hit
   * from an execution run with a longer timeout, hiding the fact that the
   * timeout is too short. By encoding it directly in the `Action`, a lower
   * timeout will result in a cache miss and the execution timeout will fail
   * immediately, rather than whenever the cache entry gets evicted.
   * </pre>
   *
   * <code>.google.protobuf.Duration timeout = 6;</code>
   */
  boolean hasTimeout();
  /**
   * <pre>
   * A timeout after which the execution should be killed. If the timeout is
   * absent, then the client is specifying that the execution should continue
   * as long as the server will let it. The server SHOULD impose a timeout if
   * the client does not specify one, however, if the client does specify a
   * timeout that is longer than the server's maximum timeout, the server MUST
   * reject the request.
   * The timeout is a part of the
   * [Action][google.devtools.remoteexecution.v1test.Action] message, and
   * therefore two `Actions` with different timeouts are different, even if they
   * are otherwise identical. This is because, if they were not, running an
   * `Action` with a lower timeout than is required might result in a cache hit
   * from an execution run with a longer timeout, hiding the fact that the
   * timeout is too short. By encoding it directly in the `Action`, a lower
   * timeout will result in a cache miss and the execution timeout will fail
   * immediately, rather than whenever the cache entry gets evicted.
   * </pre>
   *
   * <code>.google.protobuf.Duration timeout = 6;</code>
   */
  com.google.protobuf.Duration getTimeout();
  /**
   * <pre>
   * A timeout after which the execution should be killed. If the timeout is
   * absent, then the client is specifying that the execution should continue
   * as long as the server will let it. The server SHOULD impose a timeout if
   * the client does not specify one, however, if the client does specify a
   * timeout that is longer than the server's maximum timeout, the server MUST
   * reject the request.
   * The timeout is a part of the
   * [Action][google.devtools.remoteexecution.v1test.Action] message, and
   * therefore two `Actions` with different timeouts are different, even if they
   * are otherwise identical. This is because, if they were not, running an
   * `Action` with a lower timeout than is required might result in a cache hit
   * from an execution run with a longer timeout, hiding the fact that the
   * timeout is too short. By encoding it directly in the `Action`, a lower
   * timeout will result in a cache miss and the execution timeout will fail
   * immediately, rather than whenever the cache entry gets evicted.
   * </pre>
   *
   * <code>.google.protobuf.Duration timeout = 6;</code>
   */
  com.google.protobuf.DurationOrBuilder getTimeoutOrBuilder();

  /**
   * <pre>
   * If true, then the `Action`'s result cannot be cached.
   * </pre>
   *
   * <code>bool do_not_cache = 7;</code>
   */
  boolean getDoNotCache();
}
